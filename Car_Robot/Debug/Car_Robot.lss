
Car_Robot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000034b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  000034b8  0000354c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000033  00800168  00800168  00003654  2**0
                  ALLOC
  3 .stab         00002f88  00000000  00000000  00003654  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010c1  00000000  00000000  000065dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000769d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000783d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00007a2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00009e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000b1c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000c398  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000c558  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000c84e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d1bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 c3 0c 	jmp	0x1986	; 0x1986 <__vector_1>
       8:	0c 94 f6 0c 	jmp	0x19ec	; 0x19ec <__vector_2>
       c:	0c 94 29 0d 	jmp	0x1a52	; 0x1a52 <__vector_3>
      10:	0c 94 18 11 	jmp	0x2230	; 0x2230 <__vector_4>
      14:	0c 94 e5 10 	jmp	0x21ca	; 0x21ca <__vector_5>
      18:	0c 94 b2 10 	jmp	0x2164	; 0x2164 <__vector_6>
      1c:	0c 94 7f 10 	jmp	0x20fe	; 0x20fe <__vector_7>
      20:	0c 94 4c 10 	jmp	0x2098	; 0x2098 <__vector_8>
      24:	0c 94 19 10 	jmp	0x2032	; 0x2032 <__vector_9>
      28:	0c 94 e6 0f 	jmp	0x1fcc	; 0x1fcc <__vector_10>
      2c:	0c 94 b3 0f 	jmp	0x1f66	; 0x1f66 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ab 39       	cpi	r26, 0x9B	; 155
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e8 eb       	ldi	r30, 0xB8	; 184
      78:	f4 e3       	ldi	r31, 0x34	; 52
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 8d 13 	call	0x271a	; 0x271a <main>
      8a:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 23 1a 	jmp	0x3446	; 0x3446 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3f 1a 	jmp	0x347e	; 0x347e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2f 1a 	jmp	0x345e	; 0x345e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 4b 1a 	jmp	0x3496	; 0x3496 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2f 1a 	jmp	0x345e	; 0x345e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 4b 1a 	jmp	0x3496	; 0x3496 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 23 1a 	jmp	0x3446	; 0x3446 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3f 1a 	jmp	0x347e	; 0x347e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 2b 1a 	jmp	0x3456	; 0x3456 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 47 1a 	jmp	0x348e	; 0x348e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 2f 1a 	jmp	0x345e	; 0x345e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 4b 1a 	jmp	0x3496	; 0x3496 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 2f 1a 	jmp	0x345e	; 0x345e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 4b 1a 	jmp	0x3496	; 0x3496 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 2f 1a 	jmp	0x345e	; 0x345e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 4b 1a 	jmp	0x3496	; 0x3496 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 33 1a 	jmp	0x3466	; 0x3466 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 4f 1a 	jmp	0x349e	; 0x349e <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 2b 1a 	jmp	0x3456	; 0x3456 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 47 1a 	jmp	0x348e	; 0x348e <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <DIO_voidInit>:
#include   "DIO_INT.h"
#include   "DIO_CONFIG.h"
 
 
 void DIO_voidInit(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	 DDRA_REGISTER = Conc(DIO_u8_PA7_INTIAL_DIRECTION,DIO_u8_PA6_INTIAL_DIRECTION,DIO_u8_PA5_INTIAL_DIRECTION,DIO_u8_PA4_INTIAL_DIRECTION,
     e36:	ea e3       	ldi	r30, 0x3A	; 58
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	8f ef       	ldi	r24, 0xFF	; 255
     e3c:	80 83       	st	Z, r24
						   DIO_u8_PA3_INTIAL_DIRECTION,DIO_u8_PA2_INTIAL_DIRECTION,DIO_u8_PA1_INTIAL_DIRECTION,DIO_u8_PA0_INTIAL_DIRECTION);

	 DDRB_REGISTER = Conc(DIO_u8_PB7_INTIAL_DIRECTION,DIO_u8_PB6_INTIAL_DIRECTION,DIO_u8_PB5_INTIAL_DIRECTION,DIO_u8_PB4_INTIAL_DIRECTION,
     e3e:	e7 e3       	ldi	r30, 0x37	; 55
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	10 82       	st	Z, r1
						   DIO_u8_PB3_INTIAL_DIRECTION,DIO_u8_PB2_INTIAL_DIRECTION,DIO_u8_PB1_INTIAL_DIRECTION,DIO_u8_PB0_INTIAL_DIRECTION);

	 DDRC_REGISTER = Conc(DIO_u8_PC7_INTIAL_DIRECTION,DIO_u8_PC6_INTIAL_DIRECTION,DIO_u8_PC5_INTIAL_DIRECTION,DIO_u8_PC4_INTIAL_DIRECTION,
     e44:	e4 e3       	ldi	r30, 0x34	; 52
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	80 83       	st	Z, r24
						   DIO_u8_PC3_INTIAL_DIRECTION,DIO_u8_PC2_INTIAL_DIRECTION,DIO_u8_PC1_INTIAL_DIRECTION,DIO_u8_PC0_INTIAL_DIRECTION);

	 DDRD_REGISTER = Conc(DIO_u8_PD7_INTIAL_DIRECTION,DIO_u8_PD6_INTIAL_DIRECTION,DIO_u8_PD5_INTIAL_DIRECTION,DIO_u8_PD4_INTIAL_DIRECTION,
     e4c:	e1 e3       	ldi	r30, 0x31	; 49
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	81 e8       	ldi	r24, 0x81	; 129
     e52:	80 83       	st	Z, r24
						   DIO_u8_PD3_INTIAL_DIRECTION,DIO_u8_PD2_INTIAL_DIRECTION,DIO_u8_PD1_INTIAL_DIRECTION,DIO_u8_PD0_INTIAL_DIRECTION);

	 PORTA_REGISTER = Conc(DIO_u8_PA7_INTIAL_VALUE,DIO_u8_PA6_INTIAL_VALUE,DIO_u8_PA5_INTIAL_VALUE,DIO_u8_PA4_INTIAL_VALUE,
     e54:	eb e3       	ldi	r30, 0x3B	; 59
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	10 82       	st	Z, r1
						   DIO_u8_PA3_INTIAL_VALUE,DIO_u8_PA2_INTIAL_VALUE,DIO_u8_PA1_INTIAL_VALUE,DIO_u8_PA0_INTIAL_VALUE);

	 PORTB_REGISTER = Conc(DIO_u8_PB7_INTIAL_VALUE,DIO_u8_PB6_INTIAL_VALUE,DIO_u8_PB5_INTIAL_VALUE,DIO_u8_PB4_INTIAL_VALUE,
     e5a:	e8 e3       	ldi	r30, 0x38	; 56
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	10 82       	st	Z, r1
						   DIO_u8_PB3_INTIAL_VALUE,DIO_u8_PB2_INTIAL_VALUE,DIO_u8_PB1_INTIAL_VALUE,DIO_u8_PB0_INTIAL_VALUE);

	 PORTC_REGISTER = Conc(DIO_u8_PC7_INTIAL_VALUE,DIO_u8_PC6_INTIAL_VALUE,DIO_u8_PC5_INTIAL_VALUE,DIO_u8_PC4_INTIAL_VALUE,
     e60:	e5 e3       	ldi	r30, 0x35	; 53
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	10 82       	st	Z, r1
						   DIO_u8_PC3_INTIAL_VALUE,DIO_u8_PC2_INTIAL_VALUE,DIO_u8_PC1_INTIAL_VALUE,DIO_u8_PC0_INTIAL_VALUE);

	 PORTD_REGISTER = Conc(DIO_u8_PD7_INTIAL_VALUE,DIO_u8_PD6_INTIAL_VALUE,DIO_u8_PD5_INTIAL_VALUE,DIO_u8_PD4_INTIAL_VALUE,
     e66:	e2 e3       	ldi	r30, 0x32	; 50
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	10 82       	st	Z, r1
						   DIO_u8_PD3_INTIAL_VALUE,DIO_u8_PD2_INTIAL_VALUE,DIO_u8_PD1_INTIAL_VALUE,DIO_u8_PD0_INTIAL_VALUE);
}
     e6c:	cf 91       	pop	r28
     e6e:	df 91       	pop	r29
     e70:	08 95       	ret

00000e72 <DIO_u8SetPinDirection>:
 
 u8  DIO_u8SetPinDirection(u8 COPY_u8PortId , u8 COPY_u8PinId ,u8 COPY_u8Direction)
 {
     e72:	df 93       	push	r29
     e74:	cf 93       	push	r28
     e76:	00 d0       	rcall	.+0      	; 0xe78 <DIO_u8SetPinDirection+0x6>
     e78:	00 d0       	rcall	.+0      	; 0xe7a <DIO_u8SetPinDirection+0x8>
     e7a:	00 d0       	rcall	.+0      	; 0xe7c <DIO_u8SetPinDirection+0xa>
     e7c:	cd b7       	in	r28, 0x3d	; 61
     e7e:	de b7       	in	r29, 0x3e	; 62
     e80:	8a 83       	std	Y+2, r24	; 0x02
     e82:	6b 83       	std	Y+3, r22	; 0x03
     e84:	4c 83       	std	Y+4, r20	; 0x04
	 u8 Local_u8ErrorState = STD_TYPES_OK ;    // flage 
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	89 83       	std	Y+1, r24	; 0x01
	  
	if( (COPY_u8PortId <= PORTD)   && ( COPY_u8PinId <=PIN_7 ) &&  ((COPY_u8Direction == INPUT) ||(COPY_u8Direction == OUTPUT) ) ) {   //  ظˆط¯ظٹ   ط¹ظ…ط±ظ‡ط§ ظ…ط§ ظ‡طھط¬ظٹط¨ ط±ظ‚ظ…ط³ط§ظ„ط¨u8ظ…ط³طھط­ظٹظ„ ط±ظ‚ظ… ط§ظ„ط¨ظˆط±طھ ظٹط¨ظ‚ظٹ ط§ظ‚ظ„ ظ…ظ† طµظپط± ظ„ط§ظ† ط§ظ„ظ†ظˆط¹ ط¨طھط§ط¹ظ‡  
     e8a:	8a 81       	ldd	r24, Y+2	; 0x02
     e8c:	85 30       	cpi	r24, 0x05	; 5
     e8e:	08 f0       	brcs	.+2      	; 0xe92 <DIO_u8SetPinDirection+0x20>
     e90:	ed c0       	rjmp	.+474    	; 0x106c <DIO_u8SetPinDirection+0x1fa>
     e92:	8b 81       	ldd	r24, Y+3	; 0x03
     e94:	88 30       	cpi	r24, 0x08	; 8
     e96:	08 f0       	brcs	.+2      	; 0xe9a <DIO_u8SetPinDirection+0x28>
     e98:	e9 c0       	rjmp	.+466    	; 0x106c <DIO_u8SetPinDirection+0x1fa>
     e9a:	8c 81       	ldd	r24, Y+4	; 0x04
     e9c:	88 23       	and	r24, r24
     e9e:	21 f0       	breq	.+8      	; 0xea8 <DIO_u8SetPinDirection+0x36>
     ea0:	8c 81       	ldd	r24, Y+4	; 0x04
     ea2:	81 30       	cpi	r24, 0x01	; 1
     ea4:	09 f0       	breq	.+2      	; 0xea8 <DIO_u8SetPinDirection+0x36>
     ea6:	e2 c0       	rjmp	.+452    	; 0x106c <DIO_u8SetPinDirection+0x1fa>
	 switch(COPY_u8PortId ){
     ea8:	8a 81       	ldd	r24, Y+2	; 0x02
     eaa:	28 2f       	mov	r18, r24
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	3e 83       	std	Y+6, r19	; 0x06
     eb0:	2d 83       	std	Y+5, r18	; 0x05
     eb2:	8d 81       	ldd	r24, Y+5	; 0x05
     eb4:	9e 81       	ldd	r25, Y+6	; 0x06
     eb6:	82 30       	cpi	r24, 0x02	; 2
     eb8:	91 05       	cpc	r25, r1
     eba:	09 f4       	brne	.+2      	; 0xebe <DIO_u8SetPinDirection+0x4c>
     ebc:	48 c0       	rjmp	.+144    	; 0xf4e <DIO_u8SetPinDirection+0xdc>
     ebe:	2d 81       	ldd	r18, Y+5	; 0x05
     ec0:	3e 81       	ldd	r19, Y+6	; 0x06
     ec2:	23 30       	cpi	r18, 0x03	; 3
     ec4:	31 05       	cpc	r19, r1
     ec6:	34 f4       	brge	.+12     	; 0xed4 <DIO_u8SetPinDirection+0x62>
     ec8:	8d 81       	ldd	r24, Y+5	; 0x05
     eca:	9e 81       	ldd	r25, Y+6	; 0x06
     ecc:	81 30       	cpi	r24, 0x01	; 1
     ece:	91 05       	cpc	r25, r1
     ed0:	71 f0       	breq	.+28     	; 0xeee <DIO_u8SetPinDirection+0x7c>
     ed2:	cd c0       	rjmp	.+410    	; 0x106e <DIO_u8SetPinDirection+0x1fc>
     ed4:	2d 81       	ldd	r18, Y+5	; 0x05
     ed6:	3e 81       	ldd	r19, Y+6	; 0x06
     ed8:	23 30       	cpi	r18, 0x03	; 3
     eda:	31 05       	cpc	r19, r1
     edc:	09 f4       	brne	.+2      	; 0xee0 <DIO_u8SetPinDirection+0x6e>
     ede:	67 c0       	rjmp	.+206    	; 0xfae <DIO_u8SetPinDirection+0x13c>
     ee0:	8d 81       	ldd	r24, Y+5	; 0x05
     ee2:	9e 81       	ldd	r25, Y+6	; 0x06
     ee4:	84 30       	cpi	r24, 0x04	; 4
     ee6:	91 05       	cpc	r25, r1
     ee8:	09 f4       	brne	.+2      	; 0xeec <DIO_u8SetPinDirection+0x7a>
     eea:	91 c0       	rjmp	.+290    	; 0x100e <DIO_u8SetPinDirection+0x19c>
     eec:	c0 c0       	rjmp	.+384    	; 0x106e <DIO_u8SetPinDirection+0x1fc>

	case PORTA :
		if(COPY_u8Direction == INPUT){
     eee:	8c 81       	ldd	r24, Y+4	; 0x04
     ef0:	88 23       	and	r24, r24
     ef2:	a9 f4       	brne	.+42     	; 0xf1e <DIO_u8SetPinDirection+0xac>
			CLR_BIT(DDRA_REGISTER ,COPY_u8PinId );
     ef4:	aa e3       	ldi	r26, 0x3A	; 58
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	ea e3       	ldi	r30, 0x3A	; 58
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	48 2f       	mov	r20, r24
     f00:	8b 81       	ldd	r24, Y+3	; 0x03
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	02 2e       	mov	r0, r18
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <DIO_u8SetPinDirection+0xa0>
     f0e:	88 0f       	add	r24, r24
     f10:	99 1f       	adc	r25, r25
     f12:	0a 94       	dec	r0
     f14:	e2 f7       	brpl	.-8      	; 0xf0e <DIO_u8SetPinDirection+0x9c>
     f16:	80 95       	com	r24
     f18:	84 23       	and	r24, r20
     f1a:	8c 93       	st	X, r24
     f1c:	a8 c0       	rjmp	.+336    	; 0x106e <DIO_u8SetPinDirection+0x1fc>
		}
		else if(COPY_u8Direction == OUTPUT){
     f1e:	8c 81       	ldd	r24, Y+4	; 0x04
     f20:	81 30       	cpi	r24, 0x01	; 1
     f22:	09 f0       	breq	.+2      	; 0xf26 <DIO_u8SetPinDirection+0xb4>
     f24:	a4 c0       	rjmp	.+328    	; 0x106e <DIO_u8SetPinDirection+0x1fc>
			SET_BIT(DDRA_REGISTER ,COPY_u8PinId );
     f26:	aa e3       	ldi	r26, 0x3A	; 58
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	ea e3       	ldi	r30, 0x3A	; 58
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	48 2f       	mov	r20, r24
     f32:	8b 81       	ldd	r24, Y+3	; 0x03
     f34:	28 2f       	mov	r18, r24
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	02 2e       	mov	r0, r18
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <DIO_u8SetPinDirection+0xd2>
     f40:	88 0f       	add	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	0a 94       	dec	r0
     f46:	e2 f7       	brpl	.-8      	; 0xf40 <DIO_u8SetPinDirection+0xce>
     f48:	84 2b       	or	r24, r20
     f4a:	8c 93       	st	X, r24
     f4c:	90 c0       	rjmp	.+288    	; 0x106e <DIO_u8SetPinDirection+0x1fc>
		}
	 break ;

	case PORTB :
		if(COPY_u8Direction == INPUT){
     f4e:	8c 81       	ldd	r24, Y+4	; 0x04
     f50:	88 23       	and	r24, r24
     f52:	a9 f4       	brne	.+42     	; 0xf7e <DIO_u8SetPinDirection+0x10c>
				CLR_BIT(DDRB_REGISTER ,COPY_u8PinId);
     f54:	a7 e3       	ldi	r26, 0x37	; 55
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	e7 e3       	ldi	r30, 0x37	; 55
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	48 2f       	mov	r20, r24
     f60:	8b 81       	ldd	r24, Y+3	; 0x03
     f62:	28 2f       	mov	r18, r24
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	02 2e       	mov	r0, r18
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <DIO_u8SetPinDirection+0x100>
     f6e:	88 0f       	add	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	0a 94       	dec	r0
     f74:	e2 f7       	brpl	.-8      	; 0xf6e <DIO_u8SetPinDirection+0xfc>
     f76:	80 95       	com	r24
     f78:	84 23       	and	r24, r20
     f7a:	8c 93       	st	X, r24
     f7c:	78 c0       	rjmp	.+240    	; 0x106e <DIO_u8SetPinDirection+0x1fc>
			}
			else if(COPY_u8Direction == OUTPUT){
     f7e:	8c 81       	ldd	r24, Y+4	; 0x04
     f80:	81 30       	cpi	r24, 0x01	; 1
     f82:	09 f0       	breq	.+2      	; 0xf86 <DIO_u8SetPinDirection+0x114>
     f84:	74 c0       	rjmp	.+232    	; 0x106e <DIO_u8SetPinDirection+0x1fc>
				SET_BIT(DDRB_REGISTER ,COPY_u8PinId );
     f86:	a7 e3       	ldi	r26, 0x37	; 55
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e7 e3       	ldi	r30, 0x37	; 55
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	48 2f       	mov	r20, r24
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	28 2f       	mov	r18, r24
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	02 2e       	mov	r0, r18
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <DIO_u8SetPinDirection+0x132>
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	0a 94       	dec	r0
     fa6:	e2 f7       	brpl	.-8      	; 0xfa0 <DIO_u8SetPinDirection+0x12e>
     fa8:	84 2b       	or	r24, r20
     faa:	8c 93       	st	X, r24
     fac:	60 c0       	rjmp	.+192    	; 0x106e <DIO_u8SetPinDirection+0x1fc>

		 break ;

	case PORTC :

		if(COPY_u8Direction == INPUT){
     fae:	8c 81       	ldd	r24, Y+4	; 0x04
     fb0:	88 23       	and	r24, r24
     fb2:	a9 f4       	brne	.+42     	; 0xfde <DIO_u8SetPinDirection+0x16c>
				CLR_BIT(DDRC_REGISTER ,COPY_u8PinId);
     fb4:	a4 e3       	ldi	r26, 0x34	; 52
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e4 e3       	ldi	r30, 0x34	; 52
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	48 2f       	mov	r20, r24
     fc0:	8b 81       	ldd	r24, Y+3	; 0x03
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	02 2e       	mov	r0, r18
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <DIO_u8SetPinDirection+0x160>
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	0a 94       	dec	r0
     fd4:	e2 f7       	brpl	.-8      	; 0xfce <DIO_u8SetPinDirection+0x15c>
     fd6:	80 95       	com	r24
     fd8:	84 23       	and	r24, r20
     fda:	8c 93       	st	X, r24
     fdc:	48 c0       	rjmp	.+144    	; 0x106e <DIO_u8SetPinDirection+0x1fc>
			}
			else if(COPY_u8Direction == OUTPUT){
     fde:	8c 81       	ldd	r24, Y+4	; 0x04
     fe0:	81 30       	cpi	r24, 0x01	; 1
     fe2:	09 f0       	breq	.+2      	; 0xfe6 <DIO_u8SetPinDirection+0x174>
     fe4:	44 c0       	rjmp	.+136    	; 0x106e <DIO_u8SetPinDirection+0x1fc>
				SET_BIT(DDRC_REGISTER ,COPY_u8PinId );
     fe6:	a4 e3       	ldi	r26, 0x34	; 52
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	e4 e3       	ldi	r30, 0x34	; 52
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	48 2f       	mov	r20, r24
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	02 2e       	mov	r0, r18
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <DIO_u8SetPinDirection+0x192>
    1000:	88 0f       	add	r24, r24
    1002:	99 1f       	adc	r25, r25
    1004:	0a 94       	dec	r0
    1006:	e2 f7       	brpl	.-8      	; 0x1000 <DIO_u8SetPinDirection+0x18e>
    1008:	84 2b       	or	r24, r20
    100a:	8c 93       	st	X, r24
    100c:	30 c0       	rjmp	.+96     	; 0x106e <DIO_u8SetPinDirection+0x1fc>

			break ;

	case PORTD :

		if(COPY_u8Direction == INPUT){
    100e:	8c 81       	ldd	r24, Y+4	; 0x04
    1010:	88 23       	and	r24, r24
    1012:	a9 f4       	brne	.+42     	; 0x103e <DIO_u8SetPinDirection+0x1cc>
				CLR_BIT(DDRD_REGISTER ,COPY_u8PinId );
    1014:	a1 e3       	ldi	r26, 0x31	; 49
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	e1 e3       	ldi	r30, 0x31	; 49
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	48 2f       	mov	r20, r24
    1020:	8b 81       	ldd	r24, Y+3	; 0x03
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	02 2e       	mov	r0, r18
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <DIO_u8SetPinDirection+0x1c0>
    102e:	88 0f       	add	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	0a 94       	dec	r0
    1034:	e2 f7       	brpl	.-8      	; 0x102e <DIO_u8SetPinDirection+0x1bc>
    1036:	80 95       	com	r24
    1038:	84 23       	and	r24, r20
    103a:	8c 93       	st	X, r24
    103c:	18 c0       	rjmp	.+48     	; 0x106e <DIO_u8SetPinDirection+0x1fc>
			}
			else if(COPY_u8Direction == OUTPUT){
    103e:	8c 81       	ldd	r24, Y+4	; 0x04
    1040:	81 30       	cpi	r24, 0x01	; 1
    1042:	a9 f4       	brne	.+42     	; 0x106e <DIO_u8SetPinDirection+0x1fc>
				SET_BIT(DDRD_REGISTER ,COPY_u8PinId );
    1044:	a1 e3       	ldi	r26, 0x31	; 49
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	e1 e3       	ldi	r30, 0x31	; 49
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	48 2f       	mov	r20, r24
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	28 2f       	mov	r18, r24
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	02 2e       	mov	r0, r18
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <DIO_u8SetPinDirection+0x1f0>
    105e:	88 0f       	add	r24, r24
    1060:	99 1f       	adc	r25, r25
    1062:	0a 94       	dec	r0
    1064:	e2 f7       	brpl	.-8      	; 0x105e <DIO_u8SetPinDirection+0x1ec>
    1066:	84 2b       	or	r24, r20
    1068:	8c 93       	st	X, r24
    106a:	01 c0       	rjmp	.+2      	; 0x106e <DIO_u8SetPinDirection+0x1fc>
	}}
	
	
	else{ 
		
		Local_u8ErrorState =STD_TYPES_NOK;
    106c:	19 82       	std	Y+1, r1	; 0x01
	}

return   Local_u8ErrorState ;
    106e:	89 81       	ldd	r24, Y+1	; 0x01
	 
 } 
    1070:	26 96       	adiw	r28, 0x06	; 6
    1072:	0f b6       	in	r0, 0x3f	; 63
    1074:	f8 94       	cli
    1076:	de bf       	out	0x3e, r29	; 62
    1078:	0f be       	out	0x3f, r0	; 63
    107a:	cd bf       	out	0x3d, r28	; 61
    107c:	cf 91       	pop	r28
    107e:	df 91       	pop	r29
    1080:	08 95       	ret

00001082 <DIO_u8SetPinValue>:
 u8  DIO_u8SetPinValue(u8 COPY_u8PortId , u8 COPY_u8PinId ,u8 COPY_u8Value){
    1082:	df 93       	push	r29
    1084:	cf 93       	push	r28
    1086:	00 d0       	rcall	.+0      	; 0x1088 <DIO_u8SetPinValue+0x6>
    1088:	00 d0       	rcall	.+0      	; 0x108a <DIO_u8SetPinValue+0x8>
    108a:	00 d0       	rcall	.+0      	; 0x108c <DIO_u8SetPinValue+0xa>
    108c:	cd b7       	in	r28, 0x3d	; 61
    108e:	de b7       	in	r29, 0x3e	; 62
    1090:	8a 83       	std	Y+2, r24	; 0x02
    1092:	6b 83       	std	Y+3, r22	; 0x03
    1094:	4c 83       	std	Y+4, r20	; 0x04
	  u8 Local_u8ErrorState = STD_TYPES_OK ;    // flage 
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	89 83       	std	Y+1, r24	; 0x01
	  
	if( (COPY_u8PortId <= PORTD)   && ( COPY_u8PinId <=PIN_7 ) &&  ((COPY_u8Value == LOGIC_LOW) ||(COPY_u8Value == LOGIC_HIGH) ) ) {   //  ظˆط¯ظٹ   ط¹ظ…ط±ظ‡ط§ ظ…ط§ ظ‡طھط¬ظٹط¨ ط±ظ‚ظ…ط³ط§ظ„ط¨u8ظ…ط³طھط­ظٹظ„ ط±ظ‚ظ… ط§ظ„ط¨ظˆط±طھ ظٹط¨ظ‚ظٹ ط§ظ‚ظ„ ظ…ظ† طµظپط± ظ„ط§ظ† ط§ظ„ظ†ظˆط¹ ط¨طھط§ط¹ظ‡  
    109a:	8a 81       	ldd	r24, Y+2	; 0x02
    109c:	85 30       	cpi	r24, 0x05	; 5
    109e:	08 f0       	brcs	.+2      	; 0x10a2 <DIO_u8SetPinValue+0x20>
    10a0:	ed c0       	rjmp	.+474    	; 0x127c <DIO_u8SetPinValue+0x1fa>
    10a2:	8b 81       	ldd	r24, Y+3	; 0x03
    10a4:	88 30       	cpi	r24, 0x08	; 8
    10a6:	08 f0       	brcs	.+2      	; 0x10aa <DIO_u8SetPinValue+0x28>
    10a8:	e9 c0       	rjmp	.+466    	; 0x127c <DIO_u8SetPinValue+0x1fa>
    10aa:	8c 81       	ldd	r24, Y+4	; 0x04
    10ac:	88 23       	and	r24, r24
    10ae:	21 f0       	breq	.+8      	; 0x10b8 <DIO_u8SetPinValue+0x36>
    10b0:	8c 81       	ldd	r24, Y+4	; 0x04
    10b2:	81 30       	cpi	r24, 0x01	; 1
    10b4:	09 f0       	breq	.+2      	; 0x10b8 <DIO_u8SetPinValue+0x36>
    10b6:	e2 c0       	rjmp	.+452    	; 0x127c <DIO_u8SetPinValue+0x1fa>
	 switch(COPY_u8PortId ){
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	28 2f       	mov	r18, r24
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	3e 83       	std	Y+6, r19	; 0x06
    10c0:	2d 83       	std	Y+5, r18	; 0x05
    10c2:	8d 81       	ldd	r24, Y+5	; 0x05
    10c4:	9e 81       	ldd	r25, Y+6	; 0x06
    10c6:	82 30       	cpi	r24, 0x02	; 2
    10c8:	91 05       	cpc	r25, r1
    10ca:	09 f4       	brne	.+2      	; 0x10ce <DIO_u8SetPinValue+0x4c>
    10cc:	48 c0       	rjmp	.+144    	; 0x115e <DIO_u8SetPinValue+0xdc>
    10ce:	2d 81       	ldd	r18, Y+5	; 0x05
    10d0:	3e 81       	ldd	r19, Y+6	; 0x06
    10d2:	23 30       	cpi	r18, 0x03	; 3
    10d4:	31 05       	cpc	r19, r1
    10d6:	34 f4       	brge	.+12     	; 0x10e4 <DIO_u8SetPinValue+0x62>
    10d8:	8d 81       	ldd	r24, Y+5	; 0x05
    10da:	9e 81       	ldd	r25, Y+6	; 0x06
    10dc:	81 30       	cpi	r24, 0x01	; 1
    10de:	91 05       	cpc	r25, r1
    10e0:	71 f0       	breq	.+28     	; 0x10fe <DIO_u8SetPinValue+0x7c>
    10e2:	cd c0       	rjmp	.+410    	; 0x127e <DIO_u8SetPinValue+0x1fc>
    10e4:	2d 81       	ldd	r18, Y+5	; 0x05
    10e6:	3e 81       	ldd	r19, Y+6	; 0x06
    10e8:	23 30       	cpi	r18, 0x03	; 3
    10ea:	31 05       	cpc	r19, r1
    10ec:	09 f4       	brne	.+2      	; 0x10f0 <DIO_u8SetPinValue+0x6e>
    10ee:	67 c0       	rjmp	.+206    	; 0x11be <DIO_u8SetPinValue+0x13c>
    10f0:	8d 81       	ldd	r24, Y+5	; 0x05
    10f2:	9e 81       	ldd	r25, Y+6	; 0x06
    10f4:	84 30       	cpi	r24, 0x04	; 4
    10f6:	91 05       	cpc	r25, r1
    10f8:	09 f4       	brne	.+2      	; 0x10fc <DIO_u8SetPinValue+0x7a>
    10fa:	91 c0       	rjmp	.+290    	; 0x121e <DIO_u8SetPinValue+0x19c>
    10fc:	c0 c0       	rjmp	.+384    	; 0x127e <DIO_u8SetPinValue+0x1fc>

	case PORTA :
		if(COPY_u8Value == LOGIC_LOW){
    10fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1100:	88 23       	and	r24, r24
    1102:	a9 f4       	brne	.+42     	; 0x112e <DIO_u8SetPinValue+0xac>
			CLR_BIT(PORTA_REGISTER ,COPY_u8PinId );
    1104:	ab e3       	ldi	r26, 0x3B	; 59
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	eb e3       	ldi	r30, 0x3B	; 59
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	48 2f       	mov	r20, r24
    1110:	8b 81       	ldd	r24, Y+3	; 0x03
    1112:	28 2f       	mov	r18, r24
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	02 2e       	mov	r0, r18
    111c:	02 c0       	rjmp	.+4      	; 0x1122 <DIO_u8SetPinValue+0xa0>
    111e:	88 0f       	add	r24, r24
    1120:	99 1f       	adc	r25, r25
    1122:	0a 94       	dec	r0
    1124:	e2 f7       	brpl	.-8      	; 0x111e <DIO_u8SetPinValue+0x9c>
    1126:	80 95       	com	r24
    1128:	84 23       	and	r24, r20
    112a:	8c 93       	st	X, r24
    112c:	a8 c0       	rjmp	.+336    	; 0x127e <DIO_u8SetPinValue+0x1fc>
		}
		else if(COPY_u8Value == LOGIC_HIGH){
    112e:	8c 81       	ldd	r24, Y+4	; 0x04
    1130:	81 30       	cpi	r24, 0x01	; 1
    1132:	09 f0       	breq	.+2      	; 0x1136 <DIO_u8SetPinValue+0xb4>
    1134:	a4 c0       	rjmp	.+328    	; 0x127e <DIO_u8SetPinValue+0x1fc>
			SET_BIT(PORTA_REGISTER ,COPY_u8PinId );
    1136:	ab e3       	ldi	r26, 0x3B	; 59
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	eb e3       	ldi	r30, 0x3B	; 59
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	48 2f       	mov	r20, r24
    1142:	8b 81       	ldd	r24, Y+3	; 0x03
    1144:	28 2f       	mov	r18, r24
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	02 2e       	mov	r0, r18
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <DIO_u8SetPinValue+0xd2>
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	0a 94       	dec	r0
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <DIO_u8SetPinValue+0xce>
    1158:	84 2b       	or	r24, r20
    115a:	8c 93       	st	X, r24
    115c:	90 c0       	rjmp	.+288    	; 0x127e <DIO_u8SetPinValue+0x1fc>
		}
	 break ;

	case PORTB :
		if(COPY_u8Value == LOGIC_LOW){
    115e:	8c 81       	ldd	r24, Y+4	; 0x04
    1160:	88 23       	and	r24, r24
    1162:	a9 f4       	brne	.+42     	; 0x118e <DIO_u8SetPinValue+0x10c>
				CLR_BIT(PORTB_REGISTER ,COPY_u8PinId);
    1164:	a8 e3       	ldi	r26, 0x38	; 56
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e8 e3       	ldi	r30, 0x38	; 56
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	48 2f       	mov	r20, r24
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	02 2e       	mov	r0, r18
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <DIO_u8SetPinValue+0x100>
    117e:	88 0f       	add	r24, r24
    1180:	99 1f       	adc	r25, r25
    1182:	0a 94       	dec	r0
    1184:	e2 f7       	brpl	.-8      	; 0x117e <DIO_u8SetPinValue+0xfc>
    1186:	80 95       	com	r24
    1188:	84 23       	and	r24, r20
    118a:	8c 93       	st	X, r24
    118c:	78 c0       	rjmp	.+240    	; 0x127e <DIO_u8SetPinValue+0x1fc>
			}
			else if(COPY_u8Value == LOGIC_HIGH){
    118e:	8c 81       	ldd	r24, Y+4	; 0x04
    1190:	81 30       	cpi	r24, 0x01	; 1
    1192:	09 f0       	breq	.+2      	; 0x1196 <DIO_u8SetPinValue+0x114>
    1194:	74 c0       	rjmp	.+232    	; 0x127e <DIO_u8SetPinValue+0x1fc>
				SET_BIT(PORTB_REGISTER  ,COPY_u8PinId );
    1196:	a8 e3       	ldi	r26, 0x38	; 56
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	e8 e3       	ldi	r30, 0x38	; 56
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	48 2f       	mov	r20, r24
    11a2:	8b 81       	ldd	r24, Y+3	; 0x03
    11a4:	28 2f       	mov	r18, r24
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	02 2e       	mov	r0, r18
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <DIO_u8SetPinValue+0x132>
    11b0:	88 0f       	add	r24, r24
    11b2:	99 1f       	adc	r25, r25
    11b4:	0a 94       	dec	r0
    11b6:	e2 f7       	brpl	.-8      	; 0x11b0 <DIO_u8SetPinValue+0x12e>
    11b8:	84 2b       	or	r24, r20
    11ba:	8c 93       	st	X, r24
    11bc:	60 c0       	rjmp	.+192    	; 0x127e <DIO_u8SetPinValue+0x1fc>

		 break ;

	case PORTC :

		if(COPY_u8Value == LOGIC_LOW){
    11be:	8c 81       	ldd	r24, Y+4	; 0x04
    11c0:	88 23       	and	r24, r24
    11c2:	a9 f4       	brne	.+42     	; 0x11ee <DIO_u8SetPinValue+0x16c>
				CLR_BIT(PORTC_REGISTER  ,COPY_u8PinId);
    11c4:	a5 e3       	ldi	r26, 0x35	; 53
    11c6:	b0 e0       	ldi	r27, 0x00	; 0
    11c8:	e5 e3       	ldi	r30, 0x35	; 53
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	48 2f       	mov	r20, r24
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	28 2f       	mov	r18, r24
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	02 2e       	mov	r0, r18
    11dc:	02 c0       	rjmp	.+4      	; 0x11e2 <DIO_u8SetPinValue+0x160>
    11de:	88 0f       	add	r24, r24
    11e0:	99 1f       	adc	r25, r25
    11e2:	0a 94       	dec	r0
    11e4:	e2 f7       	brpl	.-8      	; 0x11de <DIO_u8SetPinValue+0x15c>
    11e6:	80 95       	com	r24
    11e8:	84 23       	and	r24, r20
    11ea:	8c 93       	st	X, r24
    11ec:	48 c0       	rjmp	.+144    	; 0x127e <DIO_u8SetPinValue+0x1fc>
			}
			else if(COPY_u8Value == LOGIC_HIGH){
    11ee:	8c 81       	ldd	r24, Y+4	; 0x04
    11f0:	81 30       	cpi	r24, 0x01	; 1
    11f2:	09 f0       	breq	.+2      	; 0x11f6 <DIO_u8SetPinValue+0x174>
    11f4:	44 c0       	rjmp	.+136    	; 0x127e <DIO_u8SetPinValue+0x1fc>
				SET_BIT(PORTC_REGISTER  ,COPY_u8PinId );
    11f6:	a5 e3       	ldi	r26, 0x35	; 53
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	e5 e3       	ldi	r30, 0x35	; 53
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	48 2f       	mov	r20, r24
    1202:	8b 81       	ldd	r24, Y+3	; 0x03
    1204:	28 2f       	mov	r18, r24
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	02 2e       	mov	r0, r18
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <DIO_u8SetPinValue+0x192>
    1210:	88 0f       	add	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	0a 94       	dec	r0
    1216:	e2 f7       	brpl	.-8      	; 0x1210 <DIO_u8SetPinValue+0x18e>
    1218:	84 2b       	or	r24, r20
    121a:	8c 93       	st	X, r24
    121c:	30 c0       	rjmp	.+96     	; 0x127e <DIO_u8SetPinValue+0x1fc>

			break ;

	case PORTD :

		if(COPY_u8Value == LOGIC_LOW){
    121e:	8c 81       	ldd	r24, Y+4	; 0x04
    1220:	88 23       	and	r24, r24
    1222:	a9 f4       	brne	.+42     	; 0x124e <DIO_u8SetPinValue+0x1cc>
				CLR_BIT(PORTD_REGISTER  ,COPY_u8PinId );
    1224:	a2 e3       	ldi	r26, 0x32	; 50
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	e2 e3       	ldi	r30, 0x32	; 50
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	48 2f       	mov	r20, r24
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	28 2f       	mov	r18, r24
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	02 2e       	mov	r0, r18
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <DIO_u8SetPinValue+0x1c0>
    123e:	88 0f       	add	r24, r24
    1240:	99 1f       	adc	r25, r25
    1242:	0a 94       	dec	r0
    1244:	e2 f7       	brpl	.-8      	; 0x123e <DIO_u8SetPinValue+0x1bc>
    1246:	80 95       	com	r24
    1248:	84 23       	and	r24, r20
    124a:	8c 93       	st	X, r24
    124c:	18 c0       	rjmp	.+48     	; 0x127e <DIO_u8SetPinValue+0x1fc>
			}
			else if(COPY_u8Value == LOGIC_HIGH){
    124e:	8c 81       	ldd	r24, Y+4	; 0x04
    1250:	81 30       	cpi	r24, 0x01	; 1
    1252:	a9 f4       	brne	.+42     	; 0x127e <DIO_u8SetPinValue+0x1fc>
				SET_BIT(PORTD_REGISTER  ,COPY_u8PinId );
    1254:	a2 e3       	ldi	r26, 0x32	; 50
    1256:	b0 e0       	ldi	r27, 0x00	; 0
    1258:	e2 e3       	ldi	r30, 0x32	; 50
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	48 2f       	mov	r20, r24
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	28 2f       	mov	r18, r24
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	02 2e       	mov	r0, r18
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <DIO_u8SetPinValue+0x1f0>
    126e:	88 0f       	add	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	0a 94       	dec	r0
    1274:	e2 f7       	brpl	.-8      	; 0x126e <DIO_u8SetPinValue+0x1ec>
    1276:	84 2b       	or	r24, r20
    1278:	8c 93       	st	X, r24
    127a:	01 c0       	rjmp	.+2      	; 0x127e <DIO_u8SetPinValue+0x1fc>
	}}
	
	
	else{ 
		
		Local_u8ErrorState =STD_TYPES_NOK;
    127c:	19 82       	std	Y+1, r1	; 0x01
	}

return   Local_u8ErrorState ;
    127e:	89 81       	ldd	r24, Y+1	; 0x01
	 
	 
 }   
    1280:	26 96       	adiw	r28, 0x06	; 6
    1282:	0f b6       	in	r0, 0x3f	; 63
    1284:	f8 94       	cli
    1286:	de bf       	out	0x3e, r29	; 62
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	cd bf       	out	0x3d, r28	; 61
    128c:	cf 91       	pop	r28
    128e:	df 91       	pop	r29
    1290:	08 95       	ret

00001292 <DIO_u8GetPinValue>:
 
 u8  DIO_u8GetPinValue(u8 COPY_u8PortId , u8 COPY_u8PinId ,u8 *COPY_Pu8PinValue) {
    1292:	df 93       	push	r29
    1294:	cf 93       	push	r28
    1296:	cd b7       	in	r28, 0x3d	; 61
    1298:	de b7       	in	r29, 0x3e	; 62
    129a:	28 97       	sbiw	r28, 0x08	; 8
    129c:	0f b6       	in	r0, 0x3f	; 63
    129e:	f8 94       	cli
    12a0:	de bf       	out	0x3e, r29	; 62
    12a2:	0f be       	out	0x3f, r0	; 63
    12a4:	cd bf       	out	0x3d, r28	; 61
    12a6:	8b 83       	std	Y+3, r24	; 0x03
    12a8:	6c 83       	std	Y+4, r22	; 0x04
    12aa:	5e 83       	std	Y+6, r21	; 0x06
    12ac:	4d 83       	std	Y+5, r20	; 0x05
 u8 Local_u8ErrorState = STD_TYPES_OK ; 	 
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	8a 83       	std	Y+2, r24	; 0x02
 u8 Local_u8PinValue ;  // to ensure that the fuction get_BIT_value will return 0 or 1  if true we will store the value in pointer 
if( (COPY_u8PortId <= PORTD)   && ( COPY_u8PinId <=PIN_7 )  && (COPY_Pu8PinValue != NULL  ) ) { // ptr >> is a variable in main to store the state of pin on it
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	85 30       	cpi	r24, 0x05	; 5
    12b6:	08 f0       	brcs	.+2      	; 0x12ba <DIO_u8GetPinValue+0x28>
    12b8:	ad c0       	rjmp	.+346    	; 0x1414 <DIO_u8GetPinValue+0x182>
    12ba:	8c 81       	ldd	r24, Y+4	; 0x04
    12bc:	88 30       	cpi	r24, 0x08	; 8
    12be:	08 f0       	brcs	.+2      	; 0x12c2 <DIO_u8GetPinValue+0x30>
    12c0:	a9 c0       	rjmp	.+338    	; 0x1414 <DIO_u8GetPinValue+0x182>
    12c2:	8d 81       	ldd	r24, Y+5	; 0x05
    12c4:	9e 81       	ldd	r25, Y+6	; 0x06
    12c6:	00 97       	sbiw	r24, 0x00	; 0
    12c8:	09 f4       	brne	.+2      	; 0x12cc <DIO_u8GetPinValue+0x3a>
    12ca:	a4 c0       	rjmp	.+328    	; 0x1414 <DIO_u8GetPinValue+0x182>

	 switch(COPY_u8PortId ){
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	28 2f       	mov	r18, r24
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	38 87       	std	Y+8, r19	; 0x08
    12d4:	2f 83       	std	Y+7, r18	; 0x07
    12d6:	4f 81       	ldd	r20, Y+7	; 0x07
    12d8:	58 85       	ldd	r21, Y+8	; 0x08
    12da:	42 30       	cpi	r20, 0x02	; 2
    12dc:	51 05       	cpc	r21, r1
    12de:	c9 f1       	breq	.+114    	; 0x1352 <DIO_u8GetPinValue+0xc0>
    12e0:	8f 81       	ldd	r24, Y+7	; 0x07
    12e2:	98 85       	ldd	r25, Y+8	; 0x08
    12e4:	83 30       	cpi	r24, 0x03	; 3
    12e6:	91 05       	cpc	r25, r1
    12e8:	34 f4       	brge	.+12     	; 0x12f6 <DIO_u8GetPinValue+0x64>
    12ea:	2f 81       	ldd	r18, Y+7	; 0x07
    12ec:	38 85       	ldd	r19, Y+8	; 0x08
    12ee:	21 30       	cpi	r18, 0x01	; 1
    12f0:	31 05       	cpc	r19, r1
    12f2:	71 f0       	breq	.+28     	; 0x1310 <DIO_u8GetPinValue+0x7e>
    12f4:	90 c0       	rjmp	.+288    	; 0x1416 <DIO_u8GetPinValue+0x184>
    12f6:	4f 81       	ldd	r20, Y+7	; 0x07
    12f8:	58 85       	ldd	r21, Y+8	; 0x08
    12fa:	43 30       	cpi	r20, 0x03	; 3
    12fc:	51 05       	cpc	r21, r1
    12fe:	09 f4       	brne	.+2      	; 0x1302 <DIO_u8GetPinValue+0x70>
    1300:	49 c0       	rjmp	.+146    	; 0x1394 <DIO_u8GetPinValue+0x102>
    1302:	8f 81       	ldd	r24, Y+7	; 0x07
    1304:	98 85       	ldd	r25, Y+8	; 0x08
    1306:	84 30       	cpi	r24, 0x04	; 4
    1308:	91 05       	cpc	r25, r1
    130a:	09 f4       	brne	.+2      	; 0x130e <DIO_u8GetPinValue+0x7c>
    130c:	63 c0       	rjmp	.+198    	; 0x13d4 <DIO_u8GetPinValue+0x142>
    130e:	83 c0       	rjmp	.+262    	; 0x1416 <DIO_u8GetPinValue+0x184>

	 	 	case PORTA :
	 	 		 Local_u8PinValue =  GET_BIT(PINA_REGISTER , COPY_u8PinId);
    1310:	e9 e3       	ldi	r30, 0x39	; 57
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	28 2f       	mov	r18, r24
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	8c 81       	ldd	r24, Y+4	; 0x04
    131c:	88 2f       	mov	r24, r24
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	a9 01       	movw	r20, r18
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <DIO_u8GetPinValue+0x96>
    1324:	55 95       	asr	r21
    1326:	47 95       	ror	r20
    1328:	8a 95       	dec	r24
    132a:	e2 f7       	brpl	.-8      	; 0x1324 <DIO_u8GetPinValue+0x92>
    132c:	ca 01       	movw	r24, r20
    132e:	81 70       	andi	r24, 0x01	; 1
    1330:	89 83       	std	Y+1, r24	; 0x01
				 if( Local_u8PinValue  == 0 ){
    1332:	89 81       	ldd	r24, Y+1	; 0x01
    1334:	88 23       	and	r24, r24
    1336:	21 f4       	brne	.+8      	; 0x1340 <DIO_u8GetPinValue+0xae>
					*COPY_Pu8PinValue = LOGIC_LOW ;
    1338:	ed 81       	ldd	r30, Y+5	; 0x05
    133a:	fe 81       	ldd	r31, Y+6	; 0x06
    133c:	10 82       	st	Z, r1
    133e:	6b c0       	rjmp	.+214    	; 0x1416 <DIO_u8GetPinValue+0x184>
				 }
				 else if ( Local_u8PinValue  == 1 ){
    1340:	89 81       	ldd	r24, Y+1	; 0x01
    1342:	81 30       	cpi	r24, 0x01	; 1
    1344:	09 f0       	breq	.+2      	; 0x1348 <DIO_u8GetPinValue+0xb6>
    1346:	67 c0       	rjmp	.+206    	; 0x1416 <DIO_u8GetPinValue+0x184>
					 *COPY_Pu8PinValue = LOGIC_HIGH ;
    1348:	ed 81       	ldd	r30, Y+5	; 0x05
    134a:	fe 81       	ldd	r31, Y+6	; 0x06
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	80 83       	st	Z, r24
    1350:	62 c0       	rjmp	.+196    	; 0x1416 <DIO_u8GetPinValue+0x184>
				 }
	 	 	 break ;

	 	 	case PORTB :
	 	 		  Local_u8PinValue =  GET_BIT(PINB_REGISTER , COPY_u8PinId);
    1352:	e6 e3       	ldi	r30, 0x36	; 54
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	8c 81       	ldd	r24, Y+4	; 0x04
    135e:	88 2f       	mov	r24, r24
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	a9 01       	movw	r20, r18
    1364:	02 c0       	rjmp	.+4      	; 0x136a <DIO_u8GetPinValue+0xd8>
    1366:	55 95       	asr	r21
    1368:	47 95       	ror	r20
    136a:	8a 95       	dec	r24
    136c:	e2 f7       	brpl	.-8      	; 0x1366 <DIO_u8GetPinValue+0xd4>
    136e:	ca 01       	movw	r24, r20
    1370:	81 70       	andi	r24, 0x01	; 1
    1372:	89 83       	std	Y+1, r24	; 0x01
				 if( Local_u8PinValue  == 0 ){
    1374:	89 81       	ldd	r24, Y+1	; 0x01
    1376:	88 23       	and	r24, r24
    1378:	21 f4       	brne	.+8      	; 0x1382 <DIO_u8GetPinValue+0xf0>
					*COPY_Pu8PinValue = LOGIC_LOW ;
    137a:	ed 81       	ldd	r30, Y+5	; 0x05
    137c:	fe 81       	ldd	r31, Y+6	; 0x06
    137e:	10 82       	st	Z, r1
    1380:	4a c0       	rjmp	.+148    	; 0x1416 <DIO_u8GetPinValue+0x184>
				 }
				 else if ( Local_u8PinValue  == 1 ){
    1382:	89 81       	ldd	r24, Y+1	; 0x01
    1384:	81 30       	cpi	r24, 0x01	; 1
    1386:	09 f0       	breq	.+2      	; 0x138a <DIO_u8GetPinValue+0xf8>
    1388:	46 c0       	rjmp	.+140    	; 0x1416 <DIO_u8GetPinValue+0x184>
					 *COPY_Pu8PinValue = LOGIC_HIGH ;
    138a:	ed 81       	ldd	r30, Y+5	; 0x05
    138c:	fe 81       	ldd	r31, Y+6	; 0x06
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	80 83       	st	Z, r24
    1392:	41 c0       	rjmp	.+130    	; 0x1416 <DIO_u8GetPinValue+0x184>
				 }
	 	 		 break ;

	 	 	case PORTC :
	 	 		  Local_u8PinValue =  GET_BIT(PINC_REGISTER , COPY_u8PinId);
    1394:	e3 e3       	ldi	r30, 0x33	; 51
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	28 2f       	mov	r18, r24
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	8c 81       	ldd	r24, Y+4	; 0x04
    13a0:	88 2f       	mov	r24, r24
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	a9 01       	movw	r20, r18
    13a6:	02 c0       	rjmp	.+4      	; 0x13ac <DIO_u8GetPinValue+0x11a>
    13a8:	55 95       	asr	r21
    13aa:	47 95       	ror	r20
    13ac:	8a 95       	dec	r24
    13ae:	e2 f7       	brpl	.-8      	; 0x13a8 <DIO_u8GetPinValue+0x116>
    13b0:	ca 01       	movw	r24, r20
    13b2:	81 70       	andi	r24, 0x01	; 1
    13b4:	89 83       	std	Y+1, r24	; 0x01
				 if( Local_u8PinValue  == 0 ){
    13b6:	89 81       	ldd	r24, Y+1	; 0x01
    13b8:	88 23       	and	r24, r24
    13ba:	21 f4       	brne	.+8      	; 0x13c4 <DIO_u8GetPinValue+0x132>
					*COPY_Pu8PinValue = LOGIC_LOW ;
    13bc:	ed 81       	ldd	r30, Y+5	; 0x05
    13be:	fe 81       	ldd	r31, Y+6	; 0x06
    13c0:	10 82       	st	Z, r1
    13c2:	29 c0       	rjmp	.+82     	; 0x1416 <DIO_u8GetPinValue+0x184>
				 }
				 else if ( Local_u8PinValue  == 1 ){
    13c4:	89 81       	ldd	r24, Y+1	; 0x01
    13c6:	81 30       	cpi	r24, 0x01	; 1
    13c8:	31 f5       	brne	.+76     	; 0x1416 <DIO_u8GetPinValue+0x184>
					 *COPY_Pu8PinValue = LOGIC_HIGH ;
    13ca:	ed 81       	ldd	r30, Y+5	; 0x05
    13cc:	fe 81       	ldd	r31, Y+6	; 0x06
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	80 83       	st	Z, r24
    13d2:	21 c0       	rjmp	.+66     	; 0x1416 <DIO_u8GetPinValue+0x184>
				 }
	 	 			break ;

	 	 	case PORTD :
	 	 		 Local_u8PinValue =  GET_BIT(PIND_REGISTER , COPY_u8PinId);
    13d4:	e0 e3       	ldi	r30, 0x30	; 48
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	28 2f       	mov	r18, r24
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	8c 81       	ldd	r24, Y+4	; 0x04
    13e0:	88 2f       	mov	r24, r24
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	a9 01       	movw	r20, r18
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <DIO_u8GetPinValue+0x15a>
    13e8:	55 95       	asr	r21
    13ea:	47 95       	ror	r20
    13ec:	8a 95       	dec	r24
    13ee:	e2 f7       	brpl	.-8      	; 0x13e8 <DIO_u8GetPinValue+0x156>
    13f0:	ca 01       	movw	r24, r20
    13f2:	81 70       	andi	r24, 0x01	; 1
    13f4:	89 83       	std	Y+1, r24	; 0x01
				 if( Local_u8PinValue  == 0 ){
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
    13f8:	88 23       	and	r24, r24
    13fa:	21 f4       	brne	.+8      	; 0x1404 <DIO_u8GetPinValue+0x172>
					*COPY_Pu8PinValue = LOGIC_LOW ;
    13fc:	ed 81       	ldd	r30, Y+5	; 0x05
    13fe:	fe 81       	ldd	r31, Y+6	; 0x06
    1400:	10 82       	st	Z, r1
    1402:	09 c0       	rjmp	.+18     	; 0x1416 <DIO_u8GetPinValue+0x184>
				 }
				 else if ( Local_u8PinValue  == 1 ){
    1404:	89 81       	ldd	r24, Y+1	; 0x01
    1406:	81 30       	cpi	r24, 0x01	; 1
    1408:	31 f4       	brne	.+12     	; 0x1416 <DIO_u8GetPinValue+0x184>
					 *COPY_Pu8PinValue = LOGIC_HIGH ;
    140a:	ed 81       	ldd	r30, Y+5	; 0x05
    140c:	fe 81       	ldd	r31, Y+6	; 0x06
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	80 83       	st	Z, r24
    1412:	01 c0       	rjmp	.+2      	; 0x1416 <DIO_u8GetPinValue+0x184>
	 	 		 break ;

}}

else{
	Local_u8ErrorState =STD_TYPES_NOK;
    1414:	1a 82       	std	Y+2, r1	; 0x02
}

	return   Local_u8ErrorState ; 
    1416:	8a 81       	ldd	r24, Y+2	; 0x02
 } 
    1418:	28 96       	adiw	r28, 0x08	; 8
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	f8 94       	cli
    141e:	de bf       	out	0x3e, r29	; 62
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	cd bf       	out	0x3d, r28	; 61
    1424:	cf 91       	pop	r28
    1426:	df 91       	pop	r29
    1428:	08 95       	ret

0000142a <DIO_u8SetPortDirection>:
 
 
 u8  DIO_u8SetPortDirection(u8 COPY_u8PortId  ,u8 COPY_u8Direction) {
    142a:	df 93       	push	r29
    142c:	cf 93       	push	r28
    142e:	00 d0       	rcall	.+0      	; 0x1430 <DIO_u8SetPortDirection+0x6>
    1430:	00 d0       	rcall	.+0      	; 0x1432 <DIO_u8SetPortDirection+0x8>
    1432:	0f 92       	push	r0
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
    1438:	8a 83       	std	Y+2, r24	; 0x02
    143a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK ;  
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	89 83       	std	Y+1, r24	; 0x01
	 if( (COPY_u8PortId <= PORTD)   &&  ((COPY_u8Direction == INPUT) ||(COPY_u8Direction == OUTPUT) ) ){
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	85 30       	cpi	r24, 0x05	; 5
    1444:	d0 f5       	brcc	.+116    	; 0x14ba <DIO_u8SetPortDirection+0x90>
    1446:	8b 81       	ldd	r24, Y+3	; 0x03
    1448:	88 23       	and	r24, r24
    144a:	19 f0       	breq	.+6      	; 0x1452 <DIO_u8SetPortDirection+0x28>
    144c:	8b 81       	ldd	r24, Y+3	; 0x03
    144e:	81 30       	cpi	r24, 0x01	; 1
    1450:	a1 f5       	brne	.+104    	; 0x14ba <DIO_u8SetPortDirection+0x90>
	 
	  switch (COPY_u8PortId){
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	28 2f       	mov	r18, r24
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	3d 83       	std	Y+5, r19	; 0x05
    145a:	2c 83       	std	Y+4, r18	; 0x04
    145c:	8c 81       	ldd	r24, Y+4	; 0x04
    145e:	9d 81       	ldd	r25, Y+5	; 0x05
    1460:	82 30       	cpi	r24, 0x02	; 2
    1462:	91 05       	cpc	r25, r1
    1464:	d9 f0       	breq	.+54     	; 0x149c <DIO_u8SetPortDirection+0x72>
    1466:	2c 81       	ldd	r18, Y+4	; 0x04
    1468:	3d 81       	ldd	r19, Y+5	; 0x05
    146a:	23 30       	cpi	r18, 0x03	; 3
    146c:	31 05       	cpc	r19, r1
    146e:	34 f4       	brge	.+12     	; 0x147c <DIO_u8SetPortDirection+0x52>
    1470:	8c 81       	ldd	r24, Y+4	; 0x04
    1472:	9d 81       	ldd	r25, Y+5	; 0x05
    1474:	81 30       	cpi	r24, 0x01	; 1
    1476:	91 05       	cpc	r25, r1
    1478:	61 f0       	breq	.+24     	; 0x1492 <DIO_u8SetPortDirection+0x68>
    147a:	20 c0       	rjmp	.+64     	; 0x14bc <DIO_u8SetPortDirection+0x92>
    147c:	2c 81       	ldd	r18, Y+4	; 0x04
    147e:	3d 81       	ldd	r19, Y+5	; 0x05
    1480:	23 30       	cpi	r18, 0x03	; 3
    1482:	31 05       	cpc	r19, r1
    1484:	81 f0       	breq	.+32     	; 0x14a6 <DIO_u8SetPortDirection+0x7c>
    1486:	8c 81       	ldd	r24, Y+4	; 0x04
    1488:	9d 81       	ldd	r25, Y+5	; 0x05
    148a:	84 30       	cpi	r24, 0x04	; 4
    148c:	91 05       	cpc	r25, r1
    148e:	81 f0       	breq	.+32     	; 0x14b0 <DIO_u8SetPortDirection+0x86>
    1490:	15 c0       	rjmp	.+42     	; 0x14bc <DIO_u8SetPortDirection+0x92>
    case PORTA:
    	DDRA_REGISTER = COPY_u8Direction;
    1492:	ea e3       	ldi	r30, 0x3A	; 58
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	8b 81       	ldd	r24, Y+3	; 0x03
    1498:	80 83       	st	Z, r24
    149a:	10 c0       	rjmp	.+32     	; 0x14bc <DIO_u8SetPortDirection+0x92>
    	break ;
    case PORTB:
       	DDRB_REGISTER = COPY_u8Direction;
    149c:	e7 e3       	ldi	r30, 0x37	; 55
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	80 83       	st	Z, r24
    14a4:	0b c0       	rjmp	.+22     	; 0x14bc <DIO_u8SetPortDirection+0x92>
       	break ;
    case PORTC:
        DDRC_REGISTER = COPY_u8Direction;
    14a6:	e4 e3       	ldi	r30, 0x34	; 52
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	8b 81       	ldd	r24, Y+3	; 0x03
    14ac:	80 83       	st	Z, r24
    14ae:	06 c0       	rjmp	.+12     	; 0x14bc <DIO_u8SetPortDirection+0x92>
        break ;
    case PORTD:
       DDRB_REGISTER = COPY_u8Direction;
    14b0:	e7 e3       	ldi	r30, 0x37	; 55
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	8b 81       	ldd	r24, Y+3	; 0x03
    14b6:	80 83       	st	Z, r24
    14b8:	01 c0       	rjmp	.+2      	; 0x14bc <DIO_u8SetPortDirection+0x92>
           	break ;

	 }}
	 
	 else{
	Local_u8ErrorState =STD_TYPES_NOK;
    14ba:	19 82       	std	Y+1, r1	; 0x01
}

	return   Local_u8ErrorState ; 
    14bc:	89 81       	ldd	r24, Y+1	; 0x01
	 
 }
    14be:	0f 90       	pop	r0
    14c0:	0f 90       	pop	r0
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	cf 91       	pop	r28
    14ca:	df 91       	pop	r29
    14cc:	08 95       	ret

000014ce <DIO_u8SetPortValue>:
 
 u8  DIO_u8SetPortValue(u8 COPY_u8PortId  ,u8 COPY_u8Value) {
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <DIO_u8SetPortValue+0x6>
    14d4:	00 d0       	rcall	.+0      	; 0x14d6 <DIO_u8SetPortValue+0x8>
    14d6:	0f 92       	push	r0
    14d8:	cd b7       	in	r28, 0x3d	; 61
    14da:	de b7       	in	r29, 0x3e	; 62
    14dc:	8a 83       	std	Y+2, r24	; 0x02
    14de:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK ;   
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	89 83       	std	Y+1, r24	; 0x01
     if( (COPY_u8PortId <= PORTD)){
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	85 30       	cpi	r24, 0x05	; 5
    14e8:	98 f5       	brcc	.+102    	; 0x1550 <DIO_u8SetPortValue+0x82>
	
	switch(COPY_u8PortId ){
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	28 2f       	mov	r18, r24
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	3d 83       	std	Y+5, r19	; 0x05
    14f2:	2c 83       	std	Y+4, r18	; 0x04
    14f4:	8c 81       	ldd	r24, Y+4	; 0x04
    14f6:	9d 81       	ldd	r25, Y+5	; 0x05
    14f8:	82 30       	cpi	r24, 0x02	; 2
    14fa:	91 05       	cpc	r25, r1
    14fc:	d9 f0       	breq	.+54     	; 0x1534 <DIO_u8SetPortValue+0x66>
    14fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1500:	3d 81       	ldd	r19, Y+5	; 0x05
    1502:	23 30       	cpi	r18, 0x03	; 3
    1504:	31 05       	cpc	r19, r1
    1506:	34 f4       	brge	.+12     	; 0x1514 <DIO_u8SetPortValue+0x46>
    1508:	8c 81       	ldd	r24, Y+4	; 0x04
    150a:	9d 81       	ldd	r25, Y+5	; 0x05
    150c:	81 30       	cpi	r24, 0x01	; 1
    150e:	91 05       	cpc	r25, r1
    1510:	61 f0       	breq	.+24     	; 0x152a <DIO_u8SetPortValue+0x5c>
    1512:	1e c0       	rjmp	.+60     	; 0x1550 <DIO_u8SetPortValue+0x82>
    1514:	2c 81       	ldd	r18, Y+4	; 0x04
    1516:	3d 81       	ldd	r19, Y+5	; 0x05
    1518:	23 30       	cpi	r18, 0x03	; 3
    151a:	31 05       	cpc	r19, r1
    151c:	81 f0       	breq	.+32     	; 0x153e <DIO_u8SetPortValue+0x70>
    151e:	8c 81       	ldd	r24, Y+4	; 0x04
    1520:	9d 81       	ldd	r25, Y+5	; 0x05
    1522:	84 30       	cpi	r24, 0x04	; 4
    1524:	91 05       	cpc	r25, r1
    1526:	81 f0       	breq	.+32     	; 0x1548 <DIO_u8SetPortValue+0x7a>
    1528:	13 c0       	rjmp	.+38     	; 0x1550 <DIO_u8SetPortValue+0x82>

			 	case PORTA :
			 		 PORTA_REGISTER = COPY_u8Value ;
    152a:	eb e3       	ldi	r30, 0x3B	; 59
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	8b 81       	ldd	r24, Y+3	; 0x03
    1530:	80 83       	st	Z, r24
    1532:	0e c0       	rjmp	.+28     	; 0x1550 <DIO_u8SetPortValue+0x82>
			 	 break ;

			 	case PORTB :
			 		 PORTB_REGISTER = COPY_u8Value ;
    1534:	e8 e3       	ldi	r30, 0x38	; 56
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	80 83       	st	Z, r24
    153c:	09 c0       	rjmp	.+18     	; 0x1550 <DIO_u8SetPortValue+0x82>
			 		 break ;

			 	case PORTC :

			 		 PORTC_REGISTER = COPY_u8Value ;
    153e:	e5 e3       	ldi	r30, 0x35	; 53
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	8b 81       	ldd	r24, Y+3	; 0x03
    1544:	80 83       	st	Z, r24
    1546:	04 c0       	rjmp	.+8      	; 0x1550 <DIO_u8SetPortValue+0x82>
			 			break ;

			 	case PORTD :
			 		 PORTD_REGISTER = COPY_u8Value ;
    1548:	e2 e3       	ldi	r30, 0x32	; 50
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	80 83       	st	Z, r24



			 	}
	 }
	 return   Local_u8ErrorState ; 
    1550:	89 81       	ldd	r24, Y+1	; 0x01
 }
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
    155c:	cf 91       	pop	r28
    155e:	df 91       	pop	r29
    1560:	08 95       	ret

00001562 <DIO_u8GetPortValue>:
  
 u8  DIO_u8GetPortValue (u8 COPY_u8PortId , u8 *COPY_Pu8PortValue){
    1562:	df 93       	push	r29
    1564:	cf 93       	push	r28
    1566:	00 d0       	rcall	.+0      	; 0x1568 <DIO_u8GetPortValue+0x6>
    1568:	00 d0       	rcall	.+0      	; 0x156a <DIO_u8GetPortValue+0x8>
    156a:	00 d0       	rcall	.+0      	; 0x156c <DIO_u8GetPortValue+0xa>
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
    1570:	8a 83       	std	Y+2, r24	; 0x02
    1572:	7c 83       	std	Y+4, r23	; 0x04
    1574:	6b 83       	std	Y+3, r22	; 0x03
	 
u8 Local_u8ErrorState = STD_TYPES_OK ; 	 
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	89 83       	std	Y+1, r24	; 0x01
  
 
if( (COPY_u8PortId <= PORTD)  && (COPY_Pu8PortValue != NULL  ) ) { // ptr >> is a variable in main to store the state of pin on it
    157a:	8a 81       	ldd	r24, Y+2	; 0x02
    157c:	85 30       	cpi	r24, 0x05	; 5
    157e:	08 f0       	brcs	.+2      	; 0x1582 <DIO_u8GetPortValue+0x20>
    1580:	40 c0       	rjmp	.+128    	; 0x1602 <DIO_u8GetPortValue+0xa0>
    1582:	8b 81       	ldd	r24, Y+3	; 0x03
    1584:	9c 81       	ldd	r25, Y+4	; 0x04
    1586:	00 97       	sbiw	r24, 0x00	; 0
    1588:	e1 f1       	breq	.+120    	; 0x1602 <DIO_u8GetPortValue+0xa0>

	 switch(COPY_u8PortId ){
    158a:	8a 81       	ldd	r24, Y+2	; 0x02
    158c:	28 2f       	mov	r18, r24
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	3e 83       	std	Y+6, r19	; 0x06
    1592:	2d 83       	std	Y+5, r18	; 0x05
    1594:	8d 81       	ldd	r24, Y+5	; 0x05
    1596:	9e 81       	ldd	r25, Y+6	; 0x06
    1598:	82 30       	cpi	r24, 0x02	; 2
    159a:	91 05       	cpc	r25, r1
    159c:	e9 f0       	breq	.+58     	; 0x15d8 <DIO_u8GetPortValue+0x76>
    159e:	2d 81       	ldd	r18, Y+5	; 0x05
    15a0:	3e 81       	ldd	r19, Y+6	; 0x06
    15a2:	23 30       	cpi	r18, 0x03	; 3
    15a4:	31 05       	cpc	r19, r1
    15a6:	34 f4       	brge	.+12     	; 0x15b4 <DIO_u8GetPortValue+0x52>
    15a8:	8d 81       	ldd	r24, Y+5	; 0x05
    15aa:	9e 81       	ldd	r25, Y+6	; 0x06
    15ac:	81 30       	cpi	r24, 0x01	; 1
    15ae:	91 05       	cpc	r25, r1
    15b0:	61 f0       	breq	.+24     	; 0x15ca <DIO_u8GetPortValue+0x68>
    15b2:	28 c0       	rjmp	.+80     	; 0x1604 <DIO_u8GetPortValue+0xa2>
    15b4:	2d 81       	ldd	r18, Y+5	; 0x05
    15b6:	3e 81       	ldd	r19, Y+6	; 0x06
    15b8:	23 30       	cpi	r18, 0x03	; 3
    15ba:	31 05       	cpc	r19, r1
    15bc:	a1 f0       	breq	.+40     	; 0x15e6 <DIO_u8GetPortValue+0x84>
    15be:	8d 81       	ldd	r24, Y+5	; 0x05
    15c0:	9e 81       	ldd	r25, Y+6	; 0x06
    15c2:	84 30       	cpi	r24, 0x04	; 4
    15c4:	91 05       	cpc	r25, r1
    15c6:	b1 f0       	breq	.+44     	; 0x15f4 <DIO_u8GetPortValue+0x92>
    15c8:	1d c0       	rjmp	.+58     	; 0x1604 <DIO_u8GetPortValue+0xa2>

	 	 	case PORTA :
	 	 		*COPY_Pu8PortValue = PINA_REGISTER;
    15ca:	e9 e3       	ldi	r30, 0x39	; 57
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	eb 81       	ldd	r30, Y+3	; 0x03
    15d2:	fc 81       	ldd	r31, Y+4	; 0x04
    15d4:	80 83       	st	Z, r24
    15d6:	16 c0       	rjmp	.+44     	; 0x1604 <DIO_u8GetPortValue+0xa2>
				 
	 	 	 break ;

	 	 	case PORTB :
	 	 		 *COPY_Pu8PortValue = PINB_REGISTER;
    15d8:	e6 e3       	ldi	r30, 0x36	; 54
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	eb 81       	ldd	r30, Y+3	; 0x03
    15e0:	fc 81       	ldd	r31, Y+4	; 0x04
    15e2:	80 83       	st	Z, r24
    15e4:	0f c0       	rjmp	.+30     	; 0x1604 <DIO_u8GetPortValue+0xa2>
	 	 		 break ;

	 	 	case PORTC :
	 	 		 *COPY_Pu8PortValue = PINC_REGISTER;
    15e6:	e3 e3       	ldi	r30, 0x33	; 51
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	eb 81       	ldd	r30, Y+3	; 0x03
    15ee:	fc 81       	ldd	r31, Y+4	; 0x04
    15f0:	80 83       	st	Z, r24
    15f2:	08 c0       	rjmp	.+16     	; 0x1604 <DIO_u8GetPortValue+0xa2>
	 	 			break ;

	 	 	case PORTD :
	 	 		 *COPY_Pu8PortValue = PIND_REGISTER ;
    15f4:	e0 e3       	ldi	r30, 0x30	; 48
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	eb 81       	ldd	r30, Y+3	; 0x03
    15fc:	fc 81       	ldd	r31, Y+4	; 0x04
    15fe:	80 83       	st	Z, r24
    1600:	01 c0       	rjmp	.+2      	; 0x1604 <DIO_u8GetPortValue+0xa2>
	 	 		 break ;

}}

else{
	Local_u8ErrorState =STD_TYPES_NOK;
    1602:	19 82       	std	Y+1, r1	; 0x01
}

	return   Local_u8ErrorState ; 	 
    1604:	89 81       	ldd	r24, Y+1	; 0x01
	 
	 
	 
 }
    1606:	26 96       	adiw	r28, 0x06	; 6
    1608:	0f b6       	in	r0, 0x3f	; 63
    160a:	f8 94       	cli
    160c:	de bf       	out	0x3e, r29	; 62
    160e:	0f be       	out	0x3f, r0	; 63
    1610:	cd bf       	out	0x3d, r28	; 61
    1612:	cf 91       	pop	r28
    1614:	df 91       	pop	r29
    1616:	08 95       	ret

00001618 <EXTI_SET_CALL_BACK>:

/* Global Pointer To Function */
static  void (*EXTI_APFEXTI[3])(void) = { NULL , NULL , NULL };
 

u8 EXTI_SET_CALL_BACK(void(*ptr)(void) , u8 indix ){
    1618:	df 93       	push	r29
    161a:	cf 93       	push	r28
    161c:	00 d0       	rcall	.+0      	; 0x161e <EXTI_SET_CALL_BACK+0x6>
    161e:	00 d0       	rcall	.+0      	; 0x1620 <EXTI_SET_CALL_BACK+0x8>
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
    1624:	9b 83       	std	Y+3, r25	; 0x03
    1626:	8a 83       	std	Y+2, r24	; 0x02
    1628:	6c 83       	std	Y+4, r22	; 0x04
  u8 local_u8Error_state =STD_TYPES_OK ;
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	89 83       	std	Y+1, r24	; 0x01
  if(indix <=EXT2  && ptr !=NULL){
    162e:	8c 81       	ldd	r24, Y+4	; 0x04
    1630:	83 30       	cpi	r24, 0x03	; 3
    1632:	88 f4       	brcc	.+34     	; 0x1656 <EXTI_SET_CALL_BACK+0x3e>
    1634:	8a 81       	ldd	r24, Y+2	; 0x02
    1636:	9b 81       	ldd	r25, Y+3	; 0x03
    1638:	00 97       	sbiw	r24, 0x00	; 0
    163a:	69 f0       	breq	.+26     	; 0x1656 <EXTI_SET_CALL_BACK+0x3e>
  EXTI_APFEXTI[indix]=ptr;
    163c:	8c 81       	ldd	r24, Y+4	; 0x04
    163e:	88 2f       	mov	r24, r24
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	88 0f       	add	r24, r24
    1644:	99 1f       	adc	r25, r25
    1646:	fc 01       	movw	r30, r24
    1648:	e8 59       	subi	r30, 0x98	; 152
    164a:	fe 4f       	sbci	r31, 0xFE	; 254
    164c:	8a 81       	ldd	r24, Y+2	; 0x02
    164e:	9b 81       	ldd	r25, Y+3	; 0x03
    1650:	91 83       	std	Z+1, r25	; 0x01
    1652:	80 83       	st	Z, r24
    1654:	01 c0       	rjmp	.+2      	; 0x1658 <EXTI_SET_CALL_BACK+0x40>
  }
  else{
	  local_u8Error_state =STD_TYPES_NOK ;
    1656:	19 82       	std	Y+1, r1	; 0x01
	  
  }
 return local_u8Error_state ;
    1658:	89 81       	ldd	r24, Y+1	; 0x01
} 
    165a:	0f 90       	pop	r0
    165c:	0f 90       	pop	r0
    165e:	0f 90       	pop	r0
    1660:	0f 90       	pop	r0
    1662:	cf 91       	pop	r28
    1664:	df 91       	pop	r29
    1666:	08 95       	ret

00001668 <EXTI_u8EXTEnable>:
 


u8 EXTI_u8EXTEnable(u8 copy_u8EXTIINDEX,  u8 copy_u8edge){
    1668:	df 93       	push	r29
    166a:	cf 93       	push	r28
    166c:	cd b7       	in	r28, 0x3d	; 61
    166e:	de b7       	in	r29, 0x3e	; 62
    1670:	2b 97       	sbiw	r28, 0x0b	; 11
    1672:	0f b6       	in	r0, 0x3f	; 63
    1674:	f8 94       	cli
    1676:	de bf       	out	0x3e, r29	; 62
    1678:	0f be       	out	0x3f, r0	; 63
    167a:	cd bf       	out	0x3d, r28	; 61
    167c:	8a 83       	std	Y+2, r24	; 0x02
    167e:	6b 83       	std	Y+3, r22	; 0x03
 u8 local_u8Error_state = STD_TYPES_OK ;
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8EXTIINDEX){
    1684:	8a 81       	ldd	r24, Y+2	; 0x02
    1686:	28 2f       	mov	r18, r24
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	3b 87       	std	Y+11, r19	; 0x0b
    168c:	2a 87       	std	Y+10, r18	; 0x0a
    168e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1690:	9b 85       	ldd	r25, Y+11	; 0x0b
    1692:	81 30       	cpi	r24, 0x01	; 1
    1694:	91 05       	cpc	r25, r1
    1696:	09 f4       	brne	.+2      	; 0x169a <EXTI_u8EXTEnable+0x32>
    1698:	85 c0       	rjmp	.+266    	; 0x17a4 <EXTI_u8EXTEnable+0x13c>
    169a:	2a 85       	ldd	r18, Y+10	; 0x0a
    169c:	3b 85       	ldd	r19, Y+11	; 0x0b
    169e:	22 30       	cpi	r18, 0x02	; 2
    16a0:	31 05       	cpc	r19, r1
    16a2:	09 f4       	brne	.+2      	; 0x16a6 <EXTI_u8EXTEnable+0x3e>
    16a4:	f9 c0       	rjmp	.+498    	; 0x1898 <EXTI_u8EXTEnable+0x230>
    16a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    16a8:	9b 85       	ldd	r25, Y+11	; 0x0b
    16aa:	00 97       	sbiw	r24, 0x00	; 0
    16ac:	09 f0       	breq	.+2      	; 0x16b0 <EXTI_u8EXTEnable+0x48>
    16ae:	23 c1       	rjmp	.+582    	; 0x18f6 <EXTI_u8EXTEnable+0x28e>
		
		case EXT0:
		
		/* select Edge source */
		
		switch(copy_u8edge){
    16b0:	8b 81       	ldd	r24, Y+3	; 0x03
    16b2:	28 2f       	mov	r18, r24
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	39 87       	std	Y+9, r19	; 0x09
    16b8:	28 87       	std	Y+8, r18	; 0x08
    16ba:	88 85       	ldd	r24, Y+8	; 0x08
    16bc:	99 85       	ldd	r25, Y+9	; 0x09
    16be:	81 30       	cpi	r24, 0x01	; 1
    16c0:	91 05       	cpc	r25, r1
    16c2:	61 f1       	breq	.+88     	; 0x171c <EXTI_u8EXTEnable+0xb4>
    16c4:	28 85       	ldd	r18, Y+8	; 0x08
    16c6:	39 85       	ldd	r19, Y+9	; 0x09
    16c8:	22 30       	cpi	r18, 0x02	; 2
    16ca:	31 05       	cpc	r19, r1
    16cc:	2c f4       	brge	.+10     	; 0x16d8 <EXTI_u8EXTEnable+0x70>
    16ce:	88 85       	ldd	r24, Y+8	; 0x08
    16d0:	99 85       	ldd	r25, Y+9	; 0x09
    16d2:	00 97       	sbiw	r24, 0x00	; 0
    16d4:	69 f0       	breq	.+26     	; 0x16f0 <EXTI_u8EXTEnable+0x88>
    16d6:	64 c0       	rjmp	.+200    	; 0x17a0 <EXTI_u8EXTEnable+0x138>
    16d8:	28 85       	ldd	r18, Y+8	; 0x08
    16da:	39 85       	ldd	r19, Y+9	; 0x09
    16dc:	22 30       	cpi	r18, 0x02	; 2
    16de:	31 05       	cpc	r19, r1
    16e0:	99 f1       	breq	.+102    	; 0x1748 <EXTI_u8EXTEnable+0xe0>
    16e2:	88 85       	ldd	r24, Y+8	; 0x08
    16e4:	99 85       	ldd	r25, Y+9	; 0x09
    16e6:	83 30       	cpi	r24, 0x03	; 3
    16e8:	91 05       	cpc	r25, r1
    16ea:	09 f4       	brne	.+2      	; 0x16ee <EXTI_u8EXTEnable+0x86>
    16ec:	43 c0       	rjmp	.+134    	; 0x1774 <EXTI_u8EXTEnable+0x10c>
    16ee:	58 c0       	rjmp	.+176    	; 0x17a0 <EXTI_u8EXTEnable+0x138>
			case rising_edge:
               
			   SET_BIT(EXTI_u8_MCUCR,ISC01);
    16f0:	a5 e5       	ldi	r26, 0x55	; 85
    16f2:	b0 e0       	ldi	r27, 0x00	; 0
    16f4:	e5 e5       	ldi	r30, 0x55	; 85
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	82 60       	ori	r24, 0x02	; 2
    16fc:	8c 93       	st	X, r24
               SET_BIT(EXTI_u8_MCUCR,ISC00);
    16fe:	a5 e5       	ldi	r26, 0x55	; 85
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	e5 e5       	ldi	r30, 0x55	; 85
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	81 60       	ori	r24, 0x01	; 1
    170a:	8c 93       	st	X, r24
			   		/* ENABLE EXTI0  */   
		
		       SET_BIT(EXTI_u8_GICR,INT0);
    170c:	ab e5       	ldi	r26, 0x5B	; 91
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	eb e5       	ldi	r30, 0x5B	; 91
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	80 64       	ori	r24, 0x40	; 64
    1718:	8c 93       	st	X, r24
    171a:	ee c0       	rjmp	.+476    	; 0x18f8 <EXTI_u8EXTEnable+0x290>
			   
            break ;
			
			case Falling_edge:
 
               SET_BIT(EXTI_u8_MCUCR,ISC01);
    171c:	a5 e5       	ldi	r26, 0x55	; 85
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	e5 e5       	ldi	r30, 0x55	; 85
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	82 60       	ori	r24, 0x02	; 2
    1728:	8c 93       	st	X, r24
               CLR_BIT(EXTI_u8_MCUCR,ISC00);
    172a:	a5 e5       	ldi	r26, 0x55	; 85
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	e5 e5       	ldi	r30, 0x55	; 85
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	8e 7f       	andi	r24, 0xFE	; 254
    1736:	8c 93       	st	X, r24
		        /* ENABLE EXTI0  */
		
		        SET_BIT(EXTI_u8_GICR,INT0);			   
    1738:	ab e5       	ldi	r26, 0x5B	; 91
    173a:	b0 e0       	ldi	r27, 0x00	; 0
    173c:	eb e5       	ldi	r30, 0x5B	; 91
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	80 81       	ld	r24, Z
    1742:	80 64       	ori	r24, 0x40	; 64
    1744:	8c 93       	st	X, r24
    1746:	d8 c0       	rjmp	.+432    	; 0x18f8 <EXTI_u8EXTEnable+0x290>
			break ;
			
			case Any_logical_change :
			
                SET_BIT(EXTI_u8_MCUCR,ISC00);
    1748:	a5 e5       	ldi	r26, 0x55	; 85
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	e5 e5       	ldi	r30, 0x55	; 85
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	81 60       	ori	r24, 0x01	; 1
    1754:	8c 93       	st	X, r24
                CLR_BIT(EXTI_u8_MCUCR,ISC01);
    1756:	a5 e5       	ldi	r26, 0x55	; 85
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	e5 e5       	ldi	r30, 0x55	; 85
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	8d 7f       	andi	r24, 0xFD	; 253
    1762:	8c 93       	st	X, r24

                     /* ENABLE EXTI0  */
		
		         SET_BIT(EXTI_u8_GICR,INT0);
    1764:	ab e5       	ldi	r26, 0x5B	; 91
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	eb e5       	ldi	r30, 0x5B	; 91
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	80 64       	ori	r24, 0x40	; 64
    1770:	8c 93       	st	X, r24
    1772:	c2 c0       	rjmp	.+388    	; 0x18f8 <EXTI_u8EXTEnable+0x290>
				
			break;
			
			case low_level:
			
			 CLR_BIT(EXTI_u8_MCUCR,ISC00);
    1774:	a5 e5       	ldi	r26, 0x55	; 85
    1776:	b0 e0       	ldi	r27, 0x00	; 0
    1778:	e5 e5       	ldi	r30, 0x55	; 85
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	8e 7f       	andi	r24, 0xFE	; 254
    1780:	8c 93       	st	X, r24
             CLR_BIT(EXTI_u8_MCUCR,ISC01);
    1782:	a5 e5       	ldi	r26, 0x55	; 85
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	e5 e5       	ldi	r30, 0x55	; 85
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	8d 7f       	andi	r24, 0xFD	; 253
    178e:	8c 93       	st	X, r24
			 		/* ENABLE EXTI0  */
		
		        SET_BIT(EXTI_u8_GICR,INT0);
    1790:	ab e5       	ldi	r26, 0x5B	; 91
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	eb e5       	ldi	r30, 0x5B	; 91
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	80 64       	ori	r24, 0x40	; 64
    179c:	8c 93       	st	X, r24
    179e:	ac c0       	rjmp	.+344    	; 0x18f8 <EXTI_u8EXTEnable+0x290>
			 
			break ;
			
			default:
			
			local_u8Error_state =STD_TYPES_NOK ;
    17a0:	19 82       	std	Y+1, r1	; 0x01
    17a2:	aa c0       	rjmp	.+340    	; 0x18f8 <EXTI_u8EXTEnable+0x290>
 
		
          break ;
		
		case EXT1:
          switch(copy_u8edge){
    17a4:	8b 81       	ldd	r24, Y+3	; 0x03
    17a6:	28 2f       	mov	r18, r24
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	3f 83       	std	Y+7, r19	; 0x07
    17ac:	2e 83       	std	Y+6, r18	; 0x06
    17ae:	8e 81       	ldd	r24, Y+6	; 0x06
    17b0:	9f 81       	ldd	r25, Y+7	; 0x07
    17b2:	81 30       	cpi	r24, 0x01	; 1
    17b4:	91 05       	cpc	r25, r1
    17b6:	61 f1       	breq	.+88     	; 0x1810 <EXTI_u8EXTEnable+0x1a8>
    17b8:	2e 81       	ldd	r18, Y+6	; 0x06
    17ba:	3f 81       	ldd	r19, Y+7	; 0x07
    17bc:	22 30       	cpi	r18, 0x02	; 2
    17be:	31 05       	cpc	r19, r1
    17c0:	2c f4       	brge	.+10     	; 0x17cc <EXTI_u8EXTEnable+0x164>
    17c2:	8e 81       	ldd	r24, Y+6	; 0x06
    17c4:	9f 81       	ldd	r25, Y+7	; 0x07
    17c6:	00 97       	sbiw	r24, 0x00	; 0
    17c8:	69 f0       	breq	.+26     	; 0x17e4 <EXTI_u8EXTEnable+0x17c>
    17ca:	64 c0       	rjmp	.+200    	; 0x1894 <EXTI_u8EXTEnable+0x22c>
    17cc:	2e 81       	ldd	r18, Y+6	; 0x06
    17ce:	3f 81       	ldd	r19, Y+7	; 0x07
    17d0:	22 30       	cpi	r18, 0x02	; 2
    17d2:	31 05       	cpc	r19, r1
    17d4:	99 f1       	breq	.+102    	; 0x183c <EXTI_u8EXTEnable+0x1d4>
    17d6:	8e 81       	ldd	r24, Y+6	; 0x06
    17d8:	9f 81       	ldd	r25, Y+7	; 0x07
    17da:	83 30       	cpi	r24, 0x03	; 3
    17dc:	91 05       	cpc	r25, r1
    17de:	09 f4       	brne	.+2      	; 0x17e2 <EXTI_u8EXTEnable+0x17a>
    17e0:	43 c0       	rjmp	.+134    	; 0x1868 <EXTI_u8EXTEnable+0x200>
    17e2:	58 c0       	rjmp	.+176    	; 0x1894 <EXTI_u8EXTEnable+0x22c>
			case rising_edge:
               
			   SET_BIT(EXTI_u8_MCUCR,ISC11);
    17e4:	a5 e5       	ldi	r26, 0x55	; 85
    17e6:	b0 e0       	ldi	r27, 0x00	; 0
    17e8:	e5 e5       	ldi	r30, 0x55	; 85
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
    17ee:	88 60       	ori	r24, 0x08	; 8
    17f0:	8c 93       	st	X, r24
               SET_BIT(EXTI_u8_MCUCR,ISC10);
    17f2:	a5 e5       	ldi	r26, 0x55	; 85
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	e5 e5       	ldi	r30, 0x55	; 85
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	84 60       	ori	r24, 0x04	; 4
    17fe:	8c 93       	st	X, r24
			   
			   	/* ENABLE EXTI1  */   
		
		       SET_BIT(EXTI_u8_GICR,INT1);
    1800:	ab e5       	ldi	r26, 0x5B	; 91
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	eb e5       	ldi	r30, 0x5B	; 91
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	80 68       	ori	r24, 0x80	; 128
    180c:	8c 93       	st	X, r24
    180e:	74 c0       	rjmp	.+232    	; 0x18f8 <EXTI_u8EXTEnable+0x290>
			   
            break ;
			
			case Falling_edge:
 
               SET_BIT(EXTI_u8_MCUCR,ISC11);
    1810:	a5 e5       	ldi	r26, 0x55	; 85
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	e5 e5       	ldi	r30, 0x55	; 85
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	88 60       	ori	r24, 0x08	; 8
    181c:	8c 93       	st	X, r24
               CLR_BIT(EXTI_u8_MCUCR,ISC10);
    181e:	a5 e5       	ldi	r26, 0x55	; 85
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	e5 e5       	ldi	r30, 0x55	; 85
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	8b 7f       	andi	r24, 0xFB	; 251
    182a:	8c 93       	st	X, r24
			   
			   	/* ENABLE EXTI1  */   
		
		       SET_BIT(EXTI_u8_GICR,INT1);
    182c:	ab e5       	ldi	r26, 0x5B	; 91
    182e:	b0 e0       	ldi	r27, 0x00	; 0
    1830:	eb e5       	ldi	r30, 0x5B	; 91
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	80 81       	ld	r24, Z
    1836:	80 68       	ori	r24, 0x80	; 128
    1838:	8c 93       	st	X, r24
    183a:	5e c0       	rjmp	.+188    	; 0x18f8 <EXTI_u8EXTEnable+0x290>
			   
			break ;
			
			case Any_logical_change :
			
                SET_BIT(EXTI_u8_MCUCR,ISC10);
    183c:	a5 e5       	ldi	r26, 0x55	; 85
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	e5 e5       	ldi	r30, 0x55	; 85
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	80 81       	ld	r24, Z
    1846:	84 60       	ori	r24, 0x04	; 4
    1848:	8c 93       	st	X, r24
                CLR_BIT(EXTI_u8_MCUCR,ISC11);
    184a:	a5 e5       	ldi	r26, 0x55	; 85
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	e5 e5       	ldi	r30, 0x55	; 85
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	87 7f       	andi	r24, 0xF7	; 247
    1856:	8c 93       	st	X, r24
				
			 	  /* ENABLE EXTI1  */   
		
		       SET_BIT(EXTI_u8_GICR,INT1);
    1858:	ab e5       	ldi	r26, 0x5B	; 91
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	eb e5       	ldi	r30, 0x5B	; 91
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	80 68       	ori	r24, 0x80	; 128
    1864:	8c 93       	st	X, r24
    1866:	48 c0       	rjmp	.+144    	; 0x18f8 <EXTI_u8EXTEnable+0x290>
			break;
			
			case low_level:
			
			 CLR_BIT(EXTI_u8_MCUCR,ISC11);
    1868:	a5 e5       	ldi	r26, 0x55	; 85
    186a:	b0 e0       	ldi	r27, 0x00	; 0
    186c:	e5 e5       	ldi	r30, 0x55	; 85
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	80 81       	ld	r24, Z
    1872:	87 7f       	andi	r24, 0xF7	; 247
    1874:	8c 93       	st	X, r24
             CLR_BIT(EXTI_u8_MCUCR,ISC10);
    1876:	a5 e5       	ldi	r26, 0x55	; 85
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	e5 e5       	ldi	r30, 0x55	; 85
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	8b 7f       	andi	r24, 0xFB	; 251
    1882:	8c 93       	st	X, r24
			 
			 	/* ENABLE EXTI1  */   
		
		       SET_BIT(EXTI_u8_GICR,INT1);
    1884:	ab e5       	ldi	r26, 0x5B	; 91
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	eb e5       	ldi	r30, 0x5B	; 91
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	80 68       	ori	r24, 0x80	; 128
    1890:	8c 93       	st	X, r24
    1892:	32 c0       	rjmp	.+100    	; 0x18f8 <EXTI_u8EXTEnable+0x290>
			 
			break ;
			default:
			
			 local_u8Error_state =STD_TYPES_NOK ;
    1894:	19 82       	std	Y+1, r1	; 0x01
    1896:	30 c0       	rjmp	.+96     	; 0x18f8 <EXTI_u8EXTEnable+0x290>
		}		
		break ;
		
		case EXT2:
		
		 switch(copy_u8edge){
    1898:	8b 81       	ldd	r24, Y+3	; 0x03
    189a:	28 2f       	mov	r18, r24
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	3d 83       	std	Y+5, r19	; 0x05
    18a0:	2c 83       	std	Y+4, r18	; 0x04
    18a2:	8c 81       	ldd	r24, Y+4	; 0x04
    18a4:	9d 81       	ldd	r25, Y+5	; 0x05
    18a6:	00 97       	sbiw	r24, 0x00	; 0
    18a8:	31 f0       	breq	.+12     	; 0x18b6 <EXTI_u8EXTEnable+0x24e>
    18aa:	2c 81       	ldd	r18, Y+4	; 0x04
    18ac:	3d 81       	ldd	r19, Y+5	; 0x05
    18ae:	21 30       	cpi	r18, 0x01	; 1
    18b0:	31 05       	cpc	r19, r1
    18b2:	81 f0       	breq	.+32     	; 0x18d4 <EXTI_u8EXTEnable+0x26c>
    18b4:	1e c0       	rjmp	.+60     	; 0x18f2 <EXTI_u8EXTEnable+0x28a>
			case rising_edge:
               
			   SET_BIT(EXTI_u8_MCUCSR,ISC2);
    18b6:	a4 e5       	ldi	r26, 0x54	; 84
    18b8:	b0 e0       	ldi	r27, 0x00	; 0
    18ba:	e4 e5       	ldi	r30, 0x54	; 84
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	80 64       	ori	r24, 0x40	; 64
    18c2:	8c 93       	st	X, r24
 
			    	/* ENABLE EXTI2  */   
		
		       SET_BIT(EXTI_u8_GICR,INT2);
    18c4:	ab e5       	ldi	r26, 0x5B	; 91
    18c6:	b0 e0       	ldi	r27, 0x00	; 0
    18c8:	eb e5       	ldi	r30, 0x5B	; 91
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	80 81       	ld	r24, Z
    18ce:	80 62       	ori	r24, 0x20	; 32
    18d0:	8c 93       	st	X, r24
    18d2:	12 c0       	rjmp	.+36     	; 0x18f8 <EXTI_u8EXTEnable+0x290>
			   
            break ;
			
			case Falling_edge:
 
               CLR_BIT(EXTI_u8_MCUCSR,ISC2);
    18d4:	a4 e5       	ldi	r26, 0x54	; 84
    18d6:	b0 e0       	ldi	r27, 0x00	; 0
    18d8:	e4 e5       	ldi	r30, 0x54	; 84
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	8f 7b       	andi	r24, 0xBF	; 191
    18e0:	8c 93       	st	X, r24
			   
			   	/* ENABLE EXTI2  */   
		
		       SET_BIT(EXTI_u8_GICR,INT2);
    18e2:	ab e5       	ldi	r26, 0x5B	; 91
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	eb e5       	ldi	r30, 0x5B	; 91
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	80 62       	ori	r24, 0x20	; 32
    18ee:	8c 93       	st	X, r24
    18f0:	03 c0       	rjmp	.+6      	; 0x18f8 <EXTI_u8EXTEnable+0x290>
			   
		    break ;
		    
			default:
			
			local_u8Error_state =STD_TYPES_NOK ;
    18f2:	19 82       	std	Y+1, r1	; 0x01
    18f4:	01 c0       	rjmp	.+2      	; 0x18f8 <EXTI_u8EXTEnable+0x290>
		 }
	     break ;
		
		default:  
			
			local_u8Error_state =STD_TYPES_NOK ;
    18f6:	19 82       	std	Y+1, r1	; 0x01
	}
	
	
	return local_u8Error_state;
    18f8:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    18fa:	2b 96       	adiw	r28, 0x0b	; 11
    18fc:	0f b6       	in	r0, 0x3f	; 63
    18fe:	f8 94       	cli
    1900:	de bf       	out	0x3e, r29	; 62
    1902:	0f be       	out	0x3f, r0	; 63
    1904:	cd bf       	out	0x3d, r28	; 61
    1906:	cf 91       	pop	r28
    1908:	df 91       	pop	r29
    190a:	08 95       	ret

0000190c <EXTI_u8EXTDisable>:




u8 EXTI_u8EXTDisable(u8 copy_u8EXTIINDEX ){
    190c:	df 93       	push	r29
    190e:	cf 93       	push	r28
    1910:	00 d0       	rcall	.+0      	; 0x1912 <EXTI_u8EXTDisable+0x6>
    1912:	00 d0       	rcall	.+0      	; 0x1914 <EXTI_u8EXTDisable+0x8>
    1914:	cd b7       	in	r28, 0x3d	; 61
    1916:	de b7       	in	r29, 0x3e	; 62
    1918:	8a 83       	std	Y+2, r24	; 0x02
	
 u8 local_u8Error_state=STD_TYPES_OK ;
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8EXTIINDEX){
    191e:	8a 81       	ldd	r24, Y+2	; 0x02
    1920:	28 2f       	mov	r18, r24
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	3c 83       	std	Y+4, r19	; 0x04
    1926:	2b 83       	std	Y+3, r18	; 0x03
    1928:	8b 81       	ldd	r24, Y+3	; 0x03
    192a:	9c 81       	ldd	r25, Y+4	; 0x04
    192c:	81 30       	cpi	r24, 0x01	; 1
    192e:	91 05       	cpc	r25, r1
    1930:	89 f0       	breq	.+34     	; 0x1954 <EXTI_u8EXTDisable+0x48>
    1932:	2b 81       	ldd	r18, Y+3	; 0x03
    1934:	3c 81       	ldd	r19, Y+4	; 0x04
    1936:	22 30       	cpi	r18, 0x02	; 2
    1938:	31 05       	cpc	r19, r1
    193a:	a1 f0       	breq	.+40     	; 0x1964 <EXTI_u8EXTDisable+0x58>
    193c:	8b 81       	ldd	r24, Y+3	; 0x03
    193e:	9c 81       	ldd	r25, Y+4	; 0x04
    1940:	00 97       	sbiw	r24, 0x00	; 0
    1942:	c1 f4       	brne	.+48     	; 0x1974 <EXTI_u8EXTDisable+0x68>
		
		case EXT0:

			  /* DisABLE EXTI0  */   
		
		       CLR_BIT(EXTI_u8_GICR,INT0);
    1944:	ab e5       	ldi	r26, 0x5B	; 91
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	eb e5       	ldi	r30, 0x5B	; 91
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	8f 7b       	andi	r24, 0xBF	; 191
    1950:	8c 93       	st	X, r24
    1952:	11 c0       	rjmp	.+34     	; 0x1976 <EXTI_u8EXTDisable+0x6a>
		
		case EXT1:
 
         	   /* DisABLE EXTI1  */   
		
		      CLR_BIT(EXTI_u8_GICR,INT1);
    1954:	ab e5       	ldi	r26, 0x5B	; 91
    1956:	b0 e0       	ldi	r27, 0x00	; 0
    1958:	eb e5       	ldi	r30, 0x5B	; 91
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	8f 77       	andi	r24, 0x7F	; 127
    1960:	8c 93       	st	X, r24
    1962:	09 c0       	rjmp	.+18     	; 0x1976 <EXTI_u8EXTDisable+0x6a>
		
		case EXT2:
 
           	/* DisABLE EXTI2  */   
		
		     CLR_BIT(EXTI_u8_GICR,INT2);
    1964:	ab e5       	ldi	r26, 0x5B	; 91
    1966:	b0 e0       	ldi	r27, 0x00	; 0
    1968:	eb e5       	ldi	r30, 0x5B	; 91
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	8f 7d       	andi	r24, 0xDF	; 223
    1970:	8c 93       	st	X, r24
    1972:	01 c0       	rjmp	.+2      	; 0x1976 <EXTI_u8EXTDisable+0x6a>
         break ;
		
		default:  
			
			local_u8Error_state =STD_TYPES_NOK ;
    1974:	19 82       	std	Y+1, r1	; 0x01
	}
	
	
	return local_u8Error_state;
    1976:	89 81       	ldd	r24, Y+1	; 0x01
	
	
}
    1978:	0f 90       	pop	r0
    197a:	0f 90       	pop	r0
    197c:	0f 90       	pop	r0
    197e:	0f 90       	pop	r0
    1980:	cf 91       	pop	r28
    1982:	df 91       	pop	r29
    1984:	08 95       	ret

00001986 <__vector_1>:
/* prototype for ISR of EXTI0*/

void __vector_1(void) __attribute__((signal));

void __vector_1(void){
    1986:	1f 92       	push	r1
    1988:	0f 92       	push	r0
    198a:	0f b6       	in	r0, 0x3f	; 63
    198c:	0f 92       	push	r0
    198e:	11 24       	eor	r1, r1
    1990:	2f 93       	push	r18
    1992:	3f 93       	push	r19
    1994:	4f 93       	push	r20
    1996:	5f 93       	push	r21
    1998:	6f 93       	push	r22
    199a:	7f 93       	push	r23
    199c:	8f 93       	push	r24
    199e:	9f 93       	push	r25
    19a0:	af 93       	push	r26
    19a2:	bf 93       	push	r27
    19a4:	ef 93       	push	r30
    19a6:	ff 93       	push	r31
    19a8:	df 93       	push	r29
    19aa:	cf 93       	push	r28
    19ac:	cd b7       	in	r28, 0x3d	; 61
    19ae:	de b7       	in	r29, 0x3e	; 62
  if(EXTI_APFEXTI[EXT0] != NULL){	
    19b0:	80 91 68 01 	lds	r24, 0x0168
    19b4:	90 91 69 01 	lds	r25, 0x0169
    19b8:	00 97       	sbiw	r24, 0x00	; 0
    19ba:	29 f0       	breq	.+10     	; 0x19c6 <__vector_1+0x40>
  EXTI_APFEXTI[0]();
    19bc:	e0 91 68 01 	lds	r30, 0x0168
    19c0:	f0 91 69 01 	lds	r31, 0x0169
    19c4:	09 95       	icall
  }
	
}
    19c6:	cf 91       	pop	r28
    19c8:	df 91       	pop	r29
    19ca:	ff 91       	pop	r31
    19cc:	ef 91       	pop	r30
    19ce:	bf 91       	pop	r27
    19d0:	af 91       	pop	r26
    19d2:	9f 91       	pop	r25
    19d4:	8f 91       	pop	r24
    19d6:	7f 91       	pop	r23
    19d8:	6f 91       	pop	r22
    19da:	5f 91       	pop	r21
    19dc:	4f 91       	pop	r20
    19de:	3f 91       	pop	r19
    19e0:	2f 91       	pop	r18
    19e2:	0f 90       	pop	r0
    19e4:	0f be       	out	0x3f, r0	; 63
    19e6:	0f 90       	pop	r0
    19e8:	1f 90       	pop	r1
    19ea:	18 95       	reti

000019ec <__vector_2>:

 /*prototype for ISR of EXTI1*/

void __vector_2(void) __attribute__((signal));

void __vector_2(void){
    19ec:	1f 92       	push	r1
    19ee:	0f 92       	push	r0
    19f0:	0f b6       	in	r0, 0x3f	; 63
    19f2:	0f 92       	push	r0
    19f4:	11 24       	eor	r1, r1
    19f6:	2f 93       	push	r18
    19f8:	3f 93       	push	r19
    19fa:	4f 93       	push	r20
    19fc:	5f 93       	push	r21
    19fe:	6f 93       	push	r22
    1a00:	7f 93       	push	r23
    1a02:	8f 93       	push	r24
    1a04:	9f 93       	push	r25
    1a06:	af 93       	push	r26
    1a08:	bf 93       	push	r27
    1a0a:	ef 93       	push	r30
    1a0c:	ff 93       	push	r31
    1a0e:	df 93       	push	r29
    1a10:	cf 93       	push	r28
    1a12:	cd b7       	in	r28, 0x3d	; 61
    1a14:	de b7       	in	r29, 0x3e	; 62
	
   if(EXTI_APFEXTI[EXT1] != NULL){	
    1a16:	80 91 6a 01 	lds	r24, 0x016A
    1a1a:	90 91 6b 01 	lds	r25, 0x016B
    1a1e:	00 97       	sbiw	r24, 0x00	; 0
    1a20:	29 f0       	breq	.+10     	; 0x1a2c <__vector_2+0x40>
      EXTI_APFEXTI[1]();}
    1a22:	e0 91 6a 01 	lds	r30, 0x016A
    1a26:	f0 91 6b 01 	lds	r31, 0x016B
    1a2a:	09 95       	icall
}
    1a2c:	cf 91       	pop	r28
    1a2e:	df 91       	pop	r29
    1a30:	ff 91       	pop	r31
    1a32:	ef 91       	pop	r30
    1a34:	bf 91       	pop	r27
    1a36:	af 91       	pop	r26
    1a38:	9f 91       	pop	r25
    1a3a:	8f 91       	pop	r24
    1a3c:	7f 91       	pop	r23
    1a3e:	6f 91       	pop	r22
    1a40:	5f 91       	pop	r21
    1a42:	4f 91       	pop	r20
    1a44:	3f 91       	pop	r19
    1a46:	2f 91       	pop	r18
    1a48:	0f 90       	pop	r0
    1a4a:	0f be       	out	0x3f, r0	; 63
    1a4c:	0f 90       	pop	r0
    1a4e:	1f 90       	pop	r1
    1a50:	18 95       	reti

00001a52 <__vector_3>:

/* prototype for ISR of EXTI2*/

void __vector_3(void) __attribute__((signal));

void __vector_3(void){
    1a52:	1f 92       	push	r1
    1a54:	0f 92       	push	r0
    1a56:	0f b6       	in	r0, 0x3f	; 63
    1a58:	0f 92       	push	r0
    1a5a:	11 24       	eor	r1, r1
    1a5c:	2f 93       	push	r18
    1a5e:	3f 93       	push	r19
    1a60:	4f 93       	push	r20
    1a62:	5f 93       	push	r21
    1a64:	6f 93       	push	r22
    1a66:	7f 93       	push	r23
    1a68:	8f 93       	push	r24
    1a6a:	9f 93       	push	r25
    1a6c:	af 93       	push	r26
    1a6e:	bf 93       	push	r27
    1a70:	ef 93       	push	r30
    1a72:	ff 93       	push	r31
    1a74:	df 93       	push	r29
    1a76:	cf 93       	push	r28
    1a78:	cd b7       	in	r28, 0x3d	; 61
    1a7a:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_APFEXTI[EXT2] != NULL){	 // to avoid willd pointer 
    1a7c:	80 91 6c 01 	lds	r24, 0x016C
    1a80:	90 91 6d 01 	lds	r25, 0x016D
    1a84:	00 97       	sbiw	r24, 0x00	; 0
    1a86:	29 f0       	breq	.+10     	; 0x1a92 <__vector_3+0x40>
           EXTI_APFEXTI[2]();}
    1a88:	e0 91 6c 01 	lds	r30, 0x016C
    1a8c:	f0 91 6d 01 	lds	r31, 0x016D
    1a90:	09 95       	icall
	
}
    1a92:	cf 91       	pop	r28
    1a94:	df 91       	pop	r29
    1a96:	ff 91       	pop	r31
    1a98:	ef 91       	pop	r30
    1a9a:	bf 91       	pop	r27
    1a9c:	af 91       	pop	r26
    1a9e:	9f 91       	pop	r25
    1aa0:	8f 91       	pop	r24
    1aa2:	7f 91       	pop	r23
    1aa4:	6f 91       	pop	r22
    1aa6:	5f 91       	pop	r21
    1aa8:	4f 91       	pop	r20
    1aaa:	3f 91       	pop	r19
    1aac:	2f 91       	pop	r18
    1aae:	0f 90       	pop	r0
    1ab0:	0f be       	out	0x3f, r0	; 63
    1ab2:	0f 90       	pop	r0
    1ab4:	1f 90       	pop	r1
    1ab6:	18 95       	reti

00001ab8 <GI_voidEnable>:
#include "GLOPAL_INT.h"

#define  SREG             *((volatile u8 *)(0x5f))


void  GI_voidEnable(void){
    1ab8:	df 93       	push	r29
    1aba:	cf 93       	push	r28
    1abc:	cd b7       	in	r28, 0x3d	; 61
    1abe:	de b7       	in	r29, 0x3e	; 62
/* ENABLE  GIE */

SET_BIT(SREG,7);	
    1ac0:	af e5       	ldi	r26, 0x5F	; 95
    1ac2:	b0 e0       	ldi	r27, 0x00	; 0
    1ac4:	ef e5       	ldi	r30, 0x5F	; 95
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	80 68       	ori	r24, 0x80	; 128
    1acc:	8c 93       	st	X, r24
	
	
}
    1ace:	cf 91       	pop	r28
    1ad0:	df 91       	pop	r29
    1ad2:	08 95       	ret

00001ad4 <GI_voidDisAble>:
void  GI_voidDisAble(void){
    1ad4:	df 93       	push	r29
    1ad6:	cf 93       	push	r28
    1ad8:	cd b7       	in	r28, 0x3d	; 61
    1ada:	de b7       	in	r29, 0x3e	; 62
	
	CLR_BIT(SREG,7);
    1adc:	af e5       	ldi	r26, 0x5F	; 95
    1ade:	b0 e0       	ldi	r27, 0x00	; 0
    1ae0:	ef e5       	ldi	r30, 0x5F	; 95
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	8f 77       	andi	r24, 0x7F	; 127
    1ae8:	8c 93       	st	X, r24
	
    1aea:	cf 91       	pop	r28
    1aec:	df 91       	pop	r29
    1aee:	08 95       	ret

00001af0 <TIMER0_voidInit>:
static void (*TIMERS_pvCallBackFunc[16])(void) = {NULL} ;  /* we have 8 interrupt sources in timer  */


/*******************************************************************************************************************/
void TIMER0_voidInit(void)
{
    1af0:	df 93       	push	r29
    1af2:	cf 93       	push	r28
    1af4:	cd b7       	in	r28, 0x3d	; 61
    1af6:	de b7       	in	r29, 0x3e	; 62
	/*Set Configurable Modes*/
		#if TIMER0_WAVEFORM_GENERATION_MODE == TIMER_NORMAL_MODE

			/*Initialize Waveform Generation Mode as Normal Mode*/
			CLR_BIT(TCCR0 , TCCR0_WGM00) ;
    1af8:	a3 e5       	ldi	r26, 0x53	; 83
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	e3 e5       	ldi	r30, 0x53	; 83
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	8f 7b       	andi	r24, 0xBF	; 191
    1b04:	8c 93       	st	X, r24
			CLR_BIT(TCCR0 , TCCR0_WGM01) ;
    1b06:	a3 e5       	ldi	r26, 0x53	; 83
    1b08:	b0 e0       	ldi	r27, 0x00	; 0
    1b0a:	e3 e5       	ldi	r30, 0x53	; 83
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	87 7f       	andi	r24, 0xF7	; 247
    1b12:	8c 93       	st	X, r24

			/*Set the Required Preload Value*/
			TCNT0 = TIMER0_PRELOAD_VAL ;
    1b14:	e2 e5       	ldi	r30, 0x52	; 82
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	80 ec       	ldi	r24, 0xC0	; 192
    1b1a:	80 83       	st	Z, r24

			/*Timer0 Overflow Interrupt Enable*/
			#if TIMER0_OVERFLOW_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TOIE0) ;
    1b1c:	a9 e5       	ldi	r26, 0x59	; 89
    1b1e:	b0 e0       	ldi	r27, 0x00	; 0
    1b20:	e9 e5       	ldi	r30, 0x59	; 89
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	80 81       	ld	r24, Z
    1b26:	8e 7f       	andi	r24, 0xFE	; 254
    1b28:	8c 93       	st	X, r24
			#error "Wrong TIMER0_WAVEFORM_GENERATION_MODE Config"

		#endif

	/*Set the Required Prescaler*/
	TCCR0 &= TIMER_PRESCALER_MASK ;
    1b2a:	a3 e5       	ldi	r26, 0x53	; 83
    1b2c:	b0 e0       	ldi	r27, 0x00	; 0
    1b2e:	e3 e5       	ldi	r30, 0x53	; 83
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	80 81       	ld	r24, Z
    1b34:	88 7f       	andi	r24, 0xF8	; 248
    1b36:	8c 93       	st	X, r24
	TCCR0 |= TIMER0_PRESCALER ;
    1b38:	a3 e5       	ldi	r26, 0x53	; 83
    1b3a:	b0 e0       	ldi	r27, 0x00	; 0
    1b3c:	e3 e5       	ldi	r30, 0x53	; 83
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	80 81       	ld	r24, Z
    1b42:	82 60       	ori	r24, 0x02	; 2
    1b44:	8c 93       	st	X, r24
}
    1b46:	cf 91       	pop	r28
    1b48:	df 91       	pop	r29
    1b4a:	08 95       	ret

00001b4c <TIMER1_voidInit>:

void TIMER1_voidInit(void)
{
    1b4c:	df 93       	push	r29
    1b4e:	cf 93       	push	r28
    1b50:	cd b7       	in	r28, 0x3d	; 61
    1b52:	de b7       	in	r29, 0x3e	; 62
	/*Set Configurable Modes*/

		#if TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_NORMAL_MODE

			/*Set Waveform generation mode as Normal mode */
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1b54:	af e4       	ldi	r26, 0x4F	; 79
    1b56:	b0 e0       	ldi	r27, 0x00	; 0
    1b58:	ef e4       	ldi	r30, 0x4F	; 79
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	80 81       	ld	r24, Z
    1b5e:	8e 7f       	andi	r24, 0xFE	; 254
    1b60:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
    1b62:	af e4       	ldi	r26, 0x4F	; 79
    1b64:	b0 e0       	ldi	r27, 0x00	; 0
    1b66:	ef e4       	ldi	r30, 0x4F	; 79
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	8d 7f       	andi	r24, 0xFD	; 253
    1b6e:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
    1b70:	ae e4       	ldi	r26, 0x4E	; 78
    1b72:	b0 e0       	ldi	r27, 0x00	; 0
    1b74:	ee e4       	ldi	r30, 0x4E	; 78
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	80 81       	ld	r24, Z
    1b7a:	87 7f       	andi	r24, 0xF7	; 247
    1b7c:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
    1b7e:	ae e4       	ldi	r26, 0x4E	; 78
    1b80:	b0 e0       	ldi	r27, 0x00	; 0
    1b82:	ee e4       	ldi	r30, 0x4E	; 78
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	80 81       	ld	r24, Z
    1b88:	8f 7e       	andi	r24, 0xEF	; 239
    1b8a:	8c 93       	st	X, r24

			/*Set the require Preload Value*/
			TCNT1 = TIMER1_PRELOAD_VAL ;
    1b8c:	ec e4       	ldi	r30, 0x4C	; 76
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	11 82       	std	Z+1, r1	; 0x01
    1b92:	10 82       	st	Z, r1

			/*Timer1 Overflow Interrupt Enable*/
			#if TIMER1_OVERFLOW_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TOIE1) ;
    1b94:	a9 e5       	ldi	r26, 0x59	; 89
    1b96:	b0 e0       	ldi	r27, 0x00	; 0
    1b98:	e9 e5       	ldi	r30, 0x59	; 89
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	80 81       	ld	r24, Z
    1b9e:	8b 7f       	andi	r24, 0xFB	; 251
    1ba0:	8c 93       	st	X, r24
		#else
			#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
		#endif

	/*Set the Required Prescaler*/
	TCCR1B &= TIMER_PRESCALER_MASK ;
    1ba2:	ae e4       	ldi	r26, 0x4E	; 78
    1ba4:	b0 e0       	ldi	r27, 0x00	; 0
    1ba6:	ee e4       	ldi	r30, 0x4E	; 78
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	80 81       	ld	r24, Z
    1bac:	88 7f       	andi	r24, 0xF8	; 248
    1bae:	8c 93       	st	X, r24
	TCCR1B |= TIMER1_PRESCALER ;
    1bb0:	ae e4       	ldi	r26, 0x4E	; 78
    1bb2:	b0 e0       	ldi	r27, 0x00	; 0
    1bb4:	ee e4       	ldi	r30, 0x4E	; 78
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	80 81       	ld	r24, Z
    1bba:	82 60       	ori	r24, 0x02	; 2
    1bbc:	8c 93       	st	X, r24


}
    1bbe:	cf 91       	pop	r28
    1bc0:	df 91       	pop	r29
    1bc2:	08 95       	ret

00001bc4 <TIMER2_voidInit>:

void TIMER2_voidInit(void)
{
    1bc4:	df 93       	push	r29
    1bc6:	cf 93       	push	r28
    1bc8:	cd b7       	in	r28, 0x3d	; 61
    1bca:	de b7       	in	r29, 0x3e	; 62
			OCR2 = TIMER2_CTC_VAL ;

		#elif TIMER2_WAVEFORM_GENERATION_MODE == TIMER_CTC_MODE

			/*Initialize Waveform Generation Mode as CTC Mode*/
			CLR_BIT(TCCR2 , TCCR2_WGM20) ;
    1bcc:	a5 e4       	ldi	r26, 0x45	; 69
    1bce:	b0 e0       	ldi	r27, 0x00	; 0
    1bd0:	e5 e4       	ldi	r30, 0x45	; 69
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	80 81       	ld	r24, Z
    1bd6:	8f 7b       	andi	r24, 0xBF	; 191
    1bd8:	8c 93       	st	X, r24
			SET_BIT(TCCR2 , TCCR2_WGM21) ;
    1bda:	a5 e4       	ldi	r26, 0x45	; 69
    1bdc:	b0 e0       	ldi	r27, 0x00	; 0
    1bde:	e5 e4       	ldi	r30, 0x45	; 69
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	80 81       	ld	r24, Z
    1be4:	88 60       	ori	r24, 0x08	; 8
    1be6:	8c 93       	st	X, r24

			/*Set the Required CTC Value*/
			OCR2 = TIMER2_CTC_VAL ;
    1be8:	e3 e4       	ldi	r30, 0x43	; 67
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	8d e7       	ldi	r24, 0x7D	; 125
    1bee:	80 83       	st	Z, r24

			/*Timer2 Compare Match Interrupt Enable*/
			#if TIMER2_CTC_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE2) ;
			#elif TIMER2_CTC_INTERRUPT == ENABLE
				SET_BIT(TIMSK , TIMSK_OCIE2) ;
    1bf0:	a9 e5       	ldi	r26, 0x59	; 89
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	e9 e5       	ldi	r30, 0x59	; 89
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	80 68       	ori	r24, 0x80	; 128
    1bfc:	8c 93       	st	X, r24
			#error "Wrong TIMER2_WAVEFORM_GENERATION_MODE Config"

		#endif

	/*Set the Required Prescaler*/
	TCCR2 &= TIMER_PRESCALER_MASK ;
    1bfe:	a5 e4       	ldi	r26, 0x45	; 69
    1c00:	b0 e0       	ldi	r27, 0x00	; 0
    1c02:	e5 e4       	ldi	r30, 0x45	; 69
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	80 81       	ld	r24, Z
    1c08:	88 7f       	andi	r24, 0xF8	; 248
    1c0a:	8c 93       	st	X, r24
	TCCR2 |= TIMER2_PRESCALER ;
    1c0c:	a5 e4       	ldi	r26, 0x45	; 69
    1c0e:	b0 e0       	ldi	r27, 0x00	; 0
    1c10:	e5 e4       	ldi	r30, 0x45	; 69
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	80 81       	ld	r24, Z
    1c16:	83 60       	ori	r24, 0x03	; 3
    1c18:	8c 93       	st	X, r24
}
    1c1a:	cf 91       	pop	r28
    1c1c:	df 91       	pop	r29
    1c1e:	08 95       	ret

00001c20 <TIMER0_voidSetPreload>:

/*******************************************************************************************************************/
void TIMER0_voidSetPreload (u8 Copy_u8Preload)
{
    1c20:	df 93       	push	r29
    1c22:	cf 93       	push	r28
    1c24:	0f 92       	push	r0
    1c26:	cd b7       	in	r28, 0x3d	; 61
    1c28:	de b7       	in	r29, 0x3e	; 62
    1c2a:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Preload ;
    1c2c:	e2 e5       	ldi	r30, 0x52	; 82
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	89 81       	ldd	r24, Y+1	; 0x01
    1c32:	80 83       	st	Z, r24
}
    1c34:	0f 90       	pop	r0
    1c36:	cf 91       	pop	r28
    1c38:	df 91       	pop	r29
    1c3a:	08 95       	ret

00001c3c <TIMER1_voidSetPreload>:

void TIMER1_voidSetPreload (u16 Copy_u16Preload)
{
    1c3c:	df 93       	push	r29
    1c3e:	cf 93       	push	r28
    1c40:	00 d0       	rcall	.+0      	; 0x1c42 <TIMER1_voidSetPreload+0x6>
    1c42:	cd b7       	in	r28, 0x3d	; 61
    1c44:	de b7       	in	r29, 0x3e	; 62
    1c46:	9a 83       	std	Y+2, r25	; 0x02
    1c48:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16Preload ;
    1c4a:	ec e4       	ldi	r30, 0x4C	; 76
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	89 81       	ldd	r24, Y+1	; 0x01
    1c50:	9a 81       	ldd	r25, Y+2	; 0x02
    1c52:	91 83       	std	Z+1, r25	; 0x01
    1c54:	80 83       	st	Z, r24
}
    1c56:	0f 90       	pop	r0
    1c58:	0f 90       	pop	r0
    1c5a:	cf 91       	pop	r28
    1c5c:	df 91       	pop	r29
    1c5e:	08 95       	ret

00001c60 <TIMER2_voidSetPreload>:


void TIMER2_voidSetPreload (u8 Copy_u8Preload)
{
    1c60:	df 93       	push	r29
    1c62:	cf 93       	push	r28
    1c64:	0f 92       	push	r0
    1c66:	cd b7       	in	r28, 0x3d	; 61
    1c68:	de b7       	in	r29, 0x3e	; 62
    1c6a:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = Copy_u8Preload ;
    1c6c:	e4 e4       	ldi	r30, 0x44	; 68
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	89 81       	ldd	r24, Y+1	; 0x01
    1c72:	80 83       	st	Z, r24
}
    1c74:	0f 90       	pop	r0
    1c76:	cf 91       	pop	r28
    1c78:	df 91       	pop	r29
    1c7a:	08 95       	ret

00001c7c <TIMER0_voidSetCTC>:

void TIMER0_voidSetCTC (u8 Copy_u8CTC)
{
    1c7c:	df 93       	push	r29
    1c7e:	cf 93       	push	r28
    1c80:	0f 92       	push	r0
    1c82:	cd b7       	in	r28, 0x3d	; 61
    1c84:	de b7       	in	r29, 0x3e	; 62
    1c86:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8CTC ;
    1c88:	ec e5       	ldi	r30, 0x5C	; 92
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	89 81       	ldd	r24, Y+1	; 0x01
    1c8e:	80 83       	st	Z, r24
}
    1c90:	0f 90       	pop	r0
    1c92:	cf 91       	pop	r28
    1c94:	df 91       	pop	r29
    1c96:	08 95       	ret

00001c98 <TIMER1_voidSetCTCA>:

void TIMER1_voidSetCTCA (u16 Copy_u16CTCA)
{
    1c98:	df 93       	push	r29
    1c9a:	cf 93       	push	r28
    1c9c:	00 d0       	rcall	.+0      	; 0x1c9e <TIMER1_voidSetCTCA+0x6>
    1c9e:	cd b7       	in	r28, 0x3d	; 61
    1ca0:	de b7       	in	r29, 0x3e	; 62
    1ca2:	9a 83       	std	Y+2, r25	; 0x02
    1ca4:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CTCA ;
    1ca6:	ea e4       	ldi	r30, 0x4A	; 74
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	89 81       	ldd	r24, Y+1	; 0x01
    1cac:	9a 81       	ldd	r25, Y+2	; 0x02
    1cae:	91 83       	std	Z+1, r25	; 0x01
    1cb0:	80 83       	st	Z, r24
}
    1cb2:	0f 90       	pop	r0
    1cb4:	0f 90       	pop	r0
    1cb6:	cf 91       	pop	r28
    1cb8:	df 91       	pop	r29
    1cba:	08 95       	ret

00001cbc <TIMER1_voidSetCTCB>:

void TIMER1_voidSetCTCB (u16 Copy_u16CTCB)
{
    1cbc:	df 93       	push	r29
    1cbe:	cf 93       	push	r28
    1cc0:	00 d0       	rcall	.+0      	; 0x1cc2 <TIMER1_voidSetCTCB+0x6>
    1cc2:	cd b7       	in	r28, 0x3d	; 61
    1cc4:	de b7       	in	r29, 0x3e	; 62
    1cc6:	9a 83       	std	Y+2, r25	; 0x02
    1cc8:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = Copy_u16CTCB ;
    1cca:	e8 e4       	ldi	r30, 0x48	; 72
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	89 81       	ldd	r24, Y+1	; 0x01
    1cd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd2:	91 83       	std	Z+1, r25	; 0x01
    1cd4:	80 83       	st	Z, r24
}
    1cd6:	0f 90       	pop	r0
    1cd8:	0f 90       	pop	r0
    1cda:	cf 91       	pop	r28
    1cdc:	df 91       	pop	r29
    1cde:	08 95       	ret

00001ce0 <TIMER2_voidSetCTC>:

void TIMER2_voidSetCTC (u8 Copy_u8CTC)
{
    1ce0:	df 93       	push	r29
    1ce2:	cf 93       	push	r28
    1ce4:	0f 92       	push	r0
    1ce6:	cd b7       	in	r28, 0x3d	; 61
    1ce8:	de b7       	in	r29, 0x3e	; 62
    1cea:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = Copy_u8CTC ;
    1cec:	e3 e4       	ldi	r30, 0x43	; 67
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	89 81       	ldd	r24, Y+1	; 0x01
    1cf2:	80 83       	st	Z, r24
}
    1cf4:	0f 90       	pop	r0
    1cf6:	cf 91       	pop	r28
    1cf8:	df 91       	pop	r29
    1cfa:	08 95       	ret

00001cfc <TIMER1_voidSetICR1>:

void TIMER1_voidSetICR1 (u16 Copy_u16ICR1)
{
    1cfc:	df 93       	push	r29
    1cfe:	cf 93       	push	r28
    1d00:	00 d0       	rcall	.+0      	; 0x1d02 <TIMER1_voidSetICR1+0x6>
    1d02:	cd b7       	in	r28, 0x3d	; 61
    1d04:	de b7       	in	r29, 0x3e	; 62
    1d06:	9a 83       	std	Y+2, r25	; 0x02
    1d08:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copy_u16ICR1 ;
    1d0a:	e6 e4       	ldi	r30, 0x46	; 70
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	89 81       	ldd	r24, Y+1	; 0x01
    1d10:	9a 81       	ldd	r25, Y+2	; 0x02
    1d12:	91 83       	std	Z+1, r25	; 0x01
    1d14:	80 83       	st	Z, r24
}
    1d16:	0f 90       	pop	r0
    1d18:	0f 90       	pop	r0
    1d1a:	cf 91       	pop	r28
    1d1c:	df 91       	pop	r29
    1d1e:	08 95       	ret

00001d20 <TIMER0_u8GetTimerCounterValue>:

u8 TIMER0_u8GetTimerCounterValue (void)
{
    1d20:	df 93       	push	r29
    1d22:	cf 93       	push	r28
    1d24:	cd b7       	in	r28, 0x3d	; 61
    1d26:	de b7       	in	r29, 0x3e	; 62
	return TCNT0 ;
    1d28:	e2 e5       	ldi	r30, 0x52	; 82
    1d2a:	f0 e0       	ldi	r31, 0x00	; 0
    1d2c:	80 81       	ld	r24, Z
}
    1d2e:	cf 91       	pop	r28
    1d30:	df 91       	pop	r29
    1d32:	08 95       	ret

00001d34 <TIMER1_u16GetTimerCounterValue>:

u16 TIMER1_u16GetTimerCounterValue (void)
{
    1d34:	df 93       	push	r29
    1d36:	cf 93       	push	r28
    1d38:	cd b7       	in	r28, 0x3d	; 61
    1d3a:	de b7       	in	r29, 0x3e	; 62
	return TCNT1 ;
    1d3c:	ec e4       	ldi	r30, 0x4C	; 76
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	80 81       	ld	r24, Z
    1d42:	91 81       	ldd	r25, Z+1	; 0x01
}
    1d44:	cf 91       	pop	r28
    1d46:	df 91       	pop	r29
    1d48:	08 95       	ret

00001d4a <TIMER2_u8GetTimerCounterValue>:

u8 TIMER2_u8GetTimerCounterValue (void)
{
    1d4a:	df 93       	push	r29
    1d4c:	cf 93       	push	r28
    1d4e:	cd b7       	in	r28, 0x3d	; 61
    1d50:	de b7       	in	r29, 0x3e	; 62
	return TCNT2 ;
    1d52:	e4 e4       	ldi	r30, 0x44	; 68
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
}
    1d58:	cf 91       	pop	r28
    1d5a:	df 91       	pop	r29
    1d5c:	08 95       	ret

00001d5e <TIMER_voidSetPWM>:

/*******************************************************************************************************************/

void TIMER_voidSetPWM(u16 Copy_u16CompareValue)
{
    1d5e:	df 93       	push	r29
    1d60:	cf 93       	push	r28
    1d62:	00 d0       	rcall	.+0      	; 0x1d64 <TIMER_voidSetPWM+0x6>
    1d64:	cd b7       	in	r28, 0x3d	; 61
    1d66:	de b7       	in	r29, 0x3e	; 62
    1d68:	9a 83       	std	Y+2, r25	; 0x02
    1d6a:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CompareValue;
    1d6c:	ea e4       	ldi	r30, 0x4A	; 74
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	89 81       	ldd	r24, Y+1	; 0x01
    1d72:	9a 81       	ldd	r25, Y+2	; 0x02
    1d74:	91 83       	std	Z+1, r25	; 0x01
    1d76:	80 83       	st	Z, r24
}
    1d78:	0f 90       	pop	r0
    1d7a:	0f 90       	pop	r0
    1d7c:	cf 91       	pop	r28
    1d7e:	df 91       	pop	r29
    1d80:	08 95       	ret

00001d82 <TIMER_voidICUInitEnable>:
/*
	Hint : This func for initial state of trigger (prebuild)
*/
void TIMER_voidICUInitEnable(void)

{
    1d82:	df 93       	push	r29
    1d84:	cf 93       	push	r28
    1d86:	cd b7       	in	r28, 0x3d	; 61
    1d88:	de b7       	in	r29, 0x3e	; 62
	/* Set trigger source as rising edge Initially  */
	#if (TIMER_u8_ICP_INIT_STATE == TIMER_u8_ICP_RAISING_EDGE)
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    1d8a:	ae e4       	ldi	r26, 0x4E	; 78
    1d8c:	b0 e0       	ldi	r27, 0x00	; 0
    1d8e:	ee e4       	ldi	r30, 0x4E	; 78
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	80 81       	ld	r24, Z
    1d94:	80 64       	ori	r24, 0x40	; 64
    1d96:	8c 93       	st	X, r24
	#elif(TIMER_u8_ICP_INIT_STATE == TIMER_u8_ICP_FALLING_EDGE)
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
	#endif
	
	/* Enable Interrupt of ICU */
	SET_BIT(TIMSK,TIMSK_TICIE1);
    1d98:	a9 e5       	ldi	r26, 0x59	; 89
    1d9a:	b0 e0       	ldi	r27, 0x00	; 0
    1d9c:	e9 e5       	ldi	r30, 0x59	; 89
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	80 62       	ori	r24, 0x20	; 32
    1da4:	8c 93       	st	X, r24
}
    1da6:	cf 91       	pop	r28
    1da8:	df 91       	pop	r29
    1daa:	08 95       	ret

00001dac <TIMER_voidICUSetTriggerEdge>:
	Options :-
	 1- TIMER_u8_ICP_RAISING_EDGE
	 2- TIMER_u8_ICP_FALLING_EDGE
*/
u8 TIMER_voidICUSetTriggerEdge(u8 Copy_u8Edge)
{
    1dac:	df 93       	push	r29
    1dae:	cf 93       	push	r28
    1db0:	00 d0       	rcall	.+0      	; 0x1db2 <TIMER_voidICUSetTriggerEdge+0x6>
    1db2:	cd b7       	in	r28, 0x3d	; 61
    1db4:	de b7       	in	r29, 0x3e	; 62
    1db6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus = STD_TYPES_OK ;
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	89 83       	std	Y+1, r24	; 0x01
	
	/* Change The trigger source as Rising edge or Falling edge */
	if (Copy_u8Edge == TIMER_u8_ICP_RAISING_EDGE)
    1dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbe:	81 30       	cpi	r24, 0x01	; 1
    1dc0:	41 f4       	brne	.+16     	; 0x1dd2 <TIMER_voidICUSetTriggerEdge+0x26>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    1dc2:	ae e4       	ldi	r26, 0x4E	; 78
    1dc4:	b0 e0       	ldi	r27, 0x00	; 0
    1dc6:	ee e4       	ldi	r30, 0x4E	; 78
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	80 81       	ld	r24, Z
    1dcc:	80 64       	ori	r24, 0x40	; 64
    1dce:	8c 93       	st	X, r24
    1dd0:	0c c0       	rjmp	.+24     	; 0x1dea <TIMER_voidICUSetTriggerEdge+0x3e>
	}
	else if(Copy_u8Edge == TIMER_u8_ICP_FALLING_EDGE)
    1dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd4:	88 23       	and	r24, r24
    1dd6:	41 f4       	brne	.+16     	; 0x1de8 <TIMER_voidICUSetTriggerEdge+0x3c>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    1dd8:	ae e4       	ldi	r26, 0x4E	; 78
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	ee e4       	ldi	r30, 0x4E	; 78
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	8f 7b       	andi	r24, 0xBF	; 191
    1de4:	8c 93       	st	X, r24
    1de6:	01 c0       	rjmp	.+2      	; 0x1dea <TIMER_voidICUSetTriggerEdge+0x3e>
	}
	else
	{
		Local_u8ErrorStatus = STD_TYPES_NOK ;
    1de8:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorStatus;
    1dea:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    1dec:	0f 90       	pop	r0
    1dee:	0f 90       	pop	r0
    1df0:	cf 91       	pop	r28
    1df2:	df 91       	pop	r29
    1df4:	08 95       	ret

00001df6 <TIMER_voidICUEnableInterrupt>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidICUEnableInterrupt(void)
{
    1df6:	df 93       	push	r29
    1df8:	cf 93       	push	r28
    1dfa:	cd b7       	in	r28, 0x3d	; 61
    1dfc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TICIE1);
    1dfe:	a9 e5       	ldi	r26, 0x59	; 89
    1e00:	b0 e0       	ldi	r27, 0x00	; 0
    1e02:	e9 e5       	ldi	r30, 0x59	; 89
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	80 81       	ld	r24, Z
    1e08:	80 62       	ori	r24, 0x20	; 32
    1e0a:	8c 93       	st	X, r24
}
    1e0c:	cf 91       	pop	r28
    1e0e:	df 91       	pop	r29
    1e10:	08 95       	ret

00001e12 <TIMER1_Clear_OVER_FLOW_FLAG>:

void TIMER1_Clear_OVER_FLOW_FLAG(void){
    1e12:	df 93       	push	r29
    1e14:	cf 93       	push	r28
    1e16:	cd b7       	in	r28, 0x3d	; 61
    1e18:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIFR,TIFR_TOV1);
    1e1a:	a8 e5       	ldi	r26, 0x58	; 88
    1e1c:	b0 e0       	ldi	r27, 0x00	; 0
    1e1e:	e8 e5       	ldi	r30, 0x58	; 88
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
    1e24:	84 60       	ori	r24, 0x04	; 4
    1e26:	8c 93       	st	X, r24
}
    1e28:	cf 91       	pop	r28
    1e2a:	df 91       	pop	r29
    1e2c:	08 95       	ret

00001e2e <TIMER1_Clear_ICR_FLAG>:

void TIMER1_Clear_ICR_FLAG(void){
    1e2e:	df 93       	push	r29
    1e30:	cf 93       	push	r28
    1e32:	cd b7       	in	r28, 0x3d	; 61
    1e34:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIFR,TIFR_ICF1);
    1e36:	a8 e5       	ldi	r26, 0x58	; 88
    1e38:	b0 e0       	ldi	r27, 0x00	; 0
    1e3a:	e8 e5       	ldi	r30, 0x58	; 88
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	80 81       	ld	r24, Z
    1e40:	80 62       	ori	r24, 0x20	; 32
    1e42:	8c 93       	st	X, r24
}
    1e44:	cf 91       	pop	r28
    1e46:	df 91       	pop	r29
    1e48:	08 95       	ret

00001e4a <TIMER_voidICUDisableInterrupt>:
//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidICUDisableInterrupt(void)
{
    1e4a:	df 93       	push	r29
    1e4c:	cf 93       	push	r28
    1e4e:	cd b7       	in	r28, 0x3d	; 61
    1e50:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    1e52:	a9 e5       	ldi	r26, 0x59	; 89
    1e54:	b0 e0       	ldi	r27, 0x00	; 0
    1e56:	e9 e5       	ldi	r30, 0x59	; 89
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	80 81       	ld	r24, Z
    1e5c:	8f 7d       	andi	r24, 0xDF	; 223
    1e5e:	8c 93       	st	X, r24
}
    1e60:	cf 91       	pop	r28
    1e62:	df 91       	pop	r29
    1e64:	08 95       	ret

00001e66 <TIMER_voidoverflowDisableInterrupt>:

void  TIMER_voidoverflowDisableInterrupt (void){
    1e66:	df 93       	push	r29
    1e68:	cf 93       	push	r28
    1e6a:	cd b7       	in	r28, 0x3d	; 61
    1e6c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , TIMSK_TOIE1) ;
    1e6e:	a9 e5       	ldi	r26, 0x59	; 89
    1e70:	b0 e0       	ldi	r27, 0x00	; 0
    1e72:	e9 e5       	ldi	r30, 0x59	; 89
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	80 81       	ld	r24, Z
    1e78:	8b 7f       	andi	r24, 0xFB	; 251
    1e7a:	8c 93       	st	X, r24
}
    1e7c:	cf 91       	pop	r28
    1e7e:	df 91       	pop	r29
    1e80:	08 95       	ret

00001e82 <TIMER_voidoverflowENableInterrupt>:

void  TIMER_voidoverflowENableInterrupt (void){
    1e82:	df 93       	push	r29
    1e84:	cf 93       	push	r28
    1e86:	cd b7       	in	r28, 0x3d	; 61
    1e88:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , TIMSK_TOIE1) ;
    1e8a:	a9 e5       	ldi	r26, 0x59	; 89
    1e8c:	b0 e0       	ldi	r27, 0x00	; 0
    1e8e:	e9 e5       	ldi	r30, 0x59	; 89
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	80 81       	ld	r24, Z
    1e94:	84 60       	ori	r24, 0x04	; 4
    1e96:	8c 93       	st	X, r24
}
    1e98:	cf 91       	pop	r28
    1e9a:	df 91       	pop	r29
    1e9c:	08 95       	ret

00001e9e <TIMER_u16GetICR>:
//----------------------------------------------------------------------------------------------------------------------------------------------------

u16 TIMER_u16GetICR(void)
{
    1e9e:	df 93       	push	r29
    1ea0:	cf 93       	push	r28
    1ea2:	cd b7       	in	r28, 0x3d	; 61
    1ea4:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1ea6:	e6 e4       	ldi	r30, 0x46	; 70
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	80 81       	ld	r24, Z
    1eac:	91 81       	ldd	r25, Z+1	; 0x01
}
    1eae:	cf 91       	pop	r28
    1eb0:	df 91       	pop	r29
    1eb2:	08 95       	ret

00001eb4 <TIMER_voidWDTSleep>:
*/

//----------------------------------------------------------------------------------------------------------------------------------------------------
/* Hint : prebuild config  */
void TIMER_voidWDTSleep(void)
{
    1eb4:	df 93       	push	r29
    1eb6:	cf 93       	push	r28
    1eb8:	cd b7       	in	r28, 0x3d	; 61
    1eba:	de b7       	in	r29, 0x3e	; 62
	/* CLear The Prescaler bits  */
	WDTCR &= WDT_PS_MASKING ;
    1ebc:	a1 e4       	ldi	r26, 0x41	; 65
    1ebe:	b0 e0       	ldi	r27, 0x00	; 0
    1ec0:	e1 e4       	ldi	r30, 0x41	; 65
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	80 81       	ld	r24, Z
    1ec6:	88 7f       	andi	r24, 0xF8	; 248
    1ec8:	8c 93       	st	X, r24
	/* Set The required prescaller */
	WDTCR |= WDT_PRESCALER ;
    1eca:	a1 e4       	ldi	r26, 0x41	; 65
    1ecc:	b0 e0       	ldi	r27, 0x00	; 0
    1ece:	e1 e4       	ldi	r30, 0x41	; 65
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	80 81       	ld	r24, Z
    1ed4:	86 60       	ori	r24, 0x06	; 6
    1ed6:	8c 93       	st	X, r24
}
    1ed8:	cf 91       	pop	r28
    1eda:	df 91       	pop	r29
    1edc:	08 95       	ret

00001ede <TIMER_voidWDTEnable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidWDTEnable (void)
{
    1ede:	df 93       	push	r29
    1ee0:	cf 93       	push	r28
    1ee2:	cd b7       	in	r28, 0x3d	; 61
    1ee4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT (WDTCR , WDTCR_WDE);
    1ee6:	a1 e4       	ldi	r26, 0x41	; 65
    1ee8:	b0 e0       	ldi	r27, 0x00	; 0
    1eea:	e1 e4       	ldi	r30, 0x41	; 65
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	80 81       	ld	r24, Z
    1ef0:	88 60       	ori	r24, 0x08	; 8
    1ef2:	8c 93       	st	X, r24
}
    1ef4:	cf 91       	pop	r28
    1ef6:	df 91       	pop	r29
    1ef8:	08 95       	ret

00001efa <TIMER_voidWDTDisable>:


//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidWDTDisable (void)
{
    1efa:	df 93       	push	r29
    1efc:	cf 93       	push	r28
    1efe:	cd b7       	in	r28, 0x3d	; 61
    1f00:	de b7       	in	r29, 0x3e	; 62
	/* Set Bit 3&4 at the same CLK cycle  */
	WDTCR |= 0b00011000 ;
    1f02:	a1 e4       	ldi	r26, 0x41	; 65
    1f04:	b0 e0       	ldi	r27, 0x00	; 0
    1f06:	e1 e4       	ldi	r30, 0x41	; 65
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	80 81       	ld	r24, Z
    1f0c:	88 61       	ori	r24, 0x18	; 24
    1f0e:	8c 93       	st	X, r24
	/* WDTCR_WDE = 0 */
	/* I don't care for any value in this Reg Cuz I want to Disable */
	WDTCR = 0 ;
    1f10:	e1 e4       	ldi	r30, 0x41	; 65
    1f12:	f0 e0       	ldi	r31, 0x00	; 0
    1f14:	10 82       	st	Z, r1
}
    1f16:	cf 91       	pop	r28
    1f18:	df 91       	pop	r29
    1f1a:	08 95       	ret

00001f1c <TIMER_u8SetCallBack>:

//----------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------------------------------

u8 TIMER_u8SetCallBack(void (*Copy_pvCallBackFunc)(void) , u8 Copy_u8VectorID)
{
    1f1c:	df 93       	push	r29
    1f1e:	cf 93       	push	r28
    1f20:	00 d0       	rcall	.+0      	; 0x1f22 <TIMER_u8SetCallBack+0x6>
    1f22:	00 d0       	rcall	.+0      	; 0x1f24 <TIMER_u8SetCallBack+0x8>
    1f24:	cd b7       	in	r28, 0x3d	; 61
    1f26:	de b7       	in	r29, 0x3e	; 62
    1f28:	9b 83       	std	Y+3, r25	; 0x03
    1f2a:	8a 83       	std	Y+2, r24	; 0x02
    1f2c:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK ;
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_pvCallBackFunc != NULL)
    1f32:	8a 81       	ldd	r24, Y+2	; 0x02
    1f34:	9b 81       	ldd	r25, Y+3	; 0x03
    1f36:	00 97       	sbiw	r24, 0x00	; 0
    1f38:	69 f0       	breq	.+26     	; 0x1f54 <TIMER_u8SetCallBack+0x38>
	{
		TIMERS_pvCallBackFunc[Copy_u8VectorID] = Copy_pvCallBackFunc ;
    1f3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f3c:	88 2f       	mov	r24, r24
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	88 0f       	add	r24, r24
    1f42:	99 1f       	adc	r25, r25
    1f44:	fc 01       	movw	r30, r24
    1f46:	e2 59       	subi	r30, 0x92	; 146
    1f48:	fe 4f       	sbci	r31, 0xFE	; 254
    1f4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f4e:	91 83       	std	Z+1, r25	; 0x01
    1f50:	80 83       	st	Z, r24
    1f52:	01 c0       	rjmp	.+2      	; 0x1f56 <TIMER_u8SetCallBack+0x3a>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK ;
    1f54:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState ;
    1f56:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f58:	0f 90       	pop	r0
    1f5a:	0f 90       	pop	r0
    1f5c:	0f 90       	pop	r0
    1f5e:	0f 90       	pop	r0
    1f60:	cf 91       	pop	r28
    1f62:	df 91       	pop	r29
    1f64:	08 95       	ret

00001f66 <__vector_11>:

/*TIMER0 Normal Mode ISR*/
void __vector_11 (void)		__attribute__((signal)) ;
void __vector_11 (void)
{
    1f66:	1f 92       	push	r1
    1f68:	0f 92       	push	r0
    1f6a:	0f b6       	in	r0, 0x3f	; 63
    1f6c:	0f 92       	push	r0
    1f6e:	11 24       	eor	r1, r1
    1f70:	2f 93       	push	r18
    1f72:	3f 93       	push	r19
    1f74:	4f 93       	push	r20
    1f76:	5f 93       	push	r21
    1f78:	6f 93       	push	r22
    1f7a:	7f 93       	push	r23
    1f7c:	8f 93       	push	r24
    1f7e:	9f 93       	push	r25
    1f80:	af 93       	push	r26
    1f82:	bf 93       	push	r27
    1f84:	ef 93       	push	r30
    1f86:	ff 93       	push	r31
    1f88:	df 93       	push	r29
    1f8a:	cf 93       	push	r28
    1f8c:	cd b7       	in	r28, 0x3d	; 61
    1f8e:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID] != NULL)
    1f90:	80 91 84 01 	lds	r24, 0x0184
    1f94:	90 91 85 01 	lds	r25, 0x0185
    1f98:	00 97       	sbiw	r24, 0x00	; 0
    1f9a:	29 f0       	breq	.+10     	; 0x1fa6 <__vector_11+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID]() ;
    1f9c:	e0 91 84 01 	lds	r30, 0x0184
    1fa0:	f0 91 85 01 	lds	r31, 0x0185
    1fa4:	09 95       	icall
	}
}
    1fa6:	cf 91       	pop	r28
    1fa8:	df 91       	pop	r29
    1faa:	ff 91       	pop	r31
    1fac:	ef 91       	pop	r30
    1fae:	bf 91       	pop	r27
    1fb0:	af 91       	pop	r26
    1fb2:	9f 91       	pop	r25
    1fb4:	8f 91       	pop	r24
    1fb6:	7f 91       	pop	r23
    1fb8:	6f 91       	pop	r22
    1fba:	5f 91       	pop	r21
    1fbc:	4f 91       	pop	r20
    1fbe:	3f 91       	pop	r19
    1fc0:	2f 91       	pop	r18
    1fc2:	0f 90       	pop	r0
    1fc4:	0f be       	out	0x3f, r0	; 63
    1fc6:	0f 90       	pop	r0
    1fc8:	1f 90       	pop	r1
    1fca:	18 95       	reti

00001fcc <__vector_10>:

/*TIMER0 CTC Mode ISR*/
void __vector_10 (void)		__attribute__((signal)) ;
void __vector_10 (void)
{
    1fcc:	1f 92       	push	r1
    1fce:	0f 92       	push	r0
    1fd0:	0f b6       	in	r0, 0x3f	; 63
    1fd2:	0f 92       	push	r0
    1fd4:	11 24       	eor	r1, r1
    1fd6:	2f 93       	push	r18
    1fd8:	3f 93       	push	r19
    1fda:	4f 93       	push	r20
    1fdc:	5f 93       	push	r21
    1fde:	6f 93       	push	r22
    1fe0:	7f 93       	push	r23
    1fe2:	8f 93       	push	r24
    1fe4:	9f 93       	push	r25
    1fe6:	af 93       	push	r26
    1fe8:	bf 93       	push	r27
    1fea:	ef 93       	push	r30
    1fec:	ff 93       	push	r31
    1fee:	df 93       	push	r29
    1ff0:	cf 93       	push	r28
    1ff2:	cd b7       	in	r28, 0x3d	; 61
    1ff4:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID] != NULL)
    1ff6:	80 91 82 01 	lds	r24, 0x0182
    1ffa:	90 91 83 01 	lds	r25, 0x0183
    1ffe:	00 97       	sbiw	r24, 0x00	; 0
    2000:	29 f0       	breq	.+10     	; 0x200c <__vector_10+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID]() ;
    2002:	e0 91 82 01 	lds	r30, 0x0182
    2006:	f0 91 83 01 	lds	r31, 0x0183
    200a:	09 95       	icall
	}
}
    200c:	cf 91       	pop	r28
    200e:	df 91       	pop	r29
    2010:	ff 91       	pop	r31
    2012:	ef 91       	pop	r30
    2014:	bf 91       	pop	r27
    2016:	af 91       	pop	r26
    2018:	9f 91       	pop	r25
    201a:	8f 91       	pop	r24
    201c:	7f 91       	pop	r23
    201e:	6f 91       	pop	r22
    2020:	5f 91       	pop	r21
    2022:	4f 91       	pop	r20
    2024:	3f 91       	pop	r19
    2026:	2f 91       	pop	r18
    2028:	0f 90       	pop	r0
    202a:	0f be       	out	0x3f, r0	; 63
    202c:	0f 90       	pop	r0
    202e:	1f 90       	pop	r1
    2030:	18 95       	reti

00002032 <__vector_9>:

/*TIMER1 Normal Mode ISR*/
void __vector_9 (void)		__attribute__((signal)) ;
void __vector_9 (void)
{
    2032:	1f 92       	push	r1
    2034:	0f 92       	push	r0
    2036:	0f b6       	in	r0, 0x3f	; 63
    2038:	0f 92       	push	r0
    203a:	11 24       	eor	r1, r1
    203c:	2f 93       	push	r18
    203e:	3f 93       	push	r19
    2040:	4f 93       	push	r20
    2042:	5f 93       	push	r21
    2044:	6f 93       	push	r22
    2046:	7f 93       	push	r23
    2048:	8f 93       	push	r24
    204a:	9f 93       	push	r25
    204c:	af 93       	push	r26
    204e:	bf 93       	push	r27
    2050:	ef 93       	push	r30
    2052:	ff 93       	push	r31
    2054:	df 93       	push	r29
    2056:	cf 93       	push	r28
    2058:	cd b7       	in	r28, 0x3d	; 61
    205a:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID] != NULL)
    205c:	80 91 80 01 	lds	r24, 0x0180
    2060:	90 91 81 01 	lds	r25, 0x0181
    2064:	00 97       	sbiw	r24, 0x00	; 0
    2066:	29 f0       	breq	.+10     	; 0x2072 <__vector_9+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID]() ;
    2068:	e0 91 80 01 	lds	r30, 0x0180
    206c:	f0 91 81 01 	lds	r31, 0x0181
    2070:	09 95       	icall
	}
}
    2072:	cf 91       	pop	r28
    2074:	df 91       	pop	r29
    2076:	ff 91       	pop	r31
    2078:	ef 91       	pop	r30
    207a:	bf 91       	pop	r27
    207c:	af 91       	pop	r26
    207e:	9f 91       	pop	r25
    2080:	8f 91       	pop	r24
    2082:	7f 91       	pop	r23
    2084:	6f 91       	pop	r22
    2086:	5f 91       	pop	r21
    2088:	4f 91       	pop	r20
    208a:	3f 91       	pop	r19
    208c:	2f 91       	pop	r18
    208e:	0f 90       	pop	r0
    2090:	0f be       	out	0x3f, r0	; 63
    2092:	0f 90       	pop	r0
    2094:	1f 90       	pop	r1
    2096:	18 95       	reti

00002098 <__vector_8>:

/*TIMER1 CTCB Mode ISR*/
void __vector_8 (void)		__attribute__((signal)) ;
void __vector_8 (void)
{
    2098:	1f 92       	push	r1
    209a:	0f 92       	push	r0
    209c:	0f b6       	in	r0, 0x3f	; 63
    209e:	0f 92       	push	r0
    20a0:	11 24       	eor	r1, r1
    20a2:	2f 93       	push	r18
    20a4:	3f 93       	push	r19
    20a6:	4f 93       	push	r20
    20a8:	5f 93       	push	r21
    20aa:	6f 93       	push	r22
    20ac:	7f 93       	push	r23
    20ae:	8f 93       	push	r24
    20b0:	9f 93       	push	r25
    20b2:	af 93       	push	r26
    20b4:	bf 93       	push	r27
    20b6:	ef 93       	push	r30
    20b8:	ff 93       	push	r31
    20ba:	df 93       	push	r29
    20bc:	cf 93       	push	r28
    20be:	cd b7       	in	r28, 0x3d	; 61
    20c0:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID] != NULL)
    20c2:	80 91 7e 01 	lds	r24, 0x017E
    20c6:	90 91 7f 01 	lds	r25, 0x017F
    20ca:	00 97       	sbiw	r24, 0x00	; 0
    20cc:	29 f0       	breq	.+10     	; 0x20d8 <__vector_8+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID]() ;
    20ce:	e0 91 7e 01 	lds	r30, 0x017E
    20d2:	f0 91 7f 01 	lds	r31, 0x017F
    20d6:	09 95       	icall
	}
}
    20d8:	cf 91       	pop	r28
    20da:	df 91       	pop	r29
    20dc:	ff 91       	pop	r31
    20de:	ef 91       	pop	r30
    20e0:	bf 91       	pop	r27
    20e2:	af 91       	pop	r26
    20e4:	9f 91       	pop	r25
    20e6:	8f 91       	pop	r24
    20e8:	7f 91       	pop	r23
    20ea:	6f 91       	pop	r22
    20ec:	5f 91       	pop	r21
    20ee:	4f 91       	pop	r20
    20f0:	3f 91       	pop	r19
    20f2:	2f 91       	pop	r18
    20f4:	0f 90       	pop	r0
    20f6:	0f be       	out	0x3f, r0	; 63
    20f8:	0f 90       	pop	r0
    20fa:	1f 90       	pop	r1
    20fc:	18 95       	reti

000020fe <__vector_7>:

/*TIMER1 CTCA Mode ISR*/
void __vector_7 (void)		__attribute__((signal)) ;
void __vector_7 (void)
{
    20fe:	1f 92       	push	r1
    2100:	0f 92       	push	r0
    2102:	0f b6       	in	r0, 0x3f	; 63
    2104:	0f 92       	push	r0
    2106:	11 24       	eor	r1, r1
    2108:	2f 93       	push	r18
    210a:	3f 93       	push	r19
    210c:	4f 93       	push	r20
    210e:	5f 93       	push	r21
    2110:	6f 93       	push	r22
    2112:	7f 93       	push	r23
    2114:	8f 93       	push	r24
    2116:	9f 93       	push	r25
    2118:	af 93       	push	r26
    211a:	bf 93       	push	r27
    211c:	ef 93       	push	r30
    211e:	ff 93       	push	r31
    2120:	df 93       	push	r29
    2122:	cf 93       	push	r28
    2124:	cd b7       	in	r28, 0x3d	; 61
    2126:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID] != NULL)
    2128:	80 91 7c 01 	lds	r24, 0x017C
    212c:	90 91 7d 01 	lds	r25, 0x017D
    2130:	00 97       	sbiw	r24, 0x00	; 0
    2132:	29 f0       	breq	.+10     	; 0x213e <__vector_7+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID]() ;
    2134:	e0 91 7c 01 	lds	r30, 0x017C
    2138:	f0 91 7d 01 	lds	r31, 0x017D
    213c:	09 95       	icall
	}
}
    213e:	cf 91       	pop	r28
    2140:	df 91       	pop	r29
    2142:	ff 91       	pop	r31
    2144:	ef 91       	pop	r30
    2146:	bf 91       	pop	r27
    2148:	af 91       	pop	r26
    214a:	9f 91       	pop	r25
    214c:	8f 91       	pop	r24
    214e:	7f 91       	pop	r23
    2150:	6f 91       	pop	r22
    2152:	5f 91       	pop	r21
    2154:	4f 91       	pop	r20
    2156:	3f 91       	pop	r19
    2158:	2f 91       	pop	r18
    215a:	0f 90       	pop	r0
    215c:	0f be       	out	0x3f, r0	; 63
    215e:	0f 90       	pop	r0
    2160:	1f 90       	pop	r1
    2162:	18 95       	reti

00002164 <__vector_6>:

/*TIMER1 ICU ISR*/
void __vector_6 (void)		__attribute__((signal)) ;
void __vector_6 (void)
{
    2164:	1f 92       	push	r1
    2166:	0f 92       	push	r0
    2168:	0f b6       	in	r0, 0x3f	; 63
    216a:	0f 92       	push	r0
    216c:	11 24       	eor	r1, r1
    216e:	2f 93       	push	r18
    2170:	3f 93       	push	r19
    2172:	4f 93       	push	r20
    2174:	5f 93       	push	r21
    2176:	6f 93       	push	r22
    2178:	7f 93       	push	r23
    217a:	8f 93       	push	r24
    217c:	9f 93       	push	r25
    217e:	af 93       	push	r26
    2180:	bf 93       	push	r27
    2182:	ef 93       	push	r30
    2184:	ff 93       	push	r31
    2186:	df 93       	push	r29
    2188:	cf 93       	push	r28
    218a:	cd b7       	in	r28, 0x3d	; 61
    218c:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID] != NULL)
    218e:	80 91 7a 01 	lds	r24, 0x017A
    2192:	90 91 7b 01 	lds	r25, 0x017B
    2196:	00 97       	sbiw	r24, 0x00	; 0
    2198:	29 f0       	breq	.+10     	; 0x21a4 <__vector_6+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID]() ;
    219a:	e0 91 7a 01 	lds	r30, 0x017A
    219e:	f0 91 7b 01 	lds	r31, 0x017B
    21a2:	09 95       	icall
	}
}
    21a4:	cf 91       	pop	r28
    21a6:	df 91       	pop	r29
    21a8:	ff 91       	pop	r31
    21aa:	ef 91       	pop	r30
    21ac:	bf 91       	pop	r27
    21ae:	af 91       	pop	r26
    21b0:	9f 91       	pop	r25
    21b2:	8f 91       	pop	r24
    21b4:	7f 91       	pop	r23
    21b6:	6f 91       	pop	r22
    21b8:	5f 91       	pop	r21
    21ba:	4f 91       	pop	r20
    21bc:	3f 91       	pop	r19
    21be:	2f 91       	pop	r18
    21c0:	0f 90       	pop	r0
    21c2:	0f be       	out	0x3f, r0	; 63
    21c4:	0f 90       	pop	r0
    21c6:	1f 90       	pop	r1
    21c8:	18 95       	reti

000021ca <__vector_5>:

/*TIMER2 Normal Mode ISR*/
void __vector_5 (void)		__attribute__((signal)) ;
void __vector_5 (void)
{
    21ca:	1f 92       	push	r1
    21cc:	0f 92       	push	r0
    21ce:	0f b6       	in	r0, 0x3f	; 63
    21d0:	0f 92       	push	r0
    21d2:	11 24       	eor	r1, r1
    21d4:	2f 93       	push	r18
    21d6:	3f 93       	push	r19
    21d8:	4f 93       	push	r20
    21da:	5f 93       	push	r21
    21dc:	6f 93       	push	r22
    21de:	7f 93       	push	r23
    21e0:	8f 93       	push	r24
    21e2:	9f 93       	push	r25
    21e4:	af 93       	push	r26
    21e6:	bf 93       	push	r27
    21e8:	ef 93       	push	r30
    21ea:	ff 93       	push	r31
    21ec:	df 93       	push	r29
    21ee:	cf 93       	push	r28
    21f0:	cd b7       	in	r28, 0x3d	; 61
    21f2:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID] != NULL)
    21f4:	80 91 78 01 	lds	r24, 0x0178
    21f8:	90 91 79 01 	lds	r25, 0x0179
    21fc:	00 97       	sbiw	r24, 0x00	; 0
    21fe:	29 f0       	breq	.+10     	; 0x220a <__vector_5+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID]() ;
    2200:	e0 91 78 01 	lds	r30, 0x0178
    2204:	f0 91 79 01 	lds	r31, 0x0179
    2208:	09 95       	icall
	}
}
    220a:	cf 91       	pop	r28
    220c:	df 91       	pop	r29
    220e:	ff 91       	pop	r31
    2210:	ef 91       	pop	r30
    2212:	bf 91       	pop	r27
    2214:	af 91       	pop	r26
    2216:	9f 91       	pop	r25
    2218:	8f 91       	pop	r24
    221a:	7f 91       	pop	r23
    221c:	6f 91       	pop	r22
    221e:	5f 91       	pop	r21
    2220:	4f 91       	pop	r20
    2222:	3f 91       	pop	r19
    2224:	2f 91       	pop	r18
    2226:	0f 90       	pop	r0
    2228:	0f be       	out	0x3f, r0	; 63
    222a:	0f 90       	pop	r0
    222c:	1f 90       	pop	r1
    222e:	18 95       	reti

00002230 <__vector_4>:

/*TIMER2 CTC Mode ISR*/
void __vector_4 (void)		__attribute__((signal)) ;
void __vector_4 (void)
{
    2230:	1f 92       	push	r1
    2232:	0f 92       	push	r0
    2234:	0f b6       	in	r0, 0x3f	; 63
    2236:	0f 92       	push	r0
    2238:	11 24       	eor	r1, r1
    223a:	2f 93       	push	r18
    223c:	3f 93       	push	r19
    223e:	4f 93       	push	r20
    2240:	5f 93       	push	r21
    2242:	6f 93       	push	r22
    2244:	7f 93       	push	r23
    2246:	8f 93       	push	r24
    2248:	9f 93       	push	r25
    224a:	af 93       	push	r26
    224c:	bf 93       	push	r27
    224e:	ef 93       	push	r30
    2250:	ff 93       	push	r31
    2252:	df 93       	push	r29
    2254:	cf 93       	push	r28
    2256:	cd b7       	in	r28, 0x3d	; 61
    2258:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID] != NULL)
    225a:	80 91 76 01 	lds	r24, 0x0176
    225e:	90 91 77 01 	lds	r25, 0x0177
    2262:	00 97       	sbiw	r24, 0x00	; 0
    2264:	29 f0       	breq	.+10     	; 0x2270 <__vector_4+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID]() ;
    2266:	e0 91 76 01 	lds	r30, 0x0176
    226a:	f0 91 77 01 	lds	r31, 0x0177
    226e:	09 95       	icall
	}
}
    2270:	cf 91       	pop	r28
    2272:	df 91       	pop	r29
    2274:	ff 91       	pop	r31
    2276:	ef 91       	pop	r30
    2278:	bf 91       	pop	r27
    227a:	af 91       	pop	r26
    227c:	9f 91       	pop	r25
    227e:	8f 91       	pop	r24
    2280:	7f 91       	pop	r23
    2282:	6f 91       	pop	r22
    2284:	5f 91       	pop	r21
    2286:	4f 91       	pop	r20
    2288:	3f 91       	pop	r19
    228a:	2f 91       	pop	r18
    228c:	0f 90       	pop	r0
    228e:	0f be       	out	0x3f, r0	; 63
    2290:	0f 90       	pop	r0
    2292:	1f 90       	pop	r1
    2294:	18 95       	reti

00002296 <ULTRA_INT>:

static u16 capt1=0, capt2 =0, ovf=0 , ov=0 ;
static u8 mask =0 ;
static u32 ticks =0;

void ULTRA_INT(void){
    2296:	df 93       	push	r29
    2298:	cf 93       	push	r28
    229a:	cd b7       	in	r28, 0x3d	; 61
    229c:	de b7       	in	r29, 0x3e	; 62
	TIMER_u8SetCallBack(&ISR_ultra,TIMER1_ICU_VECTOR_ID);
    229e:	86 e5       	ldi	r24, 0x56	; 86
    22a0:	93 e1       	ldi	r25, 0x13	; 19
    22a2:	66 e0       	ldi	r22, 0x06	; 6
    22a4:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <TIMER_u8SetCallBack>
	TIMER_u8SetCallBack(&ISR_OVER_FLOW,TIMER1_OVF_VECTOR_ID);
    22a8:	86 e4       	ldi	r24, 0x46	; 70
    22aa:	93 e1       	ldi	r25, 0x13	; 19
    22ac:	69 e0       	ldi	r22, 0x09	; 9
    22ae:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <TIMER_u8SetCallBack>
	GI_voidEnable();
    22b2:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <GI_voidEnable>
	TIMER1_voidInit();
    22b6:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <TIMER1_voidInit>
	TIMER_voidICUInitEnable();
    22ba:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <TIMER_voidICUInitEnable>
	TIMER_voidoverflowENableInterrupt();
    22be:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <TIMER_voidoverflowENableInterrupt>
	 TIMER2_voidSetPreload(0);
    22c2:	80 e0       	ldi	r24, 0x00	; 0
    22c4:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <TIMER2_voidSetPreload>
	 TIMER1_voidSetICR1(0);
    22c8:	80 e0       	ldi	r24, 0x00	; 0
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <TIMER1_voidSetICR1>

}
    22d0:	cf 91       	pop	r28
    22d2:	df 91       	pop	r29
    22d4:	08 95       	ret

000022d6 <ULTRA_distance>:

u8  ULTRA_distance(u32 *distance) {
    22d6:	ef 92       	push	r14
    22d8:	ff 92       	push	r15
    22da:	0f 93       	push	r16
    22dc:	1f 93       	push	r17
    22de:	df 93       	push	r29
    22e0:	cf 93       	push	r28
    22e2:	cd b7       	in	r28, 0x3d	; 61
    22e4:	de b7       	in	r29, 0x3e	; 62
    22e6:	a9 97       	sbiw	r28, 0x29	; 41
    22e8:	0f b6       	in	r0, 0x3f	; 63
    22ea:	f8 94       	cli
    22ec:	de bf       	out	0x3e, r29	; 62
    22ee:	0f be       	out	0x3f, r0	; 63
    22f0:	cd bf       	out	0x3d, r28	; 61
    22f2:	99 a7       	std	Y+41, r25	; 0x29
    22f4:	88 a7       	std	Y+40, r24	; 0x28
	u8 LOCAL_ERROR_STATE = STD_TYPES_OK ;
    22f6:	81 e0       	ldi	r24, 0x01	; 1
    22f8:	8f a3       	std	Y+39, r24	; 0x27
	 if(distance !=NULL){
    22fa:	88 a5       	ldd	r24, Y+40	; 0x28
    22fc:	99 a5       	ldd	r25, Y+41	; 0x29
    22fe:	00 97       	sbiw	r24, 0x00	; 0
    2300:	09 f4       	brne	.+2      	; 0x2304 <ULTRA_distance+0x2e>
    2302:	b5 c1       	rjmp	.+874    	; 0x266e <ULTRA_distance+0x398>
         DIO_u8SetPinValue(PORTD , PIN_7 , LOGIC_HIGH);
    2304:	84 e0       	ldi	r24, 0x04	; 4
    2306:	67 e0       	ldi	r22, 0x07	; 7
    2308:	41 e0       	ldi	r20, 0x01	; 1
    230a:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_u8SetPinValue>
    230e:	80 e0       	ldi	r24, 0x00	; 0
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	a0 e2       	ldi	r26, 0x20	; 32
    2314:	b1 e4       	ldi	r27, 0x41	; 65
    2316:	8b a3       	std	Y+35, r24	; 0x23
    2318:	9c a3       	std	Y+36, r25	; 0x24
    231a:	ad a3       	std	Y+37, r26	; 0x25
    231c:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    231e:	6b a1       	ldd	r22, Y+35	; 0x23
    2320:	7c a1       	ldd	r23, Y+36	; 0x24
    2322:	8d a1       	ldd	r24, Y+37	; 0x25
    2324:	9e a1       	ldd	r25, Y+38	; 0x26
    2326:	2b ea       	ldi	r18, 0xAB	; 171
    2328:	3a ea       	ldi	r19, 0xAA	; 170
    232a:	4a e2       	ldi	r20, 0x2A	; 42
    232c:	50 e4       	ldi	r21, 0x40	; 64
    232e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2332:	dc 01       	movw	r26, r24
    2334:	cb 01       	movw	r24, r22
    2336:	8f 8f       	std	Y+31, r24	; 0x1f
    2338:	98 a3       	std	Y+32, r25	; 0x20
    233a:	a9 a3       	std	Y+33, r26	; 0x21
    233c:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    233e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2340:	78 a1       	ldd	r23, Y+32	; 0x20
    2342:	89 a1       	ldd	r24, Y+33	; 0x21
    2344:	9a a1       	ldd	r25, Y+34	; 0x22
    2346:	20 e0       	ldi	r18, 0x00	; 0
    2348:	30 e0       	ldi	r19, 0x00	; 0
    234a:	40 e8       	ldi	r20, 0x80	; 128
    234c:	5f e3       	ldi	r21, 0x3F	; 63
    234e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2352:	88 23       	and	r24, r24
    2354:	1c f4       	brge	.+6      	; 0x235c <ULTRA_distance+0x86>
		__ticks = 1;
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	8e 8f       	std	Y+30, r24	; 0x1e
    235a:	91 c0       	rjmp	.+290    	; 0x247e <ULTRA_distance+0x1a8>
	else if (__tmp > 255)
    235c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    235e:	78 a1       	ldd	r23, Y+32	; 0x20
    2360:	89 a1       	ldd	r24, Y+33	; 0x21
    2362:	9a a1       	ldd	r25, Y+34	; 0x22
    2364:	20 e0       	ldi	r18, 0x00	; 0
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	4f e7       	ldi	r20, 0x7F	; 127
    236a:	53 e4       	ldi	r21, 0x43	; 67
    236c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2370:	18 16       	cp	r1, r24
    2372:	0c f0       	brlt	.+2      	; 0x2376 <ULTRA_distance+0xa0>
    2374:	7b c0       	rjmp	.+246    	; 0x246c <ULTRA_distance+0x196>
	{
		_delay_ms(__us / 1000.0);
    2376:	6b a1       	ldd	r22, Y+35	; 0x23
    2378:	7c a1       	ldd	r23, Y+36	; 0x24
    237a:	8d a1       	ldd	r24, Y+37	; 0x25
    237c:	9e a1       	ldd	r25, Y+38	; 0x26
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	4a e7       	ldi	r20, 0x7A	; 122
    2384:	54 e4       	ldi	r21, 0x44	; 68
    2386:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    238a:	dc 01       	movw	r26, r24
    238c:	cb 01       	movw	r24, r22
    238e:	8a 8f       	std	Y+26, r24	; 0x1a
    2390:	9b 8f       	std	Y+27, r25	; 0x1b
    2392:	ac 8f       	std	Y+28, r26	; 0x1c
    2394:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2396:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2398:	7b 8d       	ldd	r23, Y+27	; 0x1b
    239a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    239c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    239e:	20 e0       	ldi	r18, 0x00	; 0
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	4a ef       	ldi	r20, 0xFA	; 250
    23a4:	54 e4       	ldi	r21, 0x44	; 68
    23a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23aa:	dc 01       	movw	r26, r24
    23ac:	cb 01       	movw	r24, r22
    23ae:	8e 8b       	std	Y+22, r24	; 0x16
    23b0:	9f 8b       	std	Y+23, r25	; 0x17
    23b2:	a8 8f       	std	Y+24, r26	; 0x18
    23b4:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    23b6:	6e 89       	ldd	r22, Y+22	; 0x16
    23b8:	7f 89       	ldd	r23, Y+23	; 0x17
    23ba:	88 8d       	ldd	r24, Y+24	; 0x18
    23bc:	99 8d       	ldd	r25, Y+25	; 0x19
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	40 e8       	ldi	r20, 0x80	; 128
    23c4:	5f e3       	ldi	r21, 0x3F	; 63
    23c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23ca:	88 23       	and	r24, r24
    23cc:	2c f4       	brge	.+10     	; 0x23d8 <ULTRA_distance+0x102>
		__ticks = 1;
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	9d 8b       	std	Y+21, r25	; 0x15
    23d4:	8c 8b       	std	Y+20, r24	; 0x14
    23d6:	3f c0       	rjmp	.+126    	; 0x2456 <ULTRA_distance+0x180>
	else if (__tmp > 65535)
    23d8:	6e 89       	ldd	r22, Y+22	; 0x16
    23da:	7f 89       	ldd	r23, Y+23	; 0x17
    23dc:	88 8d       	ldd	r24, Y+24	; 0x18
    23de:	99 8d       	ldd	r25, Y+25	; 0x19
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	3f ef       	ldi	r19, 0xFF	; 255
    23e4:	4f e7       	ldi	r20, 0x7F	; 127
    23e6:	57 e4       	ldi	r21, 0x47	; 71
    23e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23ec:	18 16       	cp	r1, r24
    23ee:	4c f5       	brge	.+82     	; 0x2442 <ULTRA_distance+0x16c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    23f2:	7b 8d       	ldd	r23, Y+27	; 0x1b
    23f4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    23f6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    23f8:	20 e0       	ldi	r18, 0x00	; 0
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	40 e2       	ldi	r20, 0x20	; 32
    23fe:	51 e4       	ldi	r21, 0x41	; 65
    2400:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2404:	dc 01       	movw	r26, r24
    2406:	cb 01       	movw	r24, r22
    2408:	bc 01       	movw	r22, r24
    240a:	cd 01       	movw	r24, r26
    240c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2410:	dc 01       	movw	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	9d 8b       	std	Y+21, r25	; 0x15
    2416:	8c 8b       	std	Y+20, r24	; 0x14
    2418:	0f c0       	rjmp	.+30     	; 0x2438 <ULTRA_distance+0x162>
    241a:	88 ec       	ldi	r24, 0xC8	; 200
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	9b 8b       	std	Y+19, r25	; 0x13
    2420:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2422:	8a 89       	ldd	r24, Y+18	; 0x12
    2424:	9b 89       	ldd	r25, Y+19	; 0x13
    2426:	01 97       	sbiw	r24, 0x01	; 1
    2428:	f1 f7       	brne	.-4      	; 0x2426 <ULTRA_distance+0x150>
    242a:	9b 8b       	std	Y+19, r25	; 0x13
    242c:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    242e:	8c 89       	ldd	r24, Y+20	; 0x14
    2430:	9d 89       	ldd	r25, Y+21	; 0x15
    2432:	01 97       	sbiw	r24, 0x01	; 1
    2434:	9d 8b       	std	Y+21, r25	; 0x15
    2436:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2438:	8c 89       	ldd	r24, Y+20	; 0x14
    243a:	9d 89       	ldd	r25, Y+21	; 0x15
    243c:	00 97       	sbiw	r24, 0x00	; 0
    243e:	69 f7       	brne	.-38     	; 0x241a <ULTRA_distance+0x144>
    2440:	24 c0       	rjmp	.+72     	; 0x248a <ULTRA_distance+0x1b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2442:	6e 89       	ldd	r22, Y+22	; 0x16
    2444:	7f 89       	ldd	r23, Y+23	; 0x17
    2446:	88 8d       	ldd	r24, Y+24	; 0x18
    2448:	99 8d       	ldd	r25, Y+25	; 0x19
    244a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244e:	dc 01       	movw	r26, r24
    2450:	cb 01       	movw	r24, r22
    2452:	9d 8b       	std	Y+21, r25	; 0x15
    2454:	8c 8b       	std	Y+20, r24	; 0x14
    2456:	8c 89       	ldd	r24, Y+20	; 0x14
    2458:	9d 89       	ldd	r25, Y+21	; 0x15
    245a:	99 8b       	std	Y+17, r25	; 0x11
    245c:	88 8b       	std	Y+16, r24	; 0x10
    245e:	88 89       	ldd	r24, Y+16	; 0x10
    2460:	99 89       	ldd	r25, Y+17	; 0x11
    2462:	01 97       	sbiw	r24, 0x01	; 1
    2464:	f1 f7       	brne	.-4      	; 0x2462 <ULTRA_distance+0x18c>
    2466:	99 8b       	std	Y+17, r25	; 0x11
    2468:	88 8b       	std	Y+16, r24	; 0x10
    246a:	0f c0       	rjmp	.+30     	; 0x248a <ULTRA_distance+0x1b4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    246c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    246e:	78 a1       	ldd	r23, Y+32	; 0x20
    2470:	89 a1       	ldd	r24, Y+33	; 0x21
    2472:	9a a1       	ldd	r25, Y+34	; 0x22
    2474:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2478:	dc 01       	movw	r26, r24
    247a:	cb 01       	movw	r24, r22
    247c:	8e 8f       	std	Y+30, r24	; 0x1e
    247e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2480:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2482:	8f 85       	ldd	r24, Y+15	; 0x0f
    2484:	8a 95       	dec	r24
    2486:	f1 f7       	brne	.-4      	; 0x2484 <ULTRA_distance+0x1ae>
    2488:	8f 87       	std	Y+15, r24	; 0x0f
		 _delay_us(10);
		 DIO_u8SetPinValue(PORTD , PIN_7 , LOGIC_LOW);
    248a:	84 e0       	ldi	r24, 0x04	; 4
    248c:	67 e0       	ldi	r22, 0x07	; 7
    248e:	40 e0       	ldi	r20, 0x00	; 0
    2490:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_u8SetPinValue>
		 while( mask <2);
    2494:	80 91 96 01 	lds	r24, 0x0196
    2498:	82 30       	cpi	r24, 0x02	; 2
    249a:	e0 f3       	brcs	.-8      	; 0x2494 <ULTRA_distance+0x1be>
			mask =0 ;
    249c:	10 92 96 01 	sts	0x0196, r1
			ticks = (u32)capt2 + (u32)(ovf*65535)-(u32)capt1 ;
    24a0:	80 91 90 01 	lds	r24, 0x0190
    24a4:	90 91 91 01 	lds	r25, 0x0191
    24a8:	7c 01       	movw	r14, r24
    24aa:	00 e0       	ldi	r16, 0x00	; 0
    24ac:	10 e0       	ldi	r17, 0x00	; 0
    24ae:	80 91 92 01 	lds	r24, 0x0192
    24b2:	90 91 93 01 	lds	r25, 0x0193
    24b6:	cc 01       	movw	r24, r24
    24b8:	a0 e0       	ldi	r26, 0x00	; 0
    24ba:	b0 e0       	ldi	r27, 0x00	; 0
    24bc:	2f ef       	ldi	r18, 0xFF	; 255
    24be:	3f ef       	ldi	r19, 0xFF	; 255
    24c0:	40 e0       	ldi	r20, 0x00	; 0
    24c2:	50 e0       	ldi	r21, 0x00	; 0
    24c4:	bc 01       	movw	r22, r24
    24c6:	cd 01       	movw	r24, r26
    24c8:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__mulsi3>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	a8 01       	movw	r20, r16
    24d2:	97 01       	movw	r18, r14
    24d4:	28 0f       	add	r18, r24
    24d6:	39 1f       	adc	r19, r25
    24d8:	4a 1f       	adc	r20, r26
    24da:	5b 1f       	adc	r21, r27
    24dc:	80 91 8e 01 	lds	r24, 0x018E
    24e0:	90 91 8f 01 	lds	r25, 0x018F
    24e4:	cc 01       	movw	r24, r24
    24e6:	a0 e0       	ldi	r26, 0x00	; 0
    24e8:	b0 e0       	ldi	r27, 0x00	; 0
    24ea:	79 01       	movw	r14, r18
    24ec:	8a 01       	movw	r16, r20
    24ee:	e8 1a       	sub	r14, r24
    24f0:	f9 0a       	sbc	r15, r25
    24f2:	0a 0b       	sbc	r16, r26
    24f4:	1b 0b       	sbc	r17, r27
    24f6:	d8 01       	movw	r26, r16
    24f8:	c7 01       	movw	r24, r14
    24fa:	80 93 97 01 	sts	0x0197, r24
    24fe:	90 93 98 01 	sts	0x0198, r25
    2502:	a0 93 99 01 	sts	0x0199, r26
    2506:	b0 93 9a 01 	sts	0x019A, r27
			*distance = (u32)ticks/58 ;
    250a:	80 91 97 01 	lds	r24, 0x0197
    250e:	90 91 98 01 	lds	r25, 0x0198
    2512:	a0 91 99 01 	lds	r26, 0x0199
    2516:	b0 91 9a 01 	lds	r27, 0x019A
    251a:	2a e3       	ldi	r18, 0x3A	; 58
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	40 e0       	ldi	r20, 0x00	; 0
    2520:	50 e0       	ldi	r21, 0x00	; 0
    2522:	bc 01       	movw	r22, r24
    2524:	cd 01       	movw	r24, r26
    2526:	0e 94 01 1a 	call	0x3402	; 0x3402 <__udivmodsi4>
    252a:	da 01       	movw	r26, r20
    252c:	c9 01       	movw	r24, r18
    252e:	e8 a5       	ldd	r30, Y+40	; 0x28
    2530:	f9 a5       	ldd	r31, Y+41	; 0x29
    2532:	80 83       	st	Z, r24
    2534:	91 83       	std	Z+1, r25	; 0x01
    2536:	a2 83       	std	Z+2, r26	; 0x02
    2538:	b3 83       	std	Z+3, r27	; 0x03
             ov =0 ;
    253a:	10 92 95 01 	sts	0x0195, r1
    253e:	10 92 94 01 	sts	0x0194, r1
             ovf=0;
    2542:	10 92 93 01 	sts	0x0193, r1
    2546:	10 92 92 01 	sts	0x0192, r1
             capt1=0 ;
    254a:	10 92 8f 01 	sts	0x018F, r1
    254e:	10 92 8e 01 	sts	0x018E, r1
             capt2 =0 ;
    2552:	10 92 91 01 	sts	0x0191, r1
    2556:	10 92 90 01 	sts	0x0190, r1
             ticks =0 ;
    255a:	10 92 97 01 	sts	0x0197, r1
    255e:	10 92 98 01 	sts	0x0198, r1
    2562:	10 92 99 01 	sts	0x0199, r1
    2566:	10 92 9a 01 	sts	0x019A, r1
             TIMER1_Clear_ICR_FLAG();
    256a:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <TIMER1_Clear_ICR_FLAG>
             TIMER1_Clear_OVER_FLOW_FLAG();
    256e:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <TIMER1_Clear_OVER_FLOW_FLAG>
             TIMER_voidICUInitEnable();
    2572:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <TIMER_voidICUInitEnable>
             TIMER_voidoverflowENableInterrupt();
    2576:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <TIMER_voidoverflowENableInterrupt>
             TIMER2_voidSetPreload(0);
    257a:	80 e0       	ldi	r24, 0x00	; 0
    257c:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <TIMER2_voidSetPreload>
             TIMER1_voidSetICR1(0);
    2580:	80 e0       	ldi	r24, 0x00	; 0
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <TIMER1_voidSetICR1>
    2588:	80 e0       	ldi	r24, 0x00	; 0
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	a8 e4       	ldi	r26, 0x48	; 72
    258e:	b3 e4       	ldi	r27, 0x43	; 67
    2590:	8b 87       	std	Y+11, r24	; 0x0b
    2592:	9c 87       	std	Y+12, r25	; 0x0c
    2594:	ad 87       	std	Y+13, r26	; 0x0d
    2596:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2598:	6b 85       	ldd	r22, Y+11	; 0x0b
    259a:	7c 85       	ldd	r23, Y+12	; 0x0c
    259c:	8d 85       	ldd	r24, Y+13	; 0x0d
    259e:	9e 85       	ldd	r25, Y+14	; 0x0e
    25a0:	20 e0       	ldi	r18, 0x00	; 0
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	4a ef       	ldi	r20, 0xFA	; 250
    25a6:	54 e4       	ldi	r21, 0x44	; 68
    25a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ac:	dc 01       	movw	r26, r24
    25ae:	cb 01       	movw	r24, r22
    25b0:	8f 83       	std	Y+7, r24	; 0x07
    25b2:	98 87       	std	Y+8, r25	; 0x08
    25b4:	a9 87       	std	Y+9, r26	; 0x09
    25b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25b8:	6f 81       	ldd	r22, Y+7	; 0x07
    25ba:	78 85       	ldd	r23, Y+8	; 0x08
    25bc:	89 85       	ldd	r24, Y+9	; 0x09
    25be:	9a 85       	ldd	r25, Y+10	; 0x0a
    25c0:	20 e0       	ldi	r18, 0x00	; 0
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	40 e8       	ldi	r20, 0x80	; 128
    25c6:	5f e3       	ldi	r21, 0x3F	; 63
    25c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25cc:	88 23       	and	r24, r24
    25ce:	2c f4       	brge	.+10     	; 0x25da <ULTRA_distance+0x304>
		__ticks = 1;
    25d0:	81 e0       	ldi	r24, 0x01	; 1
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	9e 83       	std	Y+6, r25	; 0x06
    25d6:	8d 83       	std	Y+5, r24	; 0x05
    25d8:	3f c0       	rjmp	.+126    	; 0x2658 <ULTRA_distance+0x382>
	else if (__tmp > 65535)
    25da:	6f 81       	ldd	r22, Y+7	; 0x07
    25dc:	78 85       	ldd	r23, Y+8	; 0x08
    25de:	89 85       	ldd	r24, Y+9	; 0x09
    25e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25e2:	20 e0       	ldi	r18, 0x00	; 0
    25e4:	3f ef       	ldi	r19, 0xFF	; 255
    25e6:	4f e7       	ldi	r20, 0x7F	; 127
    25e8:	57 e4       	ldi	r21, 0x47	; 71
    25ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25ee:	18 16       	cp	r1, r24
    25f0:	4c f5       	brge	.+82     	; 0x2644 <ULTRA_distance+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    25f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    25f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    25f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    25fa:	20 e0       	ldi	r18, 0x00	; 0
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	40 e2       	ldi	r20, 0x20	; 32
    2600:	51 e4       	ldi	r21, 0x41	; 65
    2602:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2606:	dc 01       	movw	r26, r24
    2608:	cb 01       	movw	r24, r22
    260a:	bc 01       	movw	r22, r24
    260c:	cd 01       	movw	r24, r26
    260e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2612:	dc 01       	movw	r26, r24
    2614:	cb 01       	movw	r24, r22
    2616:	9e 83       	std	Y+6, r25	; 0x06
    2618:	8d 83       	std	Y+5, r24	; 0x05
    261a:	0f c0       	rjmp	.+30     	; 0x263a <ULTRA_distance+0x364>
    261c:	88 ec       	ldi	r24, 0xC8	; 200
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	9c 83       	std	Y+4, r25	; 0x04
    2622:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2624:	8b 81       	ldd	r24, Y+3	; 0x03
    2626:	9c 81       	ldd	r25, Y+4	; 0x04
    2628:	01 97       	sbiw	r24, 0x01	; 1
    262a:	f1 f7       	brne	.-4      	; 0x2628 <ULTRA_distance+0x352>
    262c:	9c 83       	std	Y+4, r25	; 0x04
    262e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2630:	8d 81       	ldd	r24, Y+5	; 0x05
    2632:	9e 81       	ldd	r25, Y+6	; 0x06
    2634:	01 97       	sbiw	r24, 0x01	; 1
    2636:	9e 83       	std	Y+6, r25	; 0x06
    2638:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    263a:	8d 81       	ldd	r24, Y+5	; 0x05
    263c:	9e 81       	ldd	r25, Y+6	; 0x06
    263e:	00 97       	sbiw	r24, 0x00	; 0
    2640:	69 f7       	brne	.-38     	; 0x261c <ULTRA_distance+0x346>
    2642:	16 c0       	rjmp	.+44     	; 0x2670 <ULTRA_distance+0x39a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2644:	6f 81       	ldd	r22, Y+7	; 0x07
    2646:	78 85       	ldd	r23, Y+8	; 0x08
    2648:	89 85       	ldd	r24, Y+9	; 0x09
    264a:	9a 85       	ldd	r25, Y+10	; 0x0a
    264c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2650:	dc 01       	movw	r26, r24
    2652:	cb 01       	movw	r24, r22
    2654:	9e 83       	std	Y+6, r25	; 0x06
    2656:	8d 83       	std	Y+5, r24	; 0x05
    2658:	8d 81       	ldd	r24, Y+5	; 0x05
    265a:	9e 81       	ldd	r25, Y+6	; 0x06
    265c:	9a 83       	std	Y+2, r25	; 0x02
    265e:	89 83       	std	Y+1, r24	; 0x01
    2660:	89 81       	ldd	r24, Y+1	; 0x01
    2662:	9a 81       	ldd	r25, Y+2	; 0x02
    2664:	01 97       	sbiw	r24, 0x01	; 1
    2666:	f1 f7       	brne	.-4      	; 0x2664 <ULTRA_distance+0x38e>
    2668:	9a 83       	std	Y+2, r25	; 0x02
    266a:	89 83       	std	Y+1, r24	; 0x01
    266c:	01 c0       	rjmp	.+2      	; 0x2670 <ULTRA_distance+0x39a>



	 }
	 else{
		 LOCAL_ERROR_STATE = STD_TYPES_NOK ;
    266e:	1f a2       	std	Y+39, r1	; 0x27
	 }

	return LOCAL_ERROR_STATE ;
    2670:	8f a1       	ldd	r24, Y+39	; 0x27
}
    2672:	a9 96       	adiw	r28, 0x29	; 41
    2674:	0f b6       	in	r0, 0x3f	; 63
    2676:	f8 94       	cli
    2678:	de bf       	out	0x3e, r29	; 62
    267a:	0f be       	out	0x3f, r0	; 63
    267c:	cd bf       	out	0x3d, r28	; 61
    267e:	cf 91       	pop	r28
    2680:	df 91       	pop	r29
    2682:	1f 91       	pop	r17
    2684:	0f 91       	pop	r16
    2686:	ff 90       	pop	r15
    2688:	ef 90       	pop	r14
    268a:	08 95       	ret

0000268c <ISR_OVER_FLOW>:

void ISR_OVER_FLOW(void){
    268c:	df 93       	push	r29
    268e:	cf 93       	push	r28
    2690:	cd b7       	in	r28, 0x3d	; 61
    2692:	de b7       	in	r29, 0x3e	; 62
	ov++ ;
    2694:	80 91 94 01 	lds	r24, 0x0194
    2698:	90 91 95 01 	lds	r25, 0x0195
    269c:	01 96       	adiw	r24, 0x01	; 1
    269e:	90 93 95 01 	sts	0x0195, r25
    26a2:	80 93 94 01 	sts	0x0194, r24
}
    26a6:	cf 91       	pop	r28
    26a8:	df 91       	pop	r29
    26aa:	08 95       	ret

000026ac <ISR_ultra>:

void ISR_ultra(void){
    26ac:	df 93       	push	r29
    26ae:	cf 93       	push	r28
    26b0:	cd b7       	in	r28, 0x3d	; 61
    26b2:	de b7       	in	r29, 0x3e	; 62

	if( mask ==0){
    26b4:	80 91 96 01 	lds	r24, 0x0196
    26b8:	88 23       	and	r24, r24
    26ba:	71 f4       	brne	.+28     	; 0x26d8 <ISR_ultra+0x2c>
		ov =0 ;
    26bc:	10 92 95 01 	sts	0x0195, r1
    26c0:	10 92 94 01 	sts	0x0194, r1
		capt1 = TIMER_u16GetICR();
    26c4:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <TIMER_u16GetICR>
    26c8:	90 93 8f 01 	sts	0x018F, r25
    26cc:	80 93 8e 01 	sts	0x018E, r24
		TIMER_voidICUSetTriggerEdge(TIMER_u8_ICP_FALLING_EDGE);
    26d0:	80 e0       	ldi	r24, 0x00	; 0
    26d2:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <TIMER_voidICUSetTriggerEdge>
    26d6:	19 c0       	rjmp	.+50     	; 0x270a <ISR_ultra+0x5e>

	}
	else if(  mask==1){
    26d8:	80 91 96 01 	lds	r24, 0x0196
    26dc:	81 30       	cpi	r24, 0x01	; 1
    26de:	a9 f4       	brne	.+42     	; 0x270a <ISR_ultra+0x5e>
		ovf = ov ;
    26e0:	80 91 94 01 	lds	r24, 0x0194
    26e4:	90 91 95 01 	lds	r25, 0x0195
    26e8:	90 93 93 01 	sts	0x0193, r25
    26ec:	80 93 92 01 	sts	0x0192, r24
		capt2 = TIMER_u16GetICR() ;
    26f0:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <TIMER_u16GetICR>
    26f4:	90 93 91 01 	sts	0x0191, r25
    26f8:	80 93 90 01 	sts	0x0190, r24
		TIMER_voidICUSetTriggerEdge(TIMER_u8_ICP_RAISING_EDGE);
    26fc:	81 e0       	ldi	r24, 0x01	; 1
    26fe:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <TIMER_voidICUSetTriggerEdge>
		TIMER_voidICUDisableInterrupt();
    2702:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <TIMER_voidICUDisableInterrupt>
		TIMER_voidoverflowDisableInterrupt();
    2706:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <TIMER_voidoverflowDisableInterrupt>

	}
	mask++;
    270a:	80 91 96 01 	lds	r24, 0x0196
    270e:	8f 5f       	subi	r24, 0xFF	; 255
    2710:	80 93 96 01 	sts	0x0196, r24


}
    2714:	cf 91       	pop	r28
    2716:	df 91       	pop	r29
    2718:	08 95       	ret

0000271a <main>:
#include "servo_int.h"
#include "ULTRA_INT.h"
#include "motion.h"
#include "metal_sens_int.h"

int main() {
    271a:	0f 93       	push	r16
    271c:	1f 93       	push	r17
    271e:	df 93       	push	r29
    2720:	cf 93       	push	r28
    2722:	cd b7       	in	r28, 0x3d	; 61
    2724:	de b7       	in	r29, 0x3e	; 62
    2726:	c1 56       	subi	r28, 0x61	; 97
    2728:	d0 40       	sbci	r29, 0x00	; 0
    272a:	0f b6       	in	r0, 0x3f	; 63
    272c:	f8 94       	cli
    272e:	de bf       	out	0x3e, r29	; 62
    2730:	0f be       	out	0x3f, r0	; 63
    2732:	cd bf       	out	0x3d, r28	; 61

    u32 distance, distanceright, distanceleft;
    u8 value;

    DIO_voidInit();   // Initialize DIO pins
    2734:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidInit>
    ULTRA_INT();      // Initialize Ultrasonic sensor
    2738:	0e 94 4b 11 	call	0x2296	; 0x2296 <ULTRA_INT>
    metaldetect();    // Initialize metal detection
    273c:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <metaldetect>
    setServoDuty(forward_servo);  // Set servo to move forward
    2740:	8c e2       	ldi	r24, 0x2C	; 44
    2742:	91 e0       	ldi	r25, 0x01	; 1
    2744:	0e 94 2a 18 	call	0x3054	; 0x3054 <setServoDuty>

    while (1) {
        ULTRA_distance(&distance);  // Measure distance ahead
    2748:	ce 01       	movw	r24, r28
    274a:	8b 5a       	subi	r24, 0xAB	; 171
    274c:	9f 4f       	sbci	r25, 0xFF	; 255
    274e:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <ULTRA_distance>

        if (distance > 70) {
    2752:	fe 01       	movw	r30, r28
    2754:	eb 5a       	subi	r30, 0xAB	; 171
    2756:	ff 4f       	sbci	r31, 0xFF	; 255
    2758:	80 81       	ld	r24, Z
    275a:	91 81       	ldd	r25, Z+1	; 0x01
    275c:	a2 81       	ldd	r26, Z+2	; 0x02
    275e:	b3 81       	ldd	r27, Z+3	; 0x03
    2760:	87 34       	cpi	r24, 0x47	; 71
    2762:	91 05       	cpc	r25, r1
    2764:	a1 05       	cpc	r26, r1
    2766:	b1 05       	cpc	r27, r1
    2768:	68 f0       	brcs	.+26     	; 0x2784 <main+0x6a>
            DIO_u8SetPinValue(PORTA, PIN_4, LOGIC_LOW);  // Clear obstacle signal
    276a:	81 e0       	ldi	r24, 0x01	; 1
    276c:	64 e0       	ldi	r22, 0x04	; 4
    276e:	40 e0       	ldi	r20, 0x00	; 0
    2770:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_u8SetPinValue>
            setServoDuty(forward_servo);  // Move servo forward
    2774:	8c e2       	ldi	r24, 0x2C	; 44
    2776:	91 e0       	ldi	r25, 0x01	; 1
    2778:	0e 94 2a 18 	call	0x3054	; 0x3054 <setServoDuty>
            move(forward);  // Move robot forward
    277c:	81 e0       	ldi	r24, 0x01	; 1
    277e:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <move>
    2782:	e2 cf       	rjmp	.-60     	; 0x2748 <main+0x2e>
        } else if (distance < 70) {
    2784:	fe 01       	movw	r30, r28
    2786:	eb 5a       	subi	r30, 0xAB	; 171
    2788:	ff 4f       	sbci	r31, 0xFF	; 255
    278a:	80 81       	ld	r24, Z
    278c:	91 81       	ldd	r25, Z+1	; 0x01
    278e:	a2 81       	ldd	r26, Z+2	; 0x02
    2790:	b3 81       	ldd	r27, Z+3	; 0x03
    2792:	86 34       	cpi	r24, 0x46	; 70
    2794:	91 05       	cpc	r25, r1
    2796:	a1 05       	cpc	r26, r1
    2798:	b1 05       	cpc	r27, r1
    279a:	b0 f6       	brcc	.-84     	; 0x2748 <main+0x2e>
            while (1) {
                move(stop);  // Stop the robot
    279c:	80 e0       	ldi	r24, 0x00	; 0
    279e:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <move>
                setServoDuty(right_servo);  // Turn servo to the right
    27a2:	8c ed       	ldi	r24, 0xDC	; 220
    27a4:	95 e0       	ldi	r25, 0x05	; 5
    27a6:	0e 94 2a 18 	call	0x3054	; 0x3054 <setServoDuty>
                ULTRA_distance(&distanceright);  // Measure right distance
    27aa:	ce 01       	movw	r24, r28
    27ac:	87 5a       	subi	r24, 0xA7	; 167
    27ae:	9f 4f       	sbci	r25, 0xFF	; 255
    27b0:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <ULTRA_distance>
    27b4:	fe 01       	movw	r30, r28
    27b6:	ef 5a       	subi	r30, 0xAF	; 175
    27b8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ba:	80 e0       	ldi	r24, 0x00	; 0
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	aa ef       	ldi	r26, 0xFA	; 250
    27c0:	b3 e4       	ldi	r27, 0x43	; 67
    27c2:	80 83       	st	Z, r24
    27c4:	91 83       	std	Z+1, r25	; 0x01
    27c6:	a2 83       	std	Z+2, r26	; 0x02
    27c8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ca:	8e 01       	movw	r16, r28
    27cc:	03 5b       	subi	r16, 0xB3	; 179
    27ce:	1f 4f       	sbci	r17, 0xFF	; 255
    27d0:	fe 01       	movw	r30, r28
    27d2:	ef 5a       	subi	r30, 0xAF	; 175
    27d4:	ff 4f       	sbci	r31, 0xFF	; 255
    27d6:	60 81       	ld	r22, Z
    27d8:	71 81       	ldd	r23, Z+1	; 0x01
    27da:	82 81       	ldd	r24, Z+2	; 0x02
    27dc:	93 81       	ldd	r25, Z+3	; 0x03
    27de:	20 e0       	ldi	r18, 0x00	; 0
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	4a ef       	ldi	r20, 0xFA	; 250
    27e4:	54 e4       	ldi	r21, 0x44	; 68
    27e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ea:	dc 01       	movw	r26, r24
    27ec:	cb 01       	movw	r24, r22
    27ee:	f8 01       	movw	r30, r16
    27f0:	80 83       	st	Z, r24
    27f2:	91 83       	std	Z+1, r25	; 0x01
    27f4:	a2 83       	std	Z+2, r26	; 0x02
    27f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27f8:	fe 01       	movw	r30, r28
    27fa:	e3 5b       	subi	r30, 0xB3	; 179
    27fc:	ff 4f       	sbci	r31, 0xFF	; 255
    27fe:	60 81       	ld	r22, Z
    2800:	71 81       	ldd	r23, Z+1	; 0x01
    2802:	82 81       	ldd	r24, Z+2	; 0x02
    2804:	93 81       	ldd	r25, Z+3	; 0x03
    2806:	20 e0       	ldi	r18, 0x00	; 0
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	40 e8       	ldi	r20, 0x80	; 128
    280c:	5f e3       	ldi	r21, 0x3F	; 63
    280e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2812:	88 23       	and	r24, r24
    2814:	44 f4       	brge	.+16     	; 0x2826 <main+0x10c>
		__ticks = 1;
    2816:	fe 01       	movw	r30, r28
    2818:	e5 5b       	subi	r30, 0xB5	; 181
    281a:	ff 4f       	sbci	r31, 0xFF	; 255
    281c:	81 e0       	ldi	r24, 0x01	; 1
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	91 83       	std	Z+1, r25	; 0x01
    2822:	80 83       	st	Z, r24
    2824:	64 c0       	rjmp	.+200    	; 0x28ee <main+0x1d4>
	else if (__tmp > 65535)
    2826:	fe 01       	movw	r30, r28
    2828:	e3 5b       	subi	r30, 0xB3	; 179
    282a:	ff 4f       	sbci	r31, 0xFF	; 255
    282c:	60 81       	ld	r22, Z
    282e:	71 81       	ldd	r23, Z+1	; 0x01
    2830:	82 81       	ldd	r24, Z+2	; 0x02
    2832:	93 81       	ldd	r25, Z+3	; 0x03
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	3f ef       	ldi	r19, 0xFF	; 255
    2838:	4f e7       	ldi	r20, 0x7F	; 127
    283a:	57 e4       	ldi	r21, 0x47	; 71
    283c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2840:	18 16       	cp	r1, r24
    2842:	0c f0       	brlt	.+2      	; 0x2846 <main+0x12c>
    2844:	43 c0       	rjmp	.+134    	; 0x28cc <main+0x1b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2846:	fe 01       	movw	r30, r28
    2848:	ef 5a       	subi	r30, 0xAF	; 175
    284a:	ff 4f       	sbci	r31, 0xFF	; 255
    284c:	60 81       	ld	r22, Z
    284e:	71 81       	ldd	r23, Z+1	; 0x01
    2850:	82 81       	ldd	r24, Z+2	; 0x02
    2852:	93 81       	ldd	r25, Z+3	; 0x03
    2854:	20 e0       	ldi	r18, 0x00	; 0
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	40 e2       	ldi	r20, 0x20	; 32
    285a:	51 e4       	ldi	r21, 0x41	; 65
    285c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2860:	dc 01       	movw	r26, r24
    2862:	cb 01       	movw	r24, r22
    2864:	8e 01       	movw	r16, r28
    2866:	05 5b       	subi	r16, 0xB5	; 181
    2868:	1f 4f       	sbci	r17, 0xFF	; 255
    286a:	bc 01       	movw	r22, r24
    286c:	cd 01       	movw	r24, r26
    286e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2872:	dc 01       	movw	r26, r24
    2874:	cb 01       	movw	r24, r22
    2876:	f8 01       	movw	r30, r16
    2878:	91 83       	std	Z+1, r25	; 0x01
    287a:	80 83       	st	Z, r24
    287c:	1f c0       	rjmp	.+62     	; 0x28bc <main+0x1a2>
    287e:	fe 01       	movw	r30, r28
    2880:	e7 5b       	subi	r30, 0xB7	; 183
    2882:	ff 4f       	sbci	r31, 0xFF	; 255
    2884:	88 ec       	ldi	r24, 0xC8	; 200
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	91 83       	std	Z+1, r25	; 0x01
    288a:	80 83       	st	Z, r24
    288c:	fe 01       	movw	r30, r28
    288e:	e7 5b       	subi	r30, 0xB7	; 183
    2890:	ff 4f       	sbci	r31, 0xFF	; 255
    2892:	80 81       	ld	r24, Z
    2894:	91 81       	ldd	r25, Z+1	; 0x01
    2896:	01 97       	sbiw	r24, 0x01	; 1
    2898:	f1 f7       	brne	.-4      	; 0x2896 <main+0x17c>
    289a:	fe 01       	movw	r30, r28
    289c:	e7 5b       	subi	r30, 0xB7	; 183
    289e:	ff 4f       	sbci	r31, 0xFF	; 255
    28a0:	91 83       	std	Z+1, r25	; 0x01
    28a2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28a4:	de 01       	movw	r26, r28
    28a6:	a5 5b       	subi	r26, 0xB5	; 181
    28a8:	bf 4f       	sbci	r27, 0xFF	; 255
    28aa:	fe 01       	movw	r30, r28
    28ac:	e5 5b       	subi	r30, 0xB5	; 181
    28ae:	ff 4f       	sbci	r31, 0xFF	; 255
    28b0:	80 81       	ld	r24, Z
    28b2:	91 81       	ldd	r25, Z+1	; 0x01
    28b4:	01 97       	sbiw	r24, 0x01	; 1
    28b6:	11 96       	adiw	r26, 0x01	; 1
    28b8:	9c 93       	st	X, r25
    28ba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28bc:	fe 01       	movw	r30, r28
    28be:	e5 5b       	subi	r30, 0xB5	; 181
    28c0:	ff 4f       	sbci	r31, 0xFF	; 255
    28c2:	80 81       	ld	r24, Z
    28c4:	91 81       	ldd	r25, Z+1	; 0x01
    28c6:	00 97       	sbiw	r24, 0x00	; 0
    28c8:	d1 f6       	brne	.-76     	; 0x287e <main+0x164>
    28ca:	27 c0       	rjmp	.+78     	; 0x291a <main+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28cc:	8e 01       	movw	r16, r28
    28ce:	05 5b       	subi	r16, 0xB5	; 181
    28d0:	1f 4f       	sbci	r17, 0xFF	; 255
    28d2:	fe 01       	movw	r30, r28
    28d4:	e3 5b       	subi	r30, 0xB3	; 179
    28d6:	ff 4f       	sbci	r31, 0xFF	; 255
    28d8:	60 81       	ld	r22, Z
    28da:	71 81       	ldd	r23, Z+1	; 0x01
    28dc:	82 81       	ldd	r24, Z+2	; 0x02
    28de:	93 81       	ldd	r25, Z+3	; 0x03
    28e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e4:	dc 01       	movw	r26, r24
    28e6:	cb 01       	movw	r24, r22
    28e8:	f8 01       	movw	r30, r16
    28ea:	91 83       	std	Z+1, r25	; 0x01
    28ec:	80 83       	st	Z, r24
    28ee:	de 01       	movw	r26, r28
    28f0:	a9 5b       	subi	r26, 0xB9	; 185
    28f2:	bf 4f       	sbci	r27, 0xFF	; 255
    28f4:	fe 01       	movw	r30, r28
    28f6:	e5 5b       	subi	r30, 0xB5	; 181
    28f8:	ff 4f       	sbci	r31, 0xFF	; 255
    28fa:	80 81       	ld	r24, Z
    28fc:	91 81       	ldd	r25, Z+1	; 0x01
    28fe:	8d 93       	st	X+, r24
    2900:	9c 93       	st	X, r25
    2902:	fe 01       	movw	r30, r28
    2904:	e9 5b       	subi	r30, 0xB9	; 185
    2906:	ff 4f       	sbci	r31, 0xFF	; 255
    2908:	80 81       	ld	r24, Z
    290a:	91 81       	ldd	r25, Z+1	; 0x01
    290c:	01 97       	sbiw	r24, 0x01	; 1
    290e:	f1 f7       	brne	.-4      	; 0x290c <main+0x1f2>
    2910:	fe 01       	movw	r30, r28
    2912:	e9 5b       	subi	r30, 0xB9	; 185
    2914:	ff 4f       	sbci	r31, 0xFF	; 255
    2916:	91 83       	std	Z+1, r25	; 0x01
    2918:	80 83       	st	Z, r24
                _delay_ms(500);

                setServoDuty(left_servo);  // Turn servo to the left
    291a:	82 e3       	ldi	r24, 0x32	; 50
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	0e 94 2a 18 	call	0x3054	; 0x3054 <setServoDuty>
                ULTRA_distance(&distanceleft);  // Measure left distance
    2922:	ce 01       	movw	r24, r28
    2924:	83 5a       	subi	r24, 0xA3	; 163
    2926:	9f 4f       	sbci	r25, 0xFF	; 255
    2928:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <ULTRA_distance>
    292c:	fe 01       	movw	r30, r28
    292e:	ed 5b       	subi	r30, 0xBD	; 189
    2930:	ff 4f       	sbci	r31, 0xFF	; 255
    2932:	80 e0       	ldi	r24, 0x00	; 0
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	aa ef       	ldi	r26, 0xFA	; 250
    2938:	b3 e4       	ldi	r27, 0x43	; 67
    293a:	80 83       	st	Z, r24
    293c:	91 83       	std	Z+1, r25	; 0x01
    293e:	a2 83       	std	Z+2, r26	; 0x02
    2940:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2942:	8e 01       	movw	r16, r28
    2944:	01 5c       	subi	r16, 0xC1	; 193
    2946:	1f 4f       	sbci	r17, 0xFF	; 255
    2948:	fe 01       	movw	r30, r28
    294a:	ed 5b       	subi	r30, 0xBD	; 189
    294c:	ff 4f       	sbci	r31, 0xFF	; 255
    294e:	60 81       	ld	r22, Z
    2950:	71 81       	ldd	r23, Z+1	; 0x01
    2952:	82 81       	ldd	r24, Z+2	; 0x02
    2954:	93 81       	ldd	r25, Z+3	; 0x03
    2956:	20 e0       	ldi	r18, 0x00	; 0
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	4a ef       	ldi	r20, 0xFA	; 250
    295c:	54 e4       	ldi	r21, 0x44	; 68
    295e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2962:	dc 01       	movw	r26, r24
    2964:	cb 01       	movw	r24, r22
    2966:	f8 01       	movw	r30, r16
    2968:	80 83       	st	Z, r24
    296a:	91 83       	std	Z+1, r25	; 0x01
    296c:	a2 83       	std	Z+2, r26	; 0x02
    296e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2970:	fe 01       	movw	r30, r28
    2972:	ff 96       	adiw	r30, 0x3f	; 63
    2974:	60 81       	ld	r22, Z
    2976:	71 81       	ldd	r23, Z+1	; 0x01
    2978:	82 81       	ldd	r24, Z+2	; 0x02
    297a:	93 81       	ldd	r25, Z+3	; 0x03
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	40 e8       	ldi	r20, 0x80	; 128
    2982:	5f e3       	ldi	r21, 0x3F	; 63
    2984:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2988:	88 23       	and	r24, r24
    298a:	2c f4       	brge	.+10     	; 0x2996 <main+0x27c>
		__ticks = 1;
    298c:	81 e0       	ldi	r24, 0x01	; 1
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	9e af       	std	Y+62, r25	; 0x3e
    2992:	8d af       	std	Y+61, r24	; 0x3d
    2994:	46 c0       	rjmp	.+140    	; 0x2a22 <main+0x308>
	else if (__tmp > 65535)
    2996:	fe 01       	movw	r30, r28
    2998:	ff 96       	adiw	r30, 0x3f	; 63
    299a:	60 81       	ld	r22, Z
    299c:	71 81       	ldd	r23, Z+1	; 0x01
    299e:	82 81       	ldd	r24, Z+2	; 0x02
    29a0:	93 81       	ldd	r25, Z+3	; 0x03
    29a2:	20 e0       	ldi	r18, 0x00	; 0
    29a4:	3f ef       	ldi	r19, 0xFF	; 255
    29a6:	4f e7       	ldi	r20, 0x7F	; 127
    29a8:	57 e4       	ldi	r21, 0x47	; 71
    29aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29ae:	18 16       	cp	r1, r24
    29b0:	64 f5       	brge	.+88     	; 0x2a0a <main+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29b2:	fe 01       	movw	r30, r28
    29b4:	ed 5b       	subi	r30, 0xBD	; 189
    29b6:	ff 4f       	sbci	r31, 0xFF	; 255
    29b8:	60 81       	ld	r22, Z
    29ba:	71 81       	ldd	r23, Z+1	; 0x01
    29bc:	82 81       	ldd	r24, Z+2	; 0x02
    29be:	93 81       	ldd	r25, Z+3	; 0x03
    29c0:	20 e0       	ldi	r18, 0x00	; 0
    29c2:	30 e0       	ldi	r19, 0x00	; 0
    29c4:	40 e2       	ldi	r20, 0x20	; 32
    29c6:	51 e4       	ldi	r21, 0x41	; 65
    29c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29cc:	dc 01       	movw	r26, r24
    29ce:	cb 01       	movw	r24, r22
    29d0:	bc 01       	movw	r22, r24
    29d2:	cd 01       	movw	r24, r26
    29d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d8:	dc 01       	movw	r26, r24
    29da:	cb 01       	movw	r24, r22
    29dc:	9e af       	std	Y+62, r25	; 0x3e
    29de:	8d af       	std	Y+61, r24	; 0x3d
    29e0:	0f c0       	rjmp	.+30     	; 0x2a00 <main+0x2e6>
    29e2:	88 ec       	ldi	r24, 0xC8	; 200
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	9c af       	std	Y+60, r25	; 0x3c
    29e8:	8b af       	std	Y+59, r24	; 0x3b
    29ea:	8b ad       	ldd	r24, Y+59	; 0x3b
    29ec:	9c ad       	ldd	r25, Y+60	; 0x3c
    29ee:	01 97       	sbiw	r24, 0x01	; 1
    29f0:	f1 f7       	brne	.-4      	; 0x29ee <main+0x2d4>
    29f2:	9c af       	std	Y+60, r25	; 0x3c
    29f4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f6:	8d ad       	ldd	r24, Y+61	; 0x3d
    29f8:	9e ad       	ldd	r25, Y+62	; 0x3e
    29fa:	01 97       	sbiw	r24, 0x01	; 1
    29fc:	9e af       	std	Y+62, r25	; 0x3e
    29fe:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a00:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a02:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a04:	00 97       	sbiw	r24, 0x00	; 0
    2a06:	69 f7       	brne	.-38     	; 0x29e2 <main+0x2c8>
    2a08:	16 c0       	rjmp	.+44     	; 0x2a36 <main+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a0a:	fe 01       	movw	r30, r28
    2a0c:	ff 96       	adiw	r30, 0x3f	; 63
    2a0e:	60 81       	ld	r22, Z
    2a10:	71 81       	ldd	r23, Z+1	; 0x01
    2a12:	82 81       	ldd	r24, Z+2	; 0x02
    2a14:	93 81       	ldd	r25, Z+3	; 0x03
    2a16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a1a:	dc 01       	movw	r26, r24
    2a1c:	cb 01       	movw	r24, r22
    2a1e:	9e af       	std	Y+62, r25	; 0x3e
    2a20:	8d af       	std	Y+61, r24	; 0x3d
    2a22:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a24:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a26:	9a af       	std	Y+58, r25	; 0x3a
    2a28:	89 af       	std	Y+57, r24	; 0x39
    2a2a:	89 ad       	ldd	r24, Y+57	; 0x39
    2a2c:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a2e:	01 97       	sbiw	r24, 0x01	; 1
    2a30:	f1 f7       	brne	.-4      	; 0x2a2e <main+0x314>
    2a32:	9a af       	std	Y+58, r25	; 0x3a
    2a34:	89 af       	std	Y+57, r24	; 0x39
                _delay_ms(500);

                setServoDuty(forward_servo);  // Reset servo to forward
    2a36:	8c e2       	ldi	r24, 0x2C	; 44
    2a38:	91 e0       	ldi	r25, 0x01	; 1
    2a3a:	0e 94 2a 18 	call	0x3054	; 0x3054 <setServoDuty>

                if (distanceleft > 70 || distanceright > 70) {
    2a3e:	fe 01       	movw	r30, r28
    2a40:	e3 5a       	subi	r30, 0xA3	; 163
    2a42:	ff 4f       	sbci	r31, 0xFF	; 255
    2a44:	80 81       	ld	r24, Z
    2a46:	91 81       	ldd	r25, Z+1	; 0x01
    2a48:	a2 81       	ldd	r26, Z+2	; 0x02
    2a4a:	b3 81       	ldd	r27, Z+3	; 0x03
    2a4c:	87 34       	cpi	r24, 0x47	; 71
    2a4e:	91 05       	cpc	r25, r1
    2a50:	a1 05       	cpc	r26, r1
    2a52:	b1 05       	cpc	r27, r1
    2a54:	68 f4       	brcc	.+26     	; 0x2a70 <main+0x356>
    2a56:	fe 01       	movw	r30, r28
    2a58:	e7 5a       	subi	r30, 0xA7	; 167
    2a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5c:	80 81       	ld	r24, Z
    2a5e:	91 81       	ldd	r25, Z+1	; 0x01
    2a60:	a2 81       	ldd	r26, Z+2	; 0x02
    2a62:	b3 81       	ldd	r27, Z+3	; 0x03
    2a64:	87 34       	cpi	r24, 0x47	; 71
    2a66:	91 05       	cpc	r25, r1
    2a68:	a1 05       	cpc	r26, r1
    2a6a:	b1 05       	cpc	r27, r1
    2a6c:	08 f4       	brcc	.+2      	; 0x2a70 <main+0x356>
    2a6e:	9a c1       	rjmp	.+820    	; 0x2da4 <main+0x68a>
                    move(back);  // Move back a little
    2a70:	82 e0       	ldi	r24, 0x02	; 2
    2a72:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <move>
    2a76:	80 e0       	ldi	r24, 0x00	; 0
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	a8 ec       	ldi	r26, 0xC8	; 200
    2a7c:	b2 e4       	ldi	r27, 0x42	; 66
    2a7e:	8d ab       	std	Y+53, r24	; 0x35
    2a80:	9e ab       	std	Y+54, r25	; 0x36
    2a82:	af ab       	std	Y+55, r26	; 0x37
    2a84:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a86:	6d a9       	ldd	r22, Y+53	; 0x35
    2a88:	7e a9       	ldd	r23, Y+54	; 0x36
    2a8a:	8f a9       	ldd	r24, Y+55	; 0x37
    2a8c:	98 ad       	ldd	r25, Y+56	; 0x38
    2a8e:	20 e0       	ldi	r18, 0x00	; 0
    2a90:	30 e0       	ldi	r19, 0x00	; 0
    2a92:	4a ef       	ldi	r20, 0xFA	; 250
    2a94:	54 e4       	ldi	r21, 0x44	; 68
    2a96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a9a:	dc 01       	movw	r26, r24
    2a9c:	cb 01       	movw	r24, r22
    2a9e:	89 ab       	std	Y+49, r24	; 0x31
    2aa0:	9a ab       	std	Y+50, r25	; 0x32
    2aa2:	ab ab       	std	Y+51, r26	; 0x33
    2aa4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2aa6:	69 a9       	ldd	r22, Y+49	; 0x31
    2aa8:	7a a9       	ldd	r23, Y+50	; 0x32
    2aaa:	8b a9       	ldd	r24, Y+51	; 0x33
    2aac:	9c a9       	ldd	r25, Y+52	; 0x34
    2aae:	20 e0       	ldi	r18, 0x00	; 0
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	40 e8       	ldi	r20, 0x80	; 128
    2ab4:	5f e3       	ldi	r21, 0x3F	; 63
    2ab6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2aba:	88 23       	and	r24, r24
    2abc:	2c f4       	brge	.+10     	; 0x2ac8 <main+0x3ae>
		__ticks = 1;
    2abe:	81 e0       	ldi	r24, 0x01	; 1
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	98 ab       	std	Y+48, r25	; 0x30
    2ac4:	8f a7       	std	Y+47, r24	; 0x2f
    2ac6:	3f c0       	rjmp	.+126    	; 0x2b46 <main+0x42c>
	else if (__tmp > 65535)
    2ac8:	69 a9       	ldd	r22, Y+49	; 0x31
    2aca:	7a a9       	ldd	r23, Y+50	; 0x32
    2acc:	8b a9       	ldd	r24, Y+51	; 0x33
    2ace:	9c a9       	ldd	r25, Y+52	; 0x34
    2ad0:	20 e0       	ldi	r18, 0x00	; 0
    2ad2:	3f ef       	ldi	r19, 0xFF	; 255
    2ad4:	4f e7       	ldi	r20, 0x7F	; 127
    2ad6:	57 e4       	ldi	r21, 0x47	; 71
    2ad8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2adc:	18 16       	cp	r1, r24
    2ade:	4c f5       	brge	.+82     	; 0x2b32 <main+0x418>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ae0:	6d a9       	ldd	r22, Y+53	; 0x35
    2ae2:	7e a9       	ldd	r23, Y+54	; 0x36
    2ae4:	8f a9       	ldd	r24, Y+55	; 0x37
    2ae6:	98 ad       	ldd	r25, Y+56	; 0x38
    2ae8:	20 e0       	ldi	r18, 0x00	; 0
    2aea:	30 e0       	ldi	r19, 0x00	; 0
    2aec:	40 e2       	ldi	r20, 0x20	; 32
    2aee:	51 e4       	ldi	r21, 0x41	; 65
    2af0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af4:	dc 01       	movw	r26, r24
    2af6:	cb 01       	movw	r24, r22
    2af8:	bc 01       	movw	r22, r24
    2afa:	cd 01       	movw	r24, r26
    2afc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b00:	dc 01       	movw	r26, r24
    2b02:	cb 01       	movw	r24, r22
    2b04:	98 ab       	std	Y+48, r25	; 0x30
    2b06:	8f a7       	std	Y+47, r24	; 0x2f
    2b08:	0f c0       	rjmp	.+30     	; 0x2b28 <main+0x40e>
    2b0a:	88 ec       	ldi	r24, 0xC8	; 200
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	9e a7       	std	Y+46, r25	; 0x2e
    2b10:	8d a7       	std	Y+45, r24	; 0x2d
    2b12:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b14:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b16:	01 97       	sbiw	r24, 0x01	; 1
    2b18:	f1 f7       	brne	.-4      	; 0x2b16 <main+0x3fc>
    2b1a:	9e a7       	std	Y+46, r25	; 0x2e
    2b1c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b1e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b20:	98 a9       	ldd	r25, Y+48	; 0x30
    2b22:	01 97       	sbiw	r24, 0x01	; 1
    2b24:	98 ab       	std	Y+48, r25	; 0x30
    2b26:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b28:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b2a:	98 a9       	ldd	r25, Y+48	; 0x30
    2b2c:	00 97       	sbiw	r24, 0x00	; 0
    2b2e:	69 f7       	brne	.-38     	; 0x2b0a <main+0x3f0>
    2b30:	14 c0       	rjmp	.+40     	; 0x2b5a <main+0x440>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b32:	69 a9       	ldd	r22, Y+49	; 0x31
    2b34:	7a a9       	ldd	r23, Y+50	; 0x32
    2b36:	8b a9       	ldd	r24, Y+51	; 0x33
    2b38:	9c a9       	ldd	r25, Y+52	; 0x34
    2b3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b3e:	dc 01       	movw	r26, r24
    2b40:	cb 01       	movw	r24, r22
    2b42:	98 ab       	std	Y+48, r25	; 0x30
    2b44:	8f a7       	std	Y+47, r24	; 0x2f
    2b46:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b48:	98 a9       	ldd	r25, Y+48	; 0x30
    2b4a:	9c a7       	std	Y+44, r25	; 0x2c
    2b4c:	8b a7       	std	Y+43, r24	; 0x2b
    2b4e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b50:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b52:	01 97       	sbiw	r24, 0x01	; 1
    2b54:	f1 f7       	brne	.-4      	; 0x2b52 <main+0x438>
    2b56:	9c a7       	std	Y+44, r25	; 0x2c
    2b58:	8b a7       	std	Y+43, r24	; 0x2b
                    _delay_ms(100);
                    move(stop);  // Stop after moving back
    2b5a:	80 e0       	ldi	r24, 0x00	; 0
    2b5c:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <move>

                    if (distanceleft > distanceright) {
    2b60:	fe 01       	movw	r30, r28
    2b62:	e3 5a       	subi	r30, 0xA3	; 163
    2b64:	ff 4f       	sbci	r31, 0xFF	; 255
    2b66:	20 81       	ld	r18, Z
    2b68:	31 81       	ldd	r19, Z+1	; 0x01
    2b6a:	42 81       	ldd	r20, Z+2	; 0x02
    2b6c:	53 81       	ldd	r21, Z+3	; 0x03
    2b6e:	fe 01       	movw	r30, r28
    2b70:	e7 5a       	subi	r30, 0xA7	; 167
    2b72:	ff 4f       	sbci	r31, 0xFF	; 255
    2b74:	80 81       	ld	r24, Z
    2b76:	91 81       	ldd	r25, Z+1	; 0x01
    2b78:	a2 81       	ldd	r26, Z+2	; 0x02
    2b7a:	b3 81       	ldd	r27, Z+3	; 0x03
    2b7c:	82 17       	cp	r24, r18
    2b7e:	93 07       	cpc	r25, r19
    2b80:	a4 07       	cpc	r26, r20
    2b82:	b5 07       	cpc	r27, r21
    2b84:	08 f0       	brcs	.+2      	; 0x2b88 <main+0x46e>
    2b86:	79 c0       	rjmp	.+242    	; 0x2c7a <main+0x560>
                        move(left);  // Turn left
    2b88:	83 e0       	ldi	r24, 0x03	; 3
    2b8a:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <move>
    2b8e:	80 e0       	ldi	r24, 0x00	; 0
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	a8 ec       	ldi	r26, 0xC8	; 200
    2b94:	b2 e4       	ldi	r27, 0x42	; 66
    2b96:	8f a3       	std	Y+39, r24	; 0x27
    2b98:	98 a7       	std	Y+40, r25	; 0x28
    2b9a:	a9 a7       	std	Y+41, r26	; 0x29
    2b9c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b9e:	6f a1       	ldd	r22, Y+39	; 0x27
    2ba0:	78 a5       	ldd	r23, Y+40	; 0x28
    2ba2:	89 a5       	ldd	r24, Y+41	; 0x29
    2ba4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ba6:	20 e0       	ldi	r18, 0x00	; 0
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	4a ef       	ldi	r20, 0xFA	; 250
    2bac:	54 e4       	ldi	r21, 0x44	; 68
    2bae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb2:	dc 01       	movw	r26, r24
    2bb4:	cb 01       	movw	r24, r22
    2bb6:	8b a3       	std	Y+35, r24	; 0x23
    2bb8:	9c a3       	std	Y+36, r25	; 0x24
    2bba:	ad a3       	std	Y+37, r26	; 0x25
    2bbc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2bbe:	6b a1       	ldd	r22, Y+35	; 0x23
    2bc0:	7c a1       	ldd	r23, Y+36	; 0x24
    2bc2:	8d a1       	ldd	r24, Y+37	; 0x25
    2bc4:	9e a1       	ldd	r25, Y+38	; 0x26
    2bc6:	20 e0       	ldi	r18, 0x00	; 0
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	40 e8       	ldi	r20, 0x80	; 128
    2bcc:	5f e3       	ldi	r21, 0x3F	; 63
    2bce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bd2:	88 23       	and	r24, r24
    2bd4:	2c f4       	brge	.+10     	; 0x2be0 <main+0x4c6>
		__ticks = 1;
    2bd6:	81 e0       	ldi	r24, 0x01	; 1
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	9a a3       	std	Y+34, r25	; 0x22
    2bdc:	89 a3       	std	Y+33, r24	; 0x21
    2bde:	3f c0       	rjmp	.+126    	; 0x2c5e <main+0x544>
	else if (__tmp > 65535)
    2be0:	6b a1       	ldd	r22, Y+35	; 0x23
    2be2:	7c a1       	ldd	r23, Y+36	; 0x24
    2be4:	8d a1       	ldd	r24, Y+37	; 0x25
    2be6:	9e a1       	ldd	r25, Y+38	; 0x26
    2be8:	20 e0       	ldi	r18, 0x00	; 0
    2bea:	3f ef       	ldi	r19, 0xFF	; 255
    2bec:	4f e7       	ldi	r20, 0x7F	; 127
    2bee:	57 e4       	ldi	r21, 0x47	; 71
    2bf0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bf4:	18 16       	cp	r1, r24
    2bf6:	4c f5       	brge	.+82     	; 0x2c4a <main+0x530>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bf8:	6f a1       	ldd	r22, Y+39	; 0x27
    2bfa:	78 a5       	ldd	r23, Y+40	; 0x28
    2bfc:	89 a5       	ldd	r24, Y+41	; 0x29
    2bfe:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c00:	20 e0       	ldi	r18, 0x00	; 0
    2c02:	30 e0       	ldi	r19, 0x00	; 0
    2c04:	40 e2       	ldi	r20, 0x20	; 32
    2c06:	51 e4       	ldi	r21, 0x41	; 65
    2c08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c0c:	dc 01       	movw	r26, r24
    2c0e:	cb 01       	movw	r24, r22
    2c10:	bc 01       	movw	r22, r24
    2c12:	cd 01       	movw	r24, r26
    2c14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c18:	dc 01       	movw	r26, r24
    2c1a:	cb 01       	movw	r24, r22
    2c1c:	9a a3       	std	Y+34, r25	; 0x22
    2c1e:	89 a3       	std	Y+33, r24	; 0x21
    2c20:	0f c0       	rjmp	.+30     	; 0x2c40 <main+0x526>
    2c22:	88 ec       	ldi	r24, 0xC8	; 200
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	98 a3       	std	Y+32, r25	; 0x20
    2c28:	8f 8f       	std	Y+31, r24	; 0x1f
    2c2a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c2c:	98 a1       	ldd	r25, Y+32	; 0x20
    2c2e:	01 97       	sbiw	r24, 0x01	; 1
    2c30:	f1 f7       	brne	.-4      	; 0x2c2e <main+0x514>
    2c32:	98 a3       	std	Y+32, r25	; 0x20
    2c34:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c36:	89 a1       	ldd	r24, Y+33	; 0x21
    2c38:	9a a1       	ldd	r25, Y+34	; 0x22
    2c3a:	01 97       	sbiw	r24, 0x01	; 1
    2c3c:	9a a3       	std	Y+34, r25	; 0x22
    2c3e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c40:	89 a1       	ldd	r24, Y+33	; 0x21
    2c42:	9a a1       	ldd	r25, Y+34	; 0x22
    2c44:	00 97       	sbiw	r24, 0x00	; 0
    2c46:	69 f7       	brne	.-38     	; 0x2c22 <main+0x508>
    2c48:	14 c0       	rjmp	.+40     	; 0x2c72 <main+0x558>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c4a:	6b a1       	ldd	r22, Y+35	; 0x23
    2c4c:	7c a1       	ldd	r23, Y+36	; 0x24
    2c4e:	8d a1       	ldd	r24, Y+37	; 0x25
    2c50:	9e a1       	ldd	r25, Y+38	; 0x26
    2c52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c56:	dc 01       	movw	r26, r24
    2c58:	cb 01       	movw	r24, r22
    2c5a:	9a a3       	std	Y+34, r25	; 0x22
    2c5c:	89 a3       	std	Y+33, r24	; 0x21
    2c5e:	89 a1       	ldd	r24, Y+33	; 0x21
    2c60:	9a a1       	ldd	r25, Y+34	; 0x22
    2c62:	9e 8f       	std	Y+30, r25	; 0x1e
    2c64:	8d 8f       	std	Y+29, r24	; 0x1d
    2c66:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c68:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c6a:	01 97       	sbiw	r24, 0x01	; 1
    2c6c:	f1 f7       	brne	.-4      	; 0x2c6a <main+0x550>
    2c6e:	9e 8f       	std	Y+30, r25	; 0x1e
    2c70:	8d 8f       	std	Y+29, r24	; 0x1d
                        _delay_ms(100);
                        move(stop);  // Stop after turning
    2c72:	80 e0       	ldi	r24, 0x00	; 0
    2c74:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <move>
    2c78:	67 cd       	rjmp	.-1330   	; 0x2748 <main+0x2e>
                        break;

                    } else if (distanceright > distanceleft) {
    2c7a:	fe 01       	movw	r30, r28
    2c7c:	e7 5a       	subi	r30, 0xA7	; 167
    2c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c80:	20 81       	ld	r18, Z
    2c82:	31 81       	ldd	r19, Z+1	; 0x01
    2c84:	42 81       	ldd	r20, Z+2	; 0x02
    2c86:	53 81       	ldd	r21, Z+3	; 0x03
    2c88:	fe 01       	movw	r30, r28
    2c8a:	e3 5a       	subi	r30, 0xA3	; 163
    2c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8e:	80 81       	ld	r24, Z
    2c90:	91 81       	ldd	r25, Z+1	; 0x01
    2c92:	a2 81       	ldd	r26, Z+2	; 0x02
    2c94:	b3 81       	ldd	r27, Z+3	; 0x03
    2c96:	82 17       	cp	r24, r18
    2c98:	93 07       	cpc	r25, r19
    2c9a:	a4 07       	cpc	r26, r20
    2c9c:	b5 07       	cpc	r27, r21
    2c9e:	08 f0       	brcs	.+2      	; 0x2ca2 <main+0x588>
    2ca0:	7d cd       	rjmp	.-1286   	; 0x279c <main+0x82>
                        move(right);  // Turn right
    2ca2:	84 e0       	ldi	r24, 0x04	; 4
    2ca4:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <move>
    2ca8:	80 e0       	ldi	r24, 0x00	; 0
    2caa:	90 e0       	ldi	r25, 0x00	; 0
    2cac:	a8 ec       	ldi	r26, 0xC8	; 200
    2cae:	b2 e4       	ldi	r27, 0x42	; 66
    2cb0:	89 8f       	std	Y+25, r24	; 0x19
    2cb2:	9a 8f       	std	Y+26, r25	; 0x1a
    2cb4:	ab 8f       	std	Y+27, r26	; 0x1b
    2cb6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cb8:	69 8d       	ldd	r22, Y+25	; 0x19
    2cba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cbc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cbe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cc0:	20 e0       	ldi	r18, 0x00	; 0
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	4a ef       	ldi	r20, 0xFA	; 250
    2cc6:	54 e4       	ldi	r21, 0x44	; 68
    2cc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ccc:	dc 01       	movw	r26, r24
    2cce:	cb 01       	movw	r24, r22
    2cd0:	8d 8b       	std	Y+21, r24	; 0x15
    2cd2:	9e 8b       	std	Y+22, r25	; 0x16
    2cd4:	af 8b       	std	Y+23, r26	; 0x17
    2cd6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2cd8:	6d 89       	ldd	r22, Y+21	; 0x15
    2cda:	7e 89       	ldd	r23, Y+22	; 0x16
    2cdc:	8f 89       	ldd	r24, Y+23	; 0x17
    2cde:	98 8d       	ldd	r25, Y+24	; 0x18
    2ce0:	20 e0       	ldi	r18, 0x00	; 0
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	40 e8       	ldi	r20, 0x80	; 128
    2ce6:	5f e3       	ldi	r21, 0x3F	; 63
    2ce8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cec:	88 23       	and	r24, r24
    2cee:	2c f4       	brge	.+10     	; 0x2cfa <main+0x5e0>
		__ticks = 1;
    2cf0:	81 e0       	ldi	r24, 0x01	; 1
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	9c 8b       	std	Y+20, r25	; 0x14
    2cf6:	8b 8b       	std	Y+19, r24	; 0x13
    2cf8:	3f c0       	rjmp	.+126    	; 0x2d78 <main+0x65e>
	else if (__tmp > 65535)
    2cfa:	6d 89       	ldd	r22, Y+21	; 0x15
    2cfc:	7e 89       	ldd	r23, Y+22	; 0x16
    2cfe:	8f 89       	ldd	r24, Y+23	; 0x17
    2d00:	98 8d       	ldd	r25, Y+24	; 0x18
    2d02:	20 e0       	ldi	r18, 0x00	; 0
    2d04:	3f ef       	ldi	r19, 0xFF	; 255
    2d06:	4f e7       	ldi	r20, 0x7F	; 127
    2d08:	57 e4       	ldi	r21, 0x47	; 71
    2d0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d0e:	18 16       	cp	r1, r24
    2d10:	4c f5       	brge	.+82     	; 0x2d64 <main+0x64a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d12:	69 8d       	ldd	r22, Y+25	; 0x19
    2d14:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d16:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d18:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d1a:	20 e0       	ldi	r18, 0x00	; 0
    2d1c:	30 e0       	ldi	r19, 0x00	; 0
    2d1e:	40 e2       	ldi	r20, 0x20	; 32
    2d20:	51 e4       	ldi	r21, 0x41	; 65
    2d22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d26:	dc 01       	movw	r26, r24
    2d28:	cb 01       	movw	r24, r22
    2d2a:	bc 01       	movw	r22, r24
    2d2c:	cd 01       	movw	r24, r26
    2d2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d32:	dc 01       	movw	r26, r24
    2d34:	cb 01       	movw	r24, r22
    2d36:	9c 8b       	std	Y+20, r25	; 0x14
    2d38:	8b 8b       	std	Y+19, r24	; 0x13
    2d3a:	0f c0       	rjmp	.+30     	; 0x2d5a <main+0x640>
    2d3c:	88 ec       	ldi	r24, 0xC8	; 200
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	9a 8b       	std	Y+18, r25	; 0x12
    2d42:	89 8b       	std	Y+17, r24	; 0x11
    2d44:	89 89       	ldd	r24, Y+17	; 0x11
    2d46:	9a 89       	ldd	r25, Y+18	; 0x12
    2d48:	01 97       	sbiw	r24, 0x01	; 1
    2d4a:	f1 f7       	brne	.-4      	; 0x2d48 <main+0x62e>
    2d4c:	9a 8b       	std	Y+18, r25	; 0x12
    2d4e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d50:	8b 89       	ldd	r24, Y+19	; 0x13
    2d52:	9c 89       	ldd	r25, Y+20	; 0x14
    2d54:	01 97       	sbiw	r24, 0x01	; 1
    2d56:	9c 8b       	std	Y+20, r25	; 0x14
    2d58:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d5a:	8b 89       	ldd	r24, Y+19	; 0x13
    2d5c:	9c 89       	ldd	r25, Y+20	; 0x14
    2d5e:	00 97       	sbiw	r24, 0x00	; 0
    2d60:	69 f7       	brne	.-38     	; 0x2d3c <main+0x622>
    2d62:	14 c0       	rjmp	.+40     	; 0x2d8c <main+0x672>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d64:	6d 89       	ldd	r22, Y+21	; 0x15
    2d66:	7e 89       	ldd	r23, Y+22	; 0x16
    2d68:	8f 89       	ldd	r24, Y+23	; 0x17
    2d6a:	98 8d       	ldd	r25, Y+24	; 0x18
    2d6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d70:	dc 01       	movw	r26, r24
    2d72:	cb 01       	movw	r24, r22
    2d74:	9c 8b       	std	Y+20, r25	; 0x14
    2d76:	8b 8b       	std	Y+19, r24	; 0x13
    2d78:	8b 89       	ldd	r24, Y+19	; 0x13
    2d7a:	9c 89       	ldd	r25, Y+20	; 0x14
    2d7c:	98 8b       	std	Y+16, r25	; 0x10
    2d7e:	8f 87       	std	Y+15, r24	; 0x0f
    2d80:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d82:	98 89       	ldd	r25, Y+16	; 0x10
    2d84:	01 97       	sbiw	r24, 0x01	; 1
    2d86:	f1 f7       	brne	.-4      	; 0x2d84 <main+0x66a>
    2d88:	98 8b       	std	Y+16, r25	; 0x10
    2d8a:	8f 87       	std	Y+15, r24	; 0x0f
                        _delay_ms(100);
                        move(stop);  // Stop after turning
    2d8c:	80 e0       	ldi	r24, 0x00	; 0
    2d8e:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <move>
                        DIO_u8GetPinValue(PORTD, PIN_2, &value);  // Optional pin read (can be removed if unnecessary)
    2d92:	9e 01       	movw	r18, r28
    2d94:	2f 59       	subi	r18, 0x9F	; 159
    2d96:	3f 4f       	sbci	r19, 0xFF	; 255
    2d98:	84 e0       	ldi	r24, 0x04	; 4
    2d9a:	62 e0       	ldi	r22, 0x02	; 2
    2d9c:	a9 01       	movw	r20, r18
    2d9e:	0e 94 49 09 	call	0x1292	; 0x1292 <DIO_u8GetPinValue>
    2da2:	d2 cc       	rjmp	.-1628   	; 0x2748 <main+0x2e>
                        break;
                    }

                } else {
                    setServoDuty(forward_servo);  // Reset servo forward
    2da4:	8c e2       	ldi	r24, 0x2C	; 44
    2da6:	91 e0       	ldi	r25, 0x01	; 1
    2da8:	0e 94 2a 18 	call	0x3054	; 0x3054 <setServoDuty>
                    move(back);  // Move back
    2dac:	82 e0       	ldi	r24, 0x02	; 2
    2dae:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <move>
    2db2:	80 e0       	ldi	r24, 0x00	; 0
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	a8 ec       	ldi	r26, 0xC8	; 200
    2db8:	b2 e4       	ldi	r27, 0x42	; 66
    2dba:	8b 87       	std	Y+11, r24	; 0x0b
    2dbc:	9c 87       	std	Y+12, r25	; 0x0c
    2dbe:	ad 87       	std	Y+13, r26	; 0x0d
    2dc0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dc2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dc4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dca:	20 e0       	ldi	r18, 0x00	; 0
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	4a ef       	ldi	r20, 0xFA	; 250
    2dd0:	54 e4       	ldi	r21, 0x44	; 68
    2dd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dd6:	dc 01       	movw	r26, r24
    2dd8:	cb 01       	movw	r24, r22
    2dda:	8f 83       	std	Y+7, r24	; 0x07
    2ddc:	98 87       	std	Y+8, r25	; 0x08
    2dde:	a9 87       	std	Y+9, r26	; 0x09
    2de0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2de2:	6f 81       	ldd	r22, Y+7	; 0x07
    2de4:	78 85       	ldd	r23, Y+8	; 0x08
    2de6:	89 85       	ldd	r24, Y+9	; 0x09
    2de8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dea:	20 e0       	ldi	r18, 0x00	; 0
    2dec:	30 e0       	ldi	r19, 0x00	; 0
    2dee:	40 e8       	ldi	r20, 0x80	; 128
    2df0:	5f e3       	ldi	r21, 0x3F	; 63
    2df2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2df6:	88 23       	and	r24, r24
    2df8:	2c f4       	brge	.+10     	; 0x2e04 <main+0x6ea>
		__ticks = 1;
    2dfa:	81 e0       	ldi	r24, 0x01	; 1
    2dfc:	90 e0       	ldi	r25, 0x00	; 0
    2dfe:	9e 83       	std	Y+6, r25	; 0x06
    2e00:	8d 83       	std	Y+5, r24	; 0x05
    2e02:	3f c0       	rjmp	.+126    	; 0x2e82 <main+0x768>
	else if (__tmp > 65535)
    2e04:	6f 81       	ldd	r22, Y+7	; 0x07
    2e06:	78 85       	ldd	r23, Y+8	; 0x08
    2e08:	89 85       	ldd	r24, Y+9	; 0x09
    2e0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e0c:	20 e0       	ldi	r18, 0x00	; 0
    2e0e:	3f ef       	ldi	r19, 0xFF	; 255
    2e10:	4f e7       	ldi	r20, 0x7F	; 127
    2e12:	57 e4       	ldi	r21, 0x47	; 71
    2e14:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e18:	18 16       	cp	r1, r24
    2e1a:	4c f5       	brge	.+82     	; 0x2e6e <main+0x754>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e20:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e22:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e24:	20 e0       	ldi	r18, 0x00	; 0
    2e26:	30 e0       	ldi	r19, 0x00	; 0
    2e28:	40 e2       	ldi	r20, 0x20	; 32
    2e2a:	51 e4       	ldi	r21, 0x41	; 65
    2e2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e30:	dc 01       	movw	r26, r24
    2e32:	cb 01       	movw	r24, r22
    2e34:	bc 01       	movw	r22, r24
    2e36:	cd 01       	movw	r24, r26
    2e38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e3c:	dc 01       	movw	r26, r24
    2e3e:	cb 01       	movw	r24, r22
    2e40:	9e 83       	std	Y+6, r25	; 0x06
    2e42:	8d 83       	std	Y+5, r24	; 0x05
    2e44:	0f c0       	rjmp	.+30     	; 0x2e64 <main+0x74a>
    2e46:	88 ec       	ldi	r24, 0xC8	; 200
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	9c 83       	std	Y+4, r25	; 0x04
    2e4c:	8b 83       	std	Y+3, r24	; 0x03
    2e4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e50:	9c 81       	ldd	r25, Y+4	; 0x04
    2e52:	01 97       	sbiw	r24, 0x01	; 1
    2e54:	f1 f7       	brne	.-4      	; 0x2e52 <main+0x738>
    2e56:	9c 83       	std	Y+4, r25	; 0x04
    2e58:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e5c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e5e:	01 97       	sbiw	r24, 0x01	; 1
    2e60:	9e 83       	std	Y+6, r25	; 0x06
    2e62:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e64:	8d 81       	ldd	r24, Y+5	; 0x05
    2e66:	9e 81       	ldd	r25, Y+6	; 0x06
    2e68:	00 97       	sbiw	r24, 0x00	; 0
    2e6a:	69 f7       	brne	.-38     	; 0x2e46 <main+0x72c>
    2e6c:	14 c0       	rjmp	.+40     	; 0x2e96 <main+0x77c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e6e:	6f 81       	ldd	r22, Y+7	; 0x07
    2e70:	78 85       	ldd	r23, Y+8	; 0x08
    2e72:	89 85       	ldd	r24, Y+9	; 0x09
    2e74:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e7a:	dc 01       	movw	r26, r24
    2e7c:	cb 01       	movw	r24, r22
    2e7e:	9e 83       	std	Y+6, r25	; 0x06
    2e80:	8d 83       	std	Y+5, r24	; 0x05
    2e82:	8d 81       	ldd	r24, Y+5	; 0x05
    2e84:	9e 81       	ldd	r25, Y+6	; 0x06
    2e86:	9a 83       	std	Y+2, r25	; 0x02
    2e88:	89 83       	std	Y+1, r24	; 0x01
    2e8a:	89 81       	ldd	r24, Y+1	; 0x01
    2e8c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e8e:	01 97       	sbiw	r24, 0x01	; 1
    2e90:	f1 f7       	brne	.-4      	; 0x2e8e <main+0x774>
    2e92:	9a 83       	std	Y+2, r25	; 0x02
    2e94:	89 83       	std	Y+1, r24	; 0x01
                    _delay_ms(100);
                    move(stop);  // Stop after moving back
    2e96:	80 e0       	ldi	r24, 0x00	; 0
    2e98:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <move>
    2e9c:	7f cc       	rjmp	.-1794   	; 0x279c <main+0x82>

00002e9e <metaldetect>:
#include  "motion.h"
#include   "metal_sens_config.h"
#include   "metal_sens_int.h"
#include   "servo_int.h"

void metaldetect(void){
    2e9e:	df 93       	push	r29
    2ea0:	cf 93       	push	r28
    2ea2:	cd b7       	in	r28, 0x3d	; 61
    2ea4:	de b7       	in	r29, 0x3e	; 62
	GI_voidEnable();
    2ea6:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <GI_voidEnable>
	EXTI_u8EXTEnable(EXT0,rising_edge);
    2eaa:	80 e0       	ldi	r24, 0x00	; 0
    2eac:	60 e0       	ldi	r22, 0x00	; 0
    2eae:	0e 94 34 0b 	call	0x1668	; 0x1668 <EXTI_u8EXTEnable>
	EXTI_SET_CALL_BACK(&notification , EXT0);
    2eb2:	81 e6       	ldi	r24, 0x61	; 97
    2eb4:	97 e1       	ldi	r25, 0x17	; 23
    2eb6:	60 e0       	ldi	r22, 0x00	; 0
    2eb8:	0e 94 0c 0b 	call	0x1618	; 0x1618 <EXTI_SET_CALL_BACK>
}
    2ebc:	cf 91       	pop	r28
    2ebe:	df 91       	pop	r29
    2ec0:	08 95       	ret

00002ec2 <notification>:

void notification(void){
    2ec2:	df 93       	push	r29
    2ec4:	cf 93       	push	r28
    2ec6:	0f 92       	push	r0
    2ec8:	cd b7       	in	r28, 0x3d	; 61
    2eca:	de b7       	in	r29, 0x3e	; 62
  u8 value ;
  DIO_u8GetPinValue(PORTD,PIN_2,&value);
    2ecc:	84 e0       	ldi	r24, 0x04	; 4
    2ece:	62 e0       	ldi	r22, 0x02	; 2
    2ed0:	9e 01       	movw	r18, r28
    2ed2:	2f 5f       	subi	r18, 0xFF	; 255
    2ed4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ed6:	a9 01       	movw	r20, r18
    2ed8:	0e 94 49 09 	call	0x1292	; 0x1292 <DIO_u8GetPinValue>
    2edc:	14 c0       	rjmp	.+40     	; 0x2f06 <notification+0x44>
	while( value == LOGIC_HIGH){
		move(stop);
    2ede:	80 e0       	ldi	r24, 0x00	; 0
    2ee0:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <move>
		setServoDuty(forward_servo);
    2ee4:	8c e2       	ldi	r24, 0x2C	; 44
    2ee6:	91 e0       	ldi	r25, 0x01	; 1
    2ee8:	0e 94 2a 18 	call	0x3054	; 0x3054 <setServoDuty>
		DIO_u8SetPinValue(metal_alarm_PORT,metal_alarm_pin, LOGIC_HIGH);
    2eec:	81 e0       	ldi	r24, 0x01	; 1
    2eee:	64 e0       	ldi	r22, 0x04	; 4
    2ef0:	41 e0       	ldi	r20, 0x01	; 1
    2ef2:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_u8SetPinValue>
		DIO_u8GetPinValue(PORTD,PIN_2,&value);
    2ef6:	84 e0       	ldi	r24, 0x04	; 4
    2ef8:	62 e0       	ldi	r22, 0x02	; 2
    2efa:	9e 01       	movw	r18, r28
    2efc:	2f 5f       	subi	r18, 0xFF	; 255
    2efe:	3f 4f       	sbci	r19, 0xFF	; 255
    2f00:	a9 01       	movw	r20, r18
    2f02:	0e 94 49 09 	call	0x1292	; 0x1292 <DIO_u8GetPinValue>
}

void notification(void){
  u8 value ;
  DIO_u8GetPinValue(PORTD,PIN_2,&value);
	while( value == LOGIC_HIGH){
    2f06:	89 81       	ldd	r24, Y+1	; 0x01
    2f08:	81 30       	cpi	r24, 0x01	; 1
    2f0a:	49 f3       	breq	.-46     	; 0x2ede <notification+0x1c>
		move(stop);
		setServoDuty(forward_servo);
		DIO_u8SetPinValue(metal_alarm_PORT,metal_alarm_pin, LOGIC_HIGH);
		DIO_u8GetPinValue(PORTD,PIN_2,&value);
	}
	DIO_u8SetPinValue(metal_alarm_PORT,metal_alarm_pin, LOGIC_LOW);
    2f0c:	81 e0       	ldi	r24, 0x01	; 1
    2f0e:	64 e0       	ldi	r22, 0x04	; 4
    2f10:	40 e0       	ldi	r20, 0x00	; 0
    2f12:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_u8SetPinValue>
}
    2f16:	0f 90       	pop	r0
    2f18:	cf 91       	pop	r28
    2f1a:	df 91       	pop	r29
    2f1c:	08 95       	ret

00002f1e <move>:
#include  "DIO_INT.h"
#include   "motion.h"
#include  "motion_config.h"


void move(u8 direction){
    2f1e:	df 93       	push	r29
    2f20:	cf 93       	push	r28
    2f22:	00 d0       	rcall	.+0      	; 0x2f24 <move+0x6>
    2f24:	0f 92       	push	r0
    2f26:	cd b7       	in	r28, 0x3d	; 61
    2f28:	de b7       	in	r29, 0x3e	; 62
    2f2a:	89 83       	std	Y+1, r24	; 0x01
	switch (direction){
    2f2c:	89 81       	ldd	r24, Y+1	; 0x01
    2f2e:	28 2f       	mov	r18, r24
    2f30:	30 e0       	ldi	r19, 0x00	; 0
    2f32:	3b 83       	std	Y+3, r19	; 0x03
    2f34:	2a 83       	std	Y+2, r18	; 0x02
    2f36:	8a 81       	ldd	r24, Y+2	; 0x02
    2f38:	9b 81       	ldd	r25, Y+3	; 0x03
    2f3a:	82 30       	cpi	r24, 0x02	; 2
    2f3c:	91 05       	cpc	r25, r1
    2f3e:	89 f1       	breq	.+98     	; 0x2fa2 <move+0x84>
    2f40:	2a 81       	ldd	r18, Y+2	; 0x02
    2f42:	3b 81       	ldd	r19, Y+3	; 0x03
    2f44:	23 30       	cpi	r18, 0x03	; 3
    2f46:	31 05       	cpc	r19, r1
    2f48:	54 f4       	brge	.+20     	; 0x2f5e <move+0x40>
    2f4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f4c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f4e:	00 97       	sbiw	r24, 0x00	; 0
    2f50:	99 f0       	breq	.+38     	; 0x2f78 <move+0x5a>
    2f52:	2a 81       	ldd	r18, Y+2	; 0x02
    2f54:	3b 81       	ldd	r19, Y+3	; 0x03
    2f56:	21 30       	cpi	r18, 0x01	; 1
    2f58:	31 05       	cpc	r19, r1
    2f5a:	c1 f1       	breq	.+112    	; 0x2fcc <move+0xae>
    2f5c:	75 c0       	rjmp	.+234    	; 0x3048 <move+0x12a>
    2f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f60:	9b 81       	ldd	r25, Y+3	; 0x03
    2f62:	83 30       	cpi	r24, 0x03	; 3
    2f64:	91 05       	cpc	r25, r1
    2f66:	09 f4       	brne	.+2      	; 0x2f6a <move+0x4c>
    2f68:	5b c0       	rjmp	.+182    	; 0x3020 <move+0x102>
    2f6a:	2a 81       	ldd	r18, Y+2	; 0x02
    2f6c:	3b 81       	ldd	r19, Y+3	; 0x03
    2f6e:	24 30       	cpi	r18, 0x04	; 4
    2f70:	31 05       	cpc	r19, r1
    2f72:	09 f4       	brne	.+2      	; 0x2f76 <move+0x58>
    2f74:	40 c0       	rjmp	.+128    	; 0x2ff6 <move+0xd8>
    2f76:	68 c0       	rjmp	.+208    	; 0x3048 <move+0x12a>

	case stop :
		DIO_u8SetPinValue(wheels_port,PIN_3,LOGIC_LOW);
    2f78:	81 e0       	ldi	r24, 0x01	; 1
    2f7a:	63 e0       	ldi	r22, 0x03	; 3
    2f7c:	40 e0       	ldi	r20, 0x00	; 0
    2f7e:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_u8SetPinValue>
	    DIO_u8SetPinValue(wheels_port,PIN_1,LOGIC_LOW);
    2f82:	81 e0       	ldi	r24, 0x01	; 1
    2f84:	61 e0       	ldi	r22, 0x01	; 1
    2f86:	40 e0       	ldi	r20, 0x00	; 0
    2f88:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_u8SetPinValue>
	    DIO_u8SetPinValue(wheels_port,PIN_0,LOGIC_LOW);
    2f8c:	81 e0       	ldi	r24, 0x01	; 1
    2f8e:	60 e0       	ldi	r22, 0x00	; 0
    2f90:	40 e0       	ldi	r20, 0x00	; 0
    2f92:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_u8SetPinValue>
	    DIO_u8SetPinValue(wheels_port,PIN_2,LOGIC_LOW);
    2f96:	81 e0       	ldi	r24, 0x01	; 1
    2f98:	62 e0       	ldi	r22, 0x02	; 2
    2f9a:	40 e0       	ldi	r20, 0x00	; 0
    2f9c:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_u8SetPinValue>
    2fa0:	53 c0       	rjmp	.+166    	; 0x3048 <move+0x12a>

        break ;
    case back :

	  DIO_u8SetPinValue(wheels_port,PIN_0,LOGIC_HIGH);
    2fa2:	81 e0       	ldi	r24, 0x01	; 1
    2fa4:	60 e0       	ldi	r22, 0x00	; 0
    2fa6:	41 e0       	ldi	r20, 0x01	; 1
    2fa8:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_u8SetPinValue>
	  DIO_u8SetPinValue(wheels_port,PIN_3,LOGIC_LOW);
    2fac:	81 e0       	ldi	r24, 0x01	; 1
    2fae:	63 e0       	ldi	r22, 0x03	; 3
    2fb0:	40 e0       	ldi	r20, 0x00	; 0
    2fb2:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_u8SetPinValue>
	  DIO_u8SetPinValue(wheels_port,PIN_1,LOGIC_LOW);
    2fb6:	81 e0       	ldi	r24, 0x01	; 1
    2fb8:	61 e0       	ldi	r22, 0x01	; 1
    2fba:	40 e0       	ldi	r20, 0x00	; 0
    2fbc:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_u8SetPinValue>
	  DIO_u8SetPinValue(wheels_port,PIN_2,LOGIC_HIGH);
    2fc0:	81 e0       	ldi	r24, 0x01	; 1
    2fc2:	62 e0       	ldi	r22, 0x02	; 2
    2fc4:	41 e0       	ldi	r20, 0x01	; 1
    2fc6:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_u8SetPinValue>
    2fca:	3e c0       	rjmp	.+124    	; 0x3048 <move+0x12a>

		break;

	 case forward:

		DIO_u8SetPinValue(wheels_port,PIN_2,LOGIC_LOW); // in3
    2fcc:	81 e0       	ldi	r24, 0x01	; 1
    2fce:	62 e0       	ldi	r22, 0x02	; 2
    2fd0:	40 e0       	ldi	r20, 0x00	; 0
    2fd2:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_u8SetPinValue>
	    DIO_u8SetPinValue(wheels_port,PIN_1,LOGIC_HIGH); // in2
    2fd6:	81 e0       	ldi	r24, 0x01	; 1
    2fd8:	61 e0       	ldi	r22, 0x01	; 1
    2fda:	41 e0       	ldi	r20, 0x01	; 1
    2fdc:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_u8SetPinValue>
	    DIO_u8SetPinValue(wheels_port,PIN_0,LOGIC_LOW);  // in1
    2fe0:	81 e0       	ldi	r24, 0x01	; 1
    2fe2:	60 e0       	ldi	r22, 0x00	; 0
    2fe4:	40 e0       	ldi	r20, 0x00	; 0
    2fe6:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_u8SetPinValue>
	    DIO_u8SetPinValue(wheels_port,PIN_3,LOGIC_HIGH);  //in4
    2fea:	81 e0       	ldi	r24, 0x01	; 1
    2fec:	63 e0       	ldi	r22, 0x03	; 3
    2fee:	41 e0       	ldi	r20, 0x01	; 1
    2ff0:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_u8SetPinValue>
    2ff4:	29 c0       	rjmp	.+82     	; 0x3048 <move+0x12a>

		break ;

	case right:

		DIO_u8SetPinValue(wheels_port,PIN_3,LOGIC_HIGH);
    2ff6:	81 e0       	ldi	r24, 0x01	; 1
    2ff8:	63 e0       	ldi	r22, 0x03	; 3
    2ffa:	41 e0       	ldi	r20, 0x01	; 1
    2ffc:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_u8SetPinValue>
	    DIO_u8SetPinValue(wheels_port,PIN_1,LOGIC_LOW);
    3000:	81 e0       	ldi	r24, 0x01	; 1
    3002:	61 e0       	ldi	r22, 0x01	; 1
    3004:	40 e0       	ldi	r20, 0x00	; 0
    3006:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_u8SetPinValue>
	    DIO_u8SetPinValue(wheels_port,PIN_0,LOGIC_HIGH);
    300a:	81 e0       	ldi	r24, 0x01	; 1
    300c:	60 e0       	ldi	r22, 0x00	; 0
    300e:	41 e0       	ldi	r20, 0x01	; 1
    3010:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_u8SetPinValue>
	    DIO_u8SetPinValue(wheels_port,PIN_2,LOGIC_LOW);
    3014:	81 e0       	ldi	r24, 0x01	; 1
    3016:	62 e0       	ldi	r22, 0x02	; 2
    3018:	40 e0       	ldi	r20, 0x00	; 0
    301a:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_u8SetPinValue>
    301e:	14 c0       	rjmp	.+40     	; 0x3048 <move+0x12a>

		break;

	case left :

		DIO_u8SetPinValue(wheels_port,PIN_3,LOGIC_LOW);
    3020:	81 e0       	ldi	r24, 0x01	; 1
    3022:	63 e0       	ldi	r22, 0x03	; 3
    3024:	40 e0       	ldi	r20, 0x00	; 0
    3026:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_u8SetPinValue>
	    DIO_u8SetPinValue(wheels_port,PIN_1,LOGIC_HIGH);
    302a:	81 e0       	ldi	r24, 0x01	; 1
    302c:	61 e0       	ldi	r22, 0x01	; 1
    302e:	41 e0       	ldi	r20, 0x01	; 1
    3030:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_u8SetPinValue>
	    DIO_u8SetPinValue(wheels_port,PIN_0,LOGIC_LOW);
    3034:	81 e0       	ldi	r24, 0x01	; 1
    3036:	60 e0       	ldi	r22, 0x00	; 0
    3038:	40 e0       	ldi	r20, 0x00	; 0
    303a:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_u8SetPinValue>
	    DIO_u8SetPinValue(wheels_port,PIN_2,LOGIC_HIGH);
    303e:	81 e0       	ldi	r24, 0x01	; 1
    3040:	62 e0       	ldi	r22, 0x02	; 2
    3042:	41 e0       	ldi	r20, 0x01	; 1
    3044:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_u8SetPinValue>


	}


}
    3048:	0f 90       	pop	r0
    304a:	0f 90       	pop	r0
    304c:	0f 90       	pop	r0
    304e:	cf 91       	pop	r28
    3050:	df 91       	pop	r29
    3052:	08 95       	ret

00003054 <setServoDuty>:
#include  "util/delay.h"
#include   "DIO_INT.h"
#include   "servo_int.h"


void setServoDuty(u16 duartion) {
    3054:	df 93       	push	r29
    3056:	cf 93       	push	r28
    3058:	cd b7       	in	r28, 0x3d	; 61
    305a:	de b7       	in	r29, 0x3e	; 62
    305c:	e3 97       	sbiw	r28, 0x33	; 51
    305e:	0f b6       	in	r0, 0x3f	; 63
    3060:	f8 94       	cli
    3062:	de bf       	out	0x3e, r29	; 62
    3064:	0f be       	out	0x3f, r0	; 63
    3066:	cd bf       	out	0x3d, r28	; 61
    3068:	9b ab       	std	Y+51, r25	; 0x33
    306a:	8a ab       	std	Y+50, r24	; 0x32
	u8 i;
	for (i=0; i<5; i++) {
    306c:	19 aa       	std	Y+49, r1	; 0x31
    306e:	9d c1       	rjmp	.+826    	; 0x33aa <setServoDuty+0x356>
		 DIO_u8SetPinValue(PORTC , PIN_0, LOGIC_HIGH);
    3070:	83 e0       	ldi	r24, 0x03	; 3
    3072:	60 e0       	ldi	r22, 0x00	; 0
    3074:	41 e0       	ldi	r20, 0x01	; 1
    3076:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_u8SetPinValue>
		_delay_us(duartion);
    307a:	8a a9       	ldd	r24, Y+50	; 0x32
    307c:	9b a9       	ldd	r25, Y+51	; 0x33
    307e:	cc 01       	movw	r24, r24
    3080:	a0 e0       	ldi	r26, 0x00	; 0
    3082:	b0 e0       	ldi	r27, 0x00	; 0
    3084:	bc 01       	movw	r22, r24
    3086:	cd 01       	movw	r24, r26
    3088:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    308c:	dc 01       	movw	r26, r24
    308e:	cb 01       	movw	r24, r22
    3090:	8d a7       	std	Y+45, r24	; 0x2d
    3092:	9e a7       	std	Y+46, r25	; 0x2e
    3094:	af a7       	std	Y+47, r26	; 0x2f
    3096:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3098:	6d a5       	ldd	r22, Y+45	; 0x2d
    309a:	7e a5       	ldd	r23, Y+46	; 0x2e
    309c:	8f a5       	ldd	r24, Y+47	; 0x2f
    309e:	98 a9       	ldd	r25, Y+48	; 0x30
    30a0:	2b ea       	ldi	r18, 0xAB	; 171
    30a2:	3a ea       	ldi	r19, 0xAA	; 170
    30a4:	4a e2       	ldi	r20, 0x2A	; 42
    30a6:	50 e4       	ldi	r21, 0x40	; 64
    30a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ac:	dc 01       	movw	r26, r24
    30ae:	cb 01       	movw	r24, r22
    30b0:	89 a7       	std	Y+41, r24	; 0x29
    30b2:	9a a7       	std	Y+42, r25	; 0x2a
    30b4:	ab a7       	std	Y+43, r26	; 0x2b
    30b6:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    30b8:	69 a5       	ldd	r22, Y+41	; 0x29
    30ba:	7a a5       	ldd	r23, Y+42	; 0x2a
    30bc:	8b a5       	ldd	r24, Y+43	; 0x2b
    30be:	9c a5       	ldd	r25, Y+44	; 0x2c
    30c0:	20 e0       	ldi	r18, 0x00	; 0
    30c2:	30 e0       	ldi	r19, 0x00	; 0
    30c4:	40 e8       	ldi	r20, 0x80	; 128
    30c6:	5f e3       	ldi	r21, 0x3F	; 63
    30c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30cc:	88 23       	and	r24, r24
    30ce:	1c f4       	brge	.+6      	; 0x30d6 <setServoDuty+0x82>
		__ticks = 1;
    30d0:	81 e0       	ldi	r24, 0x01	; 1
    30d2:	88 a7       	std	Y+40, r24	; 0x28
    30d4:	91 c0       	rjmp	.+290    	; 0x31f8 <setServoDuty+0x1a4>
	else if (__tmp > 255)
    30d6:	69 a5       	ldd	r22, Y+41	; 0x29
    30d8:	7a a5       	ldd	r23, Y+42	; 0x2a
    30da:	8b a5       	ldd	r24, Y+43	; 0x2b
    30dc:	9c a5       	ldd	r25, Y+44	; 0x2c
    30de:	20 e0       	ldi	r18, 0x00	; 0
    30e0:	30 e0       	ldi	r19, 0x00	; 0
    30e2:	4f e7       	ldi	r20, 0x7F	; 127
    30e4:	53 e4       	ldi	r21, 0x43	; 67
    30e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30ea:	18 16       	cp	r1, r24
    30ec:	0c f0       	brlt	.+2      	; 0x30f0 <setServoDuty+0x9c>
    30ee:	7b c0       	rjmp	.+246    	; 0x31e6 <setServoDuty+0x192>
	{
		_delay_ms(__us / 1000.0);
    30f0:	6d a5       	ldd	r22, Y+45	; 0x2d
    30f2:	7e a5       	ldd	r23, Y+46	; 0x2e
    30f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    30f6:	98 a9       	ldd	r25, Y+48	; 0x30
    30f8:	20 e0       	ldi	r18, 0x00	; 0
    30fa:	30 e0       	ldi	r19, 0x00	; 0
    30fc:	4a e7       	ldi	r20, 0x7A	; 122
    30fe:	54 e4       	ldi	r21, 0x44	; 68
    3100:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3104:	dc 01       	movw	r26, r24
    3106:	cb 01       	movw	r24, r22
    3108:	8c a3       	std	Y+36, r24	; 0x24
    310a:	9d a3       	std	Y+37, r25	; 0x25
    310c:	ae a3       	std	Y+38, r26	; 0x26
    310e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3110:	6c a1       	ldd	r22, Y+36	; 0x24
    3112:	7d a1       	ldd	r23, Y+37	; 0x25
    3114:	8e a1       	ldd	r24, Y+38	; 0x26
    3116:	9f a1       	ldd	r25, Y+39	; 0x27
    3118:	20 e0       	ldi	r18, 0x00	; 0
    311a:	30 e0       	ldi	r19, 0x00	; 0
    311c:	4a ef       	ldi	r20, 0xFA	; 250
    311e:	54 e4       	ldi	r21, 0x44	; 68
    3120:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3124:	dc 01       	movw	r26, r24
    3126:	cb 01       	movw	r24, r22
    3128:	88 a3       	std	Y+32, r24	; 0x20
    312a:	99 a3       	std	Y+33, r25	; 0x21
    312c:	aa a3       	std	Y+34, r26	; 0x22
    312e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3130:	68 a1       	ldd	r22, Y+32	; 0x20
    3132:	79 a1       	ldd	r23, Y+33	; 0x21
    3134:	8a a1       	ldd	r24, Y+34	; 0x22
    3136:	9b a1       	ldd	r25, Y+35	; 0x23
    3138:	20 e0       	ldi	r18, 0x00	; 0
    313a:	30 e0       	ldi	r19, 0x00	; 0
    313c:	40 e8       	ldi	r20, 0x80	; 128
    313e:	5f e3       	ldi	r21, 0x3F	; 63
    3140:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3144:	88 23       	and	r24, r24
    3146:	2c f4       	brge	.+10     	; 0x3152 <setServoDuty+0xfe>
		__ticks = 1;
    3148:	81 e0       	ldi	r24, 0x01	; 1
    314a:	90 e0       	ldi	r25, 0x00	; 0
    314c:	9f 8f       	std	Y+31, r25	; 0x1f
    314e:	8e 8f       	std	Y+30, r24	; 0x1e
    3150:	3f c0       	rjmp	.+126    	; 0x31d0 <setServoDuty+0x17c>
	else if (__tmp > 65535)
    3152:	68 a1       	ldd	r22, Y+32	; 0x20
    3154:	79 a1       	ldd	r23, Y+33	; 0x21
    3156:	8a a1       	ldd	r24, Y+34	; 0x22
    3158:	9b a1       	ldd	r25, Y+35	; 0x23
    315a:	20 e0       	ldi	r18, 0x00	; 0
    315c:	3f ef       	ldi	r19, 0xFF	; 255
    315e:	4f e7       	ldi	r20, 0x7F	; 127
    3160:	57 e4       	ldi	r21, 0x47	; 71
    3162:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3166:	18 16       	cp	r1, r24
    3168:	4c f5       	brge	.+82     	; 0x31bc <setServoDuty+0x168>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    316a:	6c a1       	ldd	r22, Y+36	; 0x24
    316c:	7d a1       	ldd	r23, Y+37	; 0x25
    316e:	8e a1       	ldd	r24, Y+38	; 0x26
    3170:	9f a1       	ldd	r25, Y+39	; 0x27
    3172:	20 e0       	ldi	r18, 0x00	; 0
    3174:	30 e0       	ldi	r19, 0x00	; 0
    3176:	40 e2       	ldi	r20, 0x20	; 32
    3178:	51 e4       	ldi	r21, 0x41	; 65
    317a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    317e:	dc 01       	movw	r26, r24
    3180:	cb 01       	movw	r24, r22
    3182:	bc 01       	movw	r22, r24
    3184:	cd 01       	movw	r24, r26
    3186:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    318a:	dc 01       	movw	r26, r24
    318c:	cb 01       	movw	r24, r22
    318e:	9f 8f       	std	Y+31, r25	; 0x1f
    3190:	8e 8f       	std	Y+30, r24	; 0x1e
    3192:	0f c0       	rjmp	.+30     	; 0x31b2 <setServoDuty+0x15e>
    3194:	88 ec       	ldi	r24, 0xC8	; 200
    3196:	90 e0       	ldi	r25, 0x00	; 0
    3198:	9d 8f       	std	Y+29, r25	; 0x1d
    319a:	8c 8f       	std	Y+28, r24	; 0x1c
    319c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    319e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    31a0:	01 97       	sbiw	r24, 0x01	; 1
    31a2:	f1 f7       	brne	.-4      	; 0x31a0 <setServoDuty+0x14c>
    31a4:	9d 8f       	std	Y+29, r25	; 0x1d
    31a6:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31a8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31aa:	9f 8d       	ldd	r25, Y+31	; 0x1f
    31ac:	01 97       	sbiw	r24, 0x01	; 1
    31ae:	9f 8f       	std	Y+31, r25	; 0x1f
    31b0:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31b2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31b4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    31b6:	00 97       	sbiw	r24, 0x00	; 0
    31b8:	69 f7       	brne	.-38     	; 0x3194 <setServoDuty+0x140>
    31ba:	24 c0       	rjmp	.+72     	; 0x3204 <setServoDuty+0x1b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31bc:	68 a1       	ldd	r22, Y+32	; 0x20
    31be:	79 a1       	ldd	r23, Y+33	; 0x21
    31c0:	8a a1       	ldd	r24, Y+34	; 0x22
    31c2:	9b a1       	ldd	r25, Y+35	; 0x23
    31c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31c8:	dc 01       	movw	r26, r24
    31ca:	cb 01       	movw	r24, r22
    31cc:	9f 8f       	std	Y+31, r25	; 0x1f
    31ce:	8e 8f       	std	Y+30, r24	; 0x1e
    31d0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31d2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    31d4:	9b 8f       	std	Y+27, r25	; 0x1b
    31d6:	8a 8f       	std	Y+26, r24	; 0x1a
    31d8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    31da:	9b 8d       	ldd	r25, Y+27	; 0x1b
    31dc:	01 97       	sbiw	r24, 0x01	; 1
    31de:	f1 f7       	brne	.-4      	; 0x31dc <setServoDuty+0x188>
    31e0:	9b 8f       	std	Y+27, r25	; 0x1b
    31e2:	8a 8f       	std	Y+26, r24	; 0x1a
    31e4:	0f c0       	rjmp	.+30     	; 0x3204 <setServoDuty+0x1b0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    31e6:	69 a5       	ldd	r22, Y+41	; 0x29
    31e8:	7a a5       	ldd	r23, Y+42	; 0x2a
    31ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    31ec:	9c a5       	ldd	r25, Y+44	; 0x2c
    31ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31f2:	dc 01       	movw	r26, r24
    31f4:	cb 01       	movw	r24, r22
    31f6:	88 a7       	std	Y+40, r24	; 0x28
    31f8:	88 a5       	ldd	r24, Y+40	; 0x28
    31fa:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    31fc:	89 8d       	ldd	r24, Y+25	; 0x19
    31fe:	8a 95       	dec	r24
    3200:	f1 f7       	brne	.-4      	; 0x31fe <setServoDuty+0x1aa>
    3202:	89 8f       	std	Y+25, r24	; 0x19
		 DIO_u8SetPinValue(PORTC , PIN_0, LOGIC_LOW);
    3204:	83 e0       	ldi	r24, 0x03	; 3
    3206:	60 e0       	ldi	r22, 0x00	; 0
    3208:	40 e0       	ldi	r20, 0x00	; 0
    320a:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_u8SetPinValue>
		_delay_us(20000-duartion);
    320e:	20 e2       	ldi	r18, 0x20	; 32
    3210:	3e e4       	ldi	r19, 0x4E	; 78
    3212:	8a a9       	ldd	r24, Y+50	; 0x32
    3214:	9b a9       	ldd	r25, Y+51	; 0x33
    3216:	a9 01       	movw	r20, r18
    3218:	48 1b       	sub	r20, r24
    321a:	59 0b       	sbc	r21, r25
    321c:	ca 01       	movw	r24, r20
    321e:	cc 01       	movw	r24, r24
    3220:	a0 e0       	ldi	r26, 0x00	; 0
    3222:	b0 e0       	ldi	r27, 0x00	; 0
    3224:	bc 01       	movw	r22, r24
    3226:	cd 01       	movw	r24, r26
    3228:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    322c:	dc 01       	movw	r26, r24
    322e:	cb 01       	movw	r24, r22
    3230:	8d 8b       	std	Y+21, r24	; 0x15
    3232:	9e 8b       	std	Y+22, r25	; 0x16
    3234:	af 8b       	std	Y+23, r26	; 0x17
    3236:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3238:	6d 89       	ldd	r22, Y+21	; 0x15
    323a:	7e 89       	ldd	r23, Y+22	; 0x16
    323c:	8f 89       	ldd	r24, Y+23	; 0x17
    323e:	98 8d       	ldd	r25, Y+24	; 0x18
    3240:	2b ea       	ldi	r18, 0xAB	; 171
    3242:	3a ea       	ldi	r19, 0xAA	; 170
    3244:	4a e2       	ldi	r20, 0x2A	; 42
    3246:	50 e4       	ldi	r21, 0x40	; 64
    3248:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    324c:	dc 01       	movw	r26, r24
    324e:	cb 01       	movw	r24, r22
    3250:	89 8b       	std	Y+17, r24	; 0x11
    3252:	9a 8b       	std	Y+18, r25	; 0x12
    3254:	ab 8b       	std	Y+19, r26	; 0x13
    3256:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3258:	69 89       	ldd	r22, Y+17	; 0x11
    325a:	7a 89       	ldd	r23, Y+18	; 0x12
    325c:	8b 89       	ldd	r24, Y+19	; 0x13
    325e:	9c 89       	ldd	r25, Y+20	; 0x14
    3260:	20 e0       	ldi	r18, 0x00	; 0
    3262:	30 e0       	ldi	r19, 0x00	; 0
    3264:	40 e8       	ldi	r20, 0x80	; 128
    3266:	5f e3       	ldi	r21, 0x3F	; 63
    3268:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    326c:	88 23       	and	r24, r24
    326e:	1c f4       	brge	.+6      	; 0x3276 <setServoDuty+0x222>
		__ticks = 1;
    3270:	81 e0       	ldi	r24, 0x01	; 1
    3272:	88 8b       	std	Y+16, r24	; 0x10
    3274:	91 c0       	rjmp	.+290    	; 0x3398 <setServoDuty+0x344>
	else if (__tmp > 255)
    3276:	69 89       	ldd	r22, Y+17	; 0x11
    3278:	7a 89       	ldd	r23, Y+18	; 0x12
    327a:	8b 89       	ldd	r24, Y+19	; 0x13
    327c:	9c 89       	ldd	r25, Y+20	; 0x14
    327e:	20 e0       	ldi	r18, 0x00	; 0
    3280:	30 e0       	ldi	r19, 0x00	; 0
    3282:	4f e7       	ldi	r20, 0x7F	; 127
    3284:	53 e4       	ldi	r21, 0x43	; 67
    3286:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    328a:	18 16       	cp	r1, r24
    328c:	0c f0       	brlt	.+2      	; 0x3290 <setServoDuty+0x23c>
    328e:	7b c0       	rjmp	.+246    	; 0x3386 <setServoDuty+0x332>
	{
		_delay_ms(__us / 1000.0);
    3290:	6d 89       	ldd	r22, Y+21	; 0x15
    3292:	7e 89       	ldd	r23, Y+22	; 0x16
    3294:	8f 89       	ldd	r24, Y+23	; 0x17
    3296:	98 8d       	ldd	r25, Y+24	; 0x18
    3298:	20 e0       	ldi	r18, 0x00	; 0
    329a:	30 e0       	ldi	r19, 0x00	; 0
    329c:	4a e7       	ldi	r20, 0x7A	; 122
    329e:	54 e4       	ldi	r21, 0x44	; 68
    32a0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    32a4:	dc 01       	movw	r26, r24
    32a6:	cb 01       	movw	r24, r22
    32a8:	8c 87       	std	Y+12, r24	; 0x0c
    32aa:	9d 87       	std	Y+13, r25	; 0x0d
    32ac:	ae 87       	std	Y+14, r26	; 0x0e
    32ae:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32b0:	6c 85       	ldd	r22, Y+12	; 0x0c
    32b2:	7d 85       	ldd	r23, Y+13	; 0x0d
    32b4:	8e 85       	ldd	r24, Y+14	; 0x0e
    32b6:	9f 85       	ldd	r25, Y+15	; 0x0f
    32b8:	20 e0       	ldi	r18, 0x00	; 0
    32ba:	30 e0       	ldi	r19, 0x00	; 0
    32bc:	4a ef       	ldi	r20, 0xFA	; 250
    32be:	54 e4       	ldi	r21, 0x44	; 68
    32c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c4:	dc 01       	movw	r26, r24
    32c6:	cb 01       	movw	r24, r22
    32c8:	88 87       	std	Y+8, r24	; 0x08
    32ca:	99 87       	std	Y+9, r25	; 0x09
    32cc:	aa 87       	std	Y+10, r26	; 0x0a
    32ce:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    32d0:	68 85       	ldd	r22, Y+8	; 0x08
    32d2:	79 85       	ldd	r23, Y+9	; 0x09
    32d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    32d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    32d8:	20 e0       	ldi	r18, 0x00	; 0
    32da:	30 e0       	ldi	r19, 0x00	; 0
    32dc:	40 e8       	ldi	r20, 0x80	; 128
    32de:	5f e3       	ldi	r21, 0x3F	; 63
    32e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32e4:	88 23       	and	r24, r24
    32e6:	2c f4       	brge	.+10     	; 0x32f2 <setServoDuty+0x29e>
		__ticks = 1;
    32e8:	81 e0       	ldi	r24, 0x01	; 1
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	9f 83       	std	Y+7, r25	; 0x07
    32ee:	8e 83       	std	Y+6, r24	; 0x06
    32f0:	3f c0       	rjmp	.+126    	; 0x3370 <setServoDuty+0x31c>
	else if (__tmp > 65535)
    32f2:	68 85       	ldd	r22, Y+8	; 0x08
    32f4:	79 85       	ldd	r23, Y+9	; 0x09
    32f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    32f8:	9b 85       	ldd	r25, Y+11	; 0x0b
    32fa:	20 e0       	ldi	r18, 0x00	; 0
    32fc:	3f ef       	ldi	r19, 0xFF	; 255
    32fe:	4f e7       	ldi	r20, 0x7F	; 127
    3300:	57 e4       	ldi	r21, 0x47	; 71
    3302:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3306:	18 16       	cp	r1, r24
    3308:	4c f5       	brge	.+82     	; 0x335c <setServoDuty+0x308>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    330a:	6c 85       	ldd	r22, Y+12	; 0x0c
    330c:	7d 85       	ldd	r23, Y+13	; 0x0d
    330e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3310:	9f 85       	ldd	r25, Y+15	; 0x0f
    3312:	20 e0       	ldi	r18, 0x00	; 0
    3314:	30 e0       	ldi	r19, 0x00	; 0
    3316:	40 e2       	ldi	r20, 0x20	; 32
    3318:	51 e4       	ldi	r21, 0x41	; 65
    331a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    331e:	dc 01       	movw	r26, r24
    3320:	cb 01       	movw	r24, r22
    3322:	bc 01       	movw	r22, r24
    3324:	cd 01       	movw	r24, r26
    3326:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    332a:	dc 01       	movw	r26, r24
    332c:	cb 01       	movw	r24, r22
    332e:	9f 83       	std	Y+7, r25	; 0x07
    3330:	8e 83       	std	Y+6, r24	; 0x06
    3332:	0f c0       	rjmp	.+30     	; 0x3352 <setServoDuty+0x2fe>
    3334:	88 ec       	ldi	r24, 0xC8	; 200
    3336:	90 e0       	ldi	r25, 0x00	; 0
    3338:	9d 83       	std	Y+5, r25	; 0x05
    333a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    333c:	8c 81       	ldd	r24, Y+4	; 0x04
    333e:	9d 81       	ldd	r25, Y+5	; 0x05
    3340:	01 97       	sbiw	r24, 0x01	; 1
    3342:	f1 f7       	brne	.-4      	; 0x3340 <setServoDuty+0x2ec>
    3344:	9d 83       	std	Y+5, r25	; 0x05
    3346:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3348:	8e 81       	ldd	r24, Y+6	; 0x06
    334a:	9f 81       	ldd	r25, Y+7	; 0x07
    334c:	01 97       	sbiw	r24, 0x01	; 1
    334e:	9f 83       	std	Y+7, r25	; 0x07
    3350:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3352:	8e 81       	ldd	r24, Y+6	; 0x06
    3354:	9f 81       	ldd	r25, Y+7	; 0x07
    3356:	00 97       	sbiw	r24, 0x00	; 0
    3358:	69 f7       	brne	.-38     	; 0x3334 <setServoDuty+0x2e0>
    335a:	24 c0       	rjmp	.+72     	; 0x33a4 <setServoDuty+0x350>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    335c:	68 85       	ldd	r22, Y+8	; 0x08
    335e:	79 85       	ldd	r23, Y+9	; 0x09
    3360:	8a 85       	ldd	r24, Y+10	; 0x0a
    3362:	9b 85       	ldd	r25, Y+11	; 0x0b
    3364:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3368:	dc 01       	movw	r26, r24
    336a:	cb 01       	movw	r24, r22
    336c:	9f 83       	std	Y+7, r25	; 0x07
    336e:	8e 83       	std	Y+6, r24	; 0x06
    3370:	8e 81       	ldd	r24, Y+6	; 0x06
    3372:	9f 81       	ldd	r25, Y+7	; 0x07
    3374:	9b 83       	std	Y+3, r25	; 0x03
    3376:	8a 83       	std	Y+2, r24	; 0x02
    3378:	8a 81       	ldd	r24, Y+2	; 0x02
    337a:	9b 81       	ldd	r25, Y+3	; 0x03
    337c:	01 97       	sbiw	r24, 0x01	; 1
    337e:	f1 f7       	brne	.-4      	; 0x337c <setServoDuty+0x328>
    3380:	9b 83       	std	Y+3, r25	; 0x03
    3382:	8a 83       	std	Y+2, r24	; 0x02
    3384:	0f c0       	rjmp	.+30     	; 0x33a4 <setServoDuty+0x350>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3386:	69 89       	ldd	r22, Y+17	; 0x11
    3388:	7a 89       	ldd	r23, Y+18	; 0x12
    338a:	8b 89       	ldd	r24, Y+19	; 0x13
    338c:	9c 89       	ldd	r25, Y+20	; 0x14
    338e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3392:	dc 01       	movw	r26, r24
    3394:	cb 01       	movw	r24, r22
    3396:	88 8b       	std	Y+16, r24	; 0x10
    3398:	88 89       	ldd	r24, Y+16	; 0x10
    339a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    339c:	89 81       	ldd	r24, Y+1	; 0x01
    339e:	8a 95       	dec	r24
    33a0:	f1 f7       	brne	.-4      	; 0x339e <setServoDuty+0x34a>
    33a2:	89 83       	std	Y+1, r24	; 0x01
#include   "servo_int.h"


void setServoDuty(u16 duartion) {
	u8 i;
	for (i=0; i<5; i++) {
    33a4:	89 a9       	ldd	r24, Y+49	; 0x31
    33a6:	8f 5f       	subi	r24, 0xFF	; 255
    33a8:	89 ab       	std	Y+49, r24	; 0x31
    33aa:	89 a9       	ldd	r24, Y+49	; 0x31
    33ac:	85 30       	cpi	r24, 0x05	; 5
    33ae:	08 f4       	brcc	.+2      	; 0x33b2 <setServoDuty+0x35e>
    33b0:	5f ce       	rjmp	.-834    	; 0x3070 <setServoDuty+0x1c>
		 DIO_u8SetPinValue(PORTC , PIN_0, LOGIC_HIGH);
		_delay_us(duartion);
		 DIO_u8SetPinValue(PORTC , PIN_0, LOGIC_LOW);
		_delay_us(20000-duartion);
	}
}
    33b2:	e3 96       	adiw	r28, 0x33	; 51
    33b4:	0f b6       	in	r0, 0x3f	; 63
    33b6:	f8 94       	cli
    33b8:	de bf       	out	0x3e, r29	; 62
    33ba:	0f be       	out	0x3f, r0	; 63
    33bc:	cd bf       	out	0x3d, r28	; 61
    33be:	cf 91       	pop	r28
    33c0:	df 91       	pop	r29
    33c2:	08 95       	ret

000033c4 <__mulsi3>:
    33c4:	62 9f       	mul	r22, r18
    33c6:	d0 01       	movw	r26, r0
    33c8:	73 9f       	mul	r23, r19
    33ca:	f0 01       	movw	r30, r0
    33cc:	82 9f       	mul	r24, r18
    33ce:	e0 0d       	add	r30, r0
    33d0:	f1 1d       	adc	r31, r1
    33d2:	64 9f       	mul	r22, r20
    33d4:	e0 0d       	add	r30, r0
    33d6:	f1 1d       	adc	r31, r1
    33d8:	92 9f       	mul	r25, r18
    33da:	f0 0d       	add	r31, r0
    33dc:	83 9f       	mul	r24, r19
    33de:	f0 0d       	add	r31, r0
    33e0:	74 9f       	mul	r23, r20
    33e2:	f0 0d       	add	r31, r0
    33e4:	65 9f       	mul	r22, r21
    33e6:	f0 0d       	add	r31, r0
    33e8:	99 27       	eor	r25, r25
    33ea:	72 9f       	mul	r23, r18
    33ec:	b0 0d       	add	r27, r0
    33ee:	e1 1d       	adc	r30, r1
    33f0:	f9 1f       	adc	r31, r25
    33f2:	63 9f       	mul	r22, r19
    33f4:	b0 0d       	add	r27, r0
    33f6:	e1 1d       	adc	r30, r1
    33f8:	f9 1f       	adc	r31, r25
    33fa:	bd 01       	movw	r22, r26
    33fc:	cf 01       	movw	r24, r30
    33fe:	11 24       	eor	r1, r1
    3400:	08 95       	ret

00003402 <__udivmodsi4>:
    3402:	a1 e2       	ldi	r26, 0x21	; 33
    3404:	1a 2e       	mov	r1, r26
    3406:	aa 1b       	sub	r26, r26
    3408:	bb 1b       	sub	r27, r27
    340a:	fd 01       	movw	r30, r26
    340c:	0d c0       	rjmp	.+26     	; 0x3428 <__udivmodsi4_ep>

0000340e <__udivmodsi4_loop>:
    340e:	aa 1f       	adc	r26, r26
    3410:	bb 1f       	adc	r27, r27
    3412:	ee 1f       	adc	r30, r30
    3414:	ff 1f       	adc	r31, r31
    3416:	a2 17       	cp	r26, r18
    3418:	b3 07       	cpc	r27, r19
    341a:	e4 07       	cpc	r30, r20
    341c:	f5 07       	cpc	r31, r21
    341e:	20 f0       	brcs	.+8      	; 0x3428 <__udivmodsi4_ep>
    3420:	a2 1b       	sub	r26, r18
    3422:	b3 0b       	sbc	r27, r19
    3424:	e4 0b       	sbc	r30, r20
    3426:	f5 0b       	sbc	r31, r21

00003428 <__udivmodsi4_ep>:
    3428:	66 1f       	adc	r22, r22
    342a:	77 1f       	adc	r23, r23
    342c:	88 1f       	adc	r24, r24
    342e:	99 1f       	adc	r25, r25
    3430:	1a 94       	dec	r1
    3432:	69 f7       	brne	.-38     	; 0x340e <__udivmodsi4_loop>
    3434:	60 95       	com	r22
    3436:	70 95       	com	r23
    3438:	80 95       	com	r24
    343a:	90 95       	com	r25
    343c:	9b 01       	movw	r18, r22
    343e:	ac 01       	movw	r20, r24
    3440:	bd 01       	movw	r22, r26
    3442:	cf 01       	movw	r24, r30
    3444:	08 95       	ret

00003446 <__prologue_saves__>:
    3446:	2f 92       	push	r2
    3448:	3f 92       	push	r3
    344a:	4f 92       	push	r4
    344c:	5f 92       	push	r5
    344e:	6f 92       	push	r6
    3450:	7f 92       	push	r7
    3452:	8f 92       	push	r8
    3454:	9f 92       	push	r9
    3456:	af 92       	push	r10
    3458:	bf 92       	push	r11
    345a:	cf 92       	push	r12
    345c:	df 92       	push	r13
    345e:	ef 92       	push	r14
    3460:	ff 92       	push	r15
    3462:	0f 93       	push	r16
    3464:	1f 93       	push	r17
    3466:	cf 93       	push	r28
    3468:	df 93       	push	r29
    346a:	cd b7       	in	r28, 0x3d	; 61
    346c:	de b7       	in	r29, 0x3e	; 62
    346e:	ca 1b       	sub	r28, r26
    3470:	db 0b       	sbc	r29, r27
    3472:	0f b6       	in	r0, 0x3f	; 63
    3474:	f8 94       	cli
    3476:	de bf       	out	0x3e, r29	; 62
    3478:	0f be       	out	0x3f, r0	; 63
    347a:	cd bf       	out	0x3d, r28	; 61
    347c:	09 94       	ijmp

0000347e <__epilogue_restores__>:
    347e:	2a 88       	ldd	r2, Y+18	; 0x12
    3480:	39 88       	ldd	r3, Y+17	; 0x11
    3482:	48 88       	ldd	r4, Y+16	; 0x10
    3484:	5f 84       	ldd	r5, Y+15	; 0x0f
    3486:	6e 84       	ldd	r6, Y+14	; 0x0e
    3488:	7d 84       	ldd	r7, Y+13	; 0x0d
    348a:	8c 84       	ldd	r8, Y+12	; 0x0c
    348c:	9b 84       	ldd	r9, Y+11	; 0x0b
    348e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3490:	b9 84       	ldd	r11, Y+9	; 0x09
    3492:	c8 84       	ldd	r12, Y+8	; 0x08
    3494:	df 80       	ldd	r13, Y+7	; 0x07
    3496:	ee 80       	ldd	r14, Y+6	; 0x06
    3498:	fd 80       	ldd	r15, Y+5	; 0x05
    349a:	0c 81       	ldd	r16, Y+4	; 0x04
    349c:	1b 81       	ldd	r17, Y+3	; 0x03
    349e:	aa 81       	ldd	r26, Y+2	; 0x02
    34a0:	b9 81       	ldd	r27, Y+1	; 0x01
    34a2:	ce 0f       	add	r28, r30
    34a4:	d1 1d       	adc	r29, r1
    34a6:	0f b6       	in	r0, 0x3f	; 63
    34a8:	f8 94       	cli
    34aa:	de bf       	out	0x3e, r29	; 62
    34ac:	0f be       	out	0x3f, r0	; 63
    34ae:	cd bf       	out	0x3d, r28	; 61
    34b0:	ed 01       	movw	r28, r26
    34b2:	08 95       	ret

000034b4 <_exit>:
    34b4:	f8 94       	cli

000034b6 <__stop_program>:
    34b6:	ff cf       	rjmp	.-2      	; 0x34b6 <__stop_program>
